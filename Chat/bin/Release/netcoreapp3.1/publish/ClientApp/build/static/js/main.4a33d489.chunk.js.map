{"version":3,"sources":["constants.ts","utils/utils.ts","components/styles/ChatThread.styles.ts","components/ChatThread.tsx","core/actions/ContosoClientAction.ts","core/actions/ConversationsAction.ts","core/actions/MessagesAction.ts","core/actions/ThreadAction.ts","core/actions/ThreadMembersAction.ts","core/actions/calls.ts","core/actions/controls.ts","core/actions/devices.ts","core/actions/streams.ts","core/RemoteStreamSelector.ts","core/constants.ts","core/actions/sdk.ts","components/SidePanel.tsx","core/sideEffects.ts","containers/ChatThread.ts","components/styles/SendBox.styles.ts","containers/SendBox.ts","components/SendBox.tsx","components/styles/TypingIndicator.styles.ts","containers/TypingIndicator.ts","components/TypingIndicator.tsx","components/styles/ChatArea.styles.ts","containers/ChatArea.ts","components/ChatArea.tsx","components/styles/SidePanel.styles.ts","components/styles/ChatHeader.styles.ts","components/InviteFooter.tsx","components/styles/MemberItem.styles.ts","components/MemberItem.tsx","components/styles/ConfigurationScreen.styles.ts","components/LocalPreview.tsx","components/CommandPanel.tsx","containers/ChatHeader.ts","components/ChatHeader.tsx","containers/SidePanel.ts","components/styles/ChatScreen.styles.ts","containers/ChatScreen.ts","components/ChatScreen.tsx","components/DisplayNameField.tsx","containers/ConfigurationScreen.ts","components/ConfigurationScreen.tsx","components/styles/LocalPreview.styles.ts","components/styles/LocalSettings.styles.ts","components/LocalSettings.tsx","components/styles/CallConfigurationScreen.styles.ts","components/CallDisplayNameField.tsx","containers/CallConfigurationScreen.ts","components/CallConfigurationScreen.tsx","components/styles/EndChat.styles.ts","components/EndScreen.tsx","components/RemovedFromThreadScreen.tsx","components/styles/HomeScreen.styles.ts","components/HomeScreen.tsx","containers/HomeScreen.ts","core/reducers/ContosoClientReducers.ts","core/reducers/ConversationsReducers.ts","core/reducers/MessagesReducer.ts","core/reducers/ThreadReducers.ts","core/reducers/ThreadMembersReducers.ts","core/reducers/devices.ts","core/reducers/streams.ts","core/reducers/controls.ts","core/reducers/sdk.ts","core/reducers/calls.ts","core/reducers/index.ts","components/styles/MediaControls.styles.ts","components/MediaControls.tsx","components/styles/ParticipantStack.styles.ts","components/ParticipantStack.tsx","containers/ParticipantStack.ts","components/styles/CommandPanel.styles.ts","components/Footer.tsx","components/styles/Header.styles.ts","containers/Header.ts","components/Header.tsx","components/styles/MediaGallery.styles.ts","components/styles/StreamMedia.styles.ts","components/LocalStreamMedia.tsx","components/RemoteStreamMedia.tsx","containers/MediaGallery.ts","components/MediaGallery.tsx","components/styles/MediaFullScreen.styles.ts","components/MediaFullScreen.tsx","components/styles/GroupCall.styles.ts","containers/GroupCall.ts","components/GroupCall.tsx","components/styles/EndCall.styles.ts","components/EndCall.tsx","App.tsx","index.tsx","assets/staticmedia.svg","assets/hero.svg"],"names":["URL_REGEX","EMPTY_MESSAGE_REGEX","getBackgroundColor","avatar","backgroundColor","getThreadId","urlParams","URLSearchParams","window","location","search","console","log","get","compareMessages","firstMessage","secondMessage","undefined","createdOn","Date","getTime","isUserMatchingIdentity","user","communicationUserId","isCommunicationUserIdentifier","convertToClientChatMessage","chatMessage","clientMessageId","content","message","sender","senderDisplayName","id","createNewClientChatMessage","userId","displayName","kind","utils","getAppServiceUrl","origin","getTokenForUser","a","fetch","response","ok","json","Error","getRefreshedTokenForUser","identity","token","isSelectedAudioDeviceInList","selected","list","filter","item","name","length","isSelectedVideoDeviceInList","isMobileSession","navigator","userAgent","match","isSmallScreen","innerWidth","innerHeight","isUnsupportedBrowser","getId","identifier","phoneNumber","microsoftTeamsUserId","getStreamId","stream","mediaStreamType","isOnIphoneAndNotSafari","includes","getBuildTime","messageAvatarContainerStyle","mergeStyles","width","minWidth","height","borderRadius","alignItems","display","justifyContent","fontFamily","fontSize","chatContainerStyle","maxHeight","overflow","noReadReceiptStyle","chatStyle","border","readReceiptIconStyle","mine","marginLeft","newMessageButtonStyle","float","loadMoreMessageButtonStyle","minHeight","DownIconStyle","marginRight","createdRef","createRef","chatThreadRef","setChatClient","chatClient","type","setContosoUser","setContosoUsers","users","setReceipts","receipts","setMessages","messages","setTypingNotifications","typingNotification","setTypingUsers","typingUsers","setFailedMessages","failedMessages","setThreadTopicName","topicName","setThreadId","threadId","setThreadMembers","threadMembers","setThreadMembersError","error","setCallAgent","callAgent","callAdded","addedCall","call","callRemoved","removedCall","group","incomingCallEndReason","direction","callEndReason","groupCallEndReason","setCallState","callState","setParticipants","participants","remoteParticipants","setDominantParticipants","dominantParticipants","setMic","mic","setShareScreen","shareScreen","setDeviceManager","deviceManager","setMicrophonePermission","microphonePermission","setCameraPermission","cameraPermission","setAudioDeviceInfo","audioDeviceInfo","setVideoDeviceInfo","videoDeviceInfo","setAudioDeviceList","audioDeviceList","setVideoDeviceList","videoDeviceList","addScreenShareStream","AudioChangedEvent","participantId","isUnMuted","timeStamp","this","now","participant","lastUnMuted","VideoChangedEvent","isVideoOn","SelectionState","RemoteStreamSelector","dominantParticipantsCount","dispatch","dipatch","batchedCommands","compareFn","b","processCommands","commands","forEach","command","process","sortedList","values","sort","slice","participantAudioChanged","isUnmuted","push","participantVideoChanged","participantStateChanged","state","set","delete","Map","setInterval","ProcessingDelayInSeconds","Singleton","getInstance","Constants","INCOMING","RINGING","CONNECTING","CONNECTED","DEFAULT_IMG_WIDTH","CROP_MEDIA","CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID","LOCAL_VIDEO_PREVIEW_ID","MINI_HEADER_WINDOW_WIDTH","DOMINANT_PARTICIPANTS_COUNT","SidePanelTypes","setUserId","setCallClient","callClient","addUserToThread","emoji","getState","thread","getEnvironmentUrl","environmentUrl","getToken","userToken","options","tokenRefresher","refreshTokenAsync","refreshProactively","userAccessTokenCredentialNew","AzureCommunicationTokenCredential","ChatClient","setEmoji","getChatThreadClient","chatThreadClient","subscribeForMessage","subscribeForTypingIndicator","subscribeForReadReceipt","subscribeForChatParticipants","subscribeForTopicUpdated","addThreadMemberHelper","memberRole","getThreadInformation","getMessages","startRealtimeNotifications","on","event","fromId","from","originalArrivalTime","receivedOn","recipientId","recipient","version","chat","contosoClient","clientChatMessage","listReadReceipts","byPage","page","receipt","participantsRemoved","chatParticipant","isRemoved","originalParticipants","i","addedParticipants","participantsAdded","map","shareHistoryTime","addedParticipant","j","Object","assign","threadMember","getEmoji","serverUser","e","properties","topic","shouldDisplayTyping","lastReceivedTypingEventDate","isValidThread","validationRequestOptions","method","status","getMessagesHelper","reversedClientChatMessages","reverse","createThread","createThreadHelper","href","removeThreadMemberByUserId","removeParticipant","iteratableParticipants","listParticipants","chatParticipants","validChatParticipants","getProperties","updateThreadTopicName","setIsSavingTopicName","updateThreadTopicNameHelper","createThreadRequestOptions","createThreadResponse","text","updateTopic","body","addMemberRequestOptions","headers","JSON","stringify","sendMessageHelper","messageContent","sendMessage","messageResult","getMessage","updateMessagesArray","failed","newMessage","listMessages","maxPageSize","getMessagesResponse","messages_temp","sendTypingNotificationHelper","sendTypingNotification","getRequestOptions","then","getTokenRequestOptions","getTokenResponse","_responseJson","userIdentity","Promise","resolve","reject","Emoji","sendReadReceiptHelper","messageId","postReadReceiptRequest","chatMessageId","sendReadReceipt","setMicrophone","calls","controls","unmute","mute","subscribeToParticipant","remoteStreamSelector","isMuted","videoStreams","isAvailable","added","addedStream","updateAudioDevices","getMicrophones","microphoneList","devices","selectMicrophone","updateVideoDevices","getCameras","cameraList","subscribeToDeviceManager","askDevicePermission","audio","video","registerToCallAgent","callEndedHandler","setLogLevel","hangUp","isScreenSharingOn","ev","addedRemoteParticipant","removed","code","endCall","catch","joinGroup","context","callOptions","join","connect","isYourLatestMessage","latestArrivalTime","latestMessageId","date","isLargeParticipantsGroup","isMessageSeen","conversations","find","readMessagecreatedOn","isYourLatestSeenMessage","MessagesWithSeen","isSeen","props","useState","messagesWithAttached","setMessagesWithAttached","indexOfTheFirstMessage","setIndexOfTheFirstMessage","isAtBottomOfScroll","setIsAtBottomOfScroll","isAtTopOfScroll","setIsAtTopOfScroll","existsNewMessage","setExistsNewMessage","shouldUpdateMessageWithAttached","setShouldUpdateMessageWithAttached","numberOfMessagesToRender","setNumberOfMessagesToRender","messagesWithAttachedRef","useRef","isAtBottomOfScrollRef","numberOfMessagesToRenderRef","useEffect","numberOfMessagesToRenderValue","Math","ceil","current","clientHeight","updateIndexOfTheFirstMessage","scrollToBottom","addEventListener","handleScroll","removeEventListener","updateMessageWithAttached","loadNewMessages","scrollTop","scrollHeight","readReceiptIcon","failedMessage","TooltipHost","size","styles","color","messageWithAttached","className","isAtBottomOfScrollValue","atBottom","atTop","updateIndexOfTheFirstMessageToLoadMore","messagesWithAttachedValue","newMessagesWithAttached","index","messagesList","attached","Ref","innerRef","Stack","Button","fluid","disabled","onClick","Chat","items","liveAuthor","messageContentItem","aria-live","split","part","test","target","rel","gutter","key","contentPosition","Flex","vAlign","Message","overflowY","author","PrimaryButton","Icon","iconName","textFieldStyle","TextFieldStyleProps","wrapper","fieldGroup","sendBoxStyle","fontWeight","sendIconStyle","paddingLeft","paddingTop","onSendMessage","floor","random","toString","onSendTypingNotification","lastSentTypingNotificationDate","setLastSentTypingNotificationDate","currentDate","textValue","setTextValue","textValueOverflow","setTextValueOverflow","addMessage","horizontal","TextField","borderless","ariaLabel","inputClassName","placeholder","value","onChange","autoComplete","onKeyUp","which","outline","TypingIndicatorContainerStyle","TypingIndicatorListStyle","whiteSpace","textOverflow","paddingRight","TypingIndicatorVerbStyle","generateTypingIndicatorList","typingUsersFromStore","contosoUsers","currentContosoUser","typingIndicator","typingUser","typingUserWithEmoji","len","generateTypingIndicatorVerb","typingIndicatorVerb","chatAreaContainerStyle","paddingBottom","typingNotifications","onUpdateTypingUsers","listener","clearInterval","palette","getTheme","paneFooterTokens","childrenGap","textFieldStyles","field","neutralSecondary","padding","root","footerMainTextStyle","marginTop","copyLinkButtonStyle","copyIconStyle","copyLinkTextStyle","sidePanelContainerStyle","showSidePanel","borderLeft","titleStyle","marginBottom","memberListStyle","settingsListStyle","textFieldIconStyle","saveChatNameButtonStyle","inviteFooterStackContainerStyles","bottom","borderTop","inviteFooterStackStyles","topicWarningStyle","emptyWarningStyle","saveButtonTextStyle","groupNameStyle","groupNameInputBoxStyle","boxSizing","groupNameInputBoxWarningStyle","chatHeaderContainerStyle","selectors","borderBottom","topicNameLabelStyle","maxWidth","wordBreak","leaveButtonStyle","borderWidth","borderColor","pivotItemStyle","pivotItemStyles","linkIsSelected","themePrimary","link","verticalAlign","largeButtonContainerStyle","copyJoinLink","document","getElementById","select","execCommand","focus","tokens","tabIndex","baseURI","tab-index","memberItemContainerStyle","position","memberItemNameStyle","memberItemIsYouStyle","moreInforStyle","right","isYou","IconButton","menuIconProps","menuProps","responsiveLayoutStyle","flexDirection","leftPreviewContainerStyle","rightInputContainerStyle","smallAvatarContainerStyle","selectedAvatar","largeAvatarContainerStyle","smallAvatarStyle","letterSpacing","lineHeight","textAlign","largeAvatarStyle","labelFontStyle","inputBoxStyle","horizontalAlign","inputBoxTextStyle","inputBoxWarningStyle","warningStyle","chatIconStyle","buttonStyle","mainContainerStyle","startChatButtonTextStyle","rendererView","CommandPanelTypes","existsTopicName","generateHeaderMessage","header","members","member","removeChatParticipantById","setHeader","togglePeople","selectedPane","setSelectedPane","People","None","toggleSettings","Settings","leaveChatHandler","startCallHandler","Item","align","Pivot","onKeyDownCapture","keyCode","preventDefault","getTabId","itemKey","onLinkClick","togglePivotItem","defaultSelectedKey","selectedKey","PivotItem","onRenderItemLink","UserFriendsIcon","SettingsIcon","DefaultButton","setTopicName","setIsEditingTopicName","isTopicNameOverflow","setTopicNameOverflow","isSavingTopicName","onTopicNameSubmit","setTimeout","StackItem","FocusZone","FocusZoneDirection","vertical","person","MemberItem","InviteFooter","defaultValue","onSubmit","chatScreenContainerStyle","chatScreenBottomContainerStyle","removedFromThreadHandler","grow","disableShrink","isEmpty","isNameLengthExceedLimit","setName","setNameLengthExceedLimit","setEmptyWarning","onKeyDown","validateName","role","setup","avatarsList","emptyWarning","setSelectedAvatar","isJoining","setIsJoining","setIsValidThread","joinChatHandler","isValidThreadProp","joinChatArea","aria-label","opacity","wordWrap","data-is-focusable","onFocus","DisplayNameField","ChatIcon","Spinner","label","ariaLive","labelPosition","toggleStyle","imgStyles","toggleButtonsBarToken","localPreviewContainerStyle","background","neutralLighter","neutralPrimaryAlt","toggleButtonsBarStyle","neutralQuaternaryAlt","localPreviewStyle","imageProps","src","staticMediaSVG","imageFit","ImageFit","cover","maximizeFrame","localVideoStream","renderer","VideoStreamRenderer","createView","scalingMode","isMirrored","container","childElementCount","appendChild","dispose","Image","CallVideoIcon","Toggle","checked","_ev","LocalVideoStream","setLocalVideoStream","MicIcon","mainStackTokens","micStackTokens","dropDownStyles","caretDownWrapper","dropdownItem","dropdown","title","localSettingsContainer","getDropDownList","val","deviceType","Dropdown","configurationStackTokens","videoCameraIconStyle","localSettingsContainerStyle","fullScreenStyle","verticalStackStyle","boxShadow","margin","overflowWrap","connector","screenWidth","groupId","videoOptions","localVideoStreams","audioOptions","muted","tokenResponse","tokenCredential","createCallAgent","sdk","deviceInfo","setupCallClient","unsupportedStateHandler","CallClient","getDeviceManager","initCallClient","registerToCallEvents","endCallHandler","setGroup","updateDevices","LocalPreview","CallDisplayNameField","LocalSettings","VideoCameraEmphasisIcon","buttonsStackTokens","upperStackTokens","endCallContainerStyle","endCallTitleStyle","buttonTextStyle","isRejoiningThread","setIsRejoiningThread","rejoinThread","rejoinHandler","homeHandler","imgStyle","containerTokens","headerStyle","listStyleType","upperStackStyle","startChatTextStyle","imageStyleProps","image","createThreadHandler","heroSVG","isCreatingThread","setIsCreatingThread","alt","initContosoState","initConversationsState","initMessagesState","initThreadState","initState","initialState","localVideoRendererIsBusy","screenShareStreams","localVideo","attempts","reducer","combineReducers","action","streams","newScreenShareStream","mediaControlStyles","controlButtonStyle","white","controlButtonDisabledStyle","neutralLight","endCallButtonStyle","endCallButtonTextStyle","fullWidth","cameraActive","cameraDisabled","cameraOnClick","onCameraChange","micActive","micDisabled","micOnClick","onMicChange","screenShareDisabled","activeScreenShareStream","CommandButton","CallVideoOffIcon","MicOffIcon","isLocalScreenShareSupportedInBrowser","onScreenShareChange","screenShareActive","CallControlCloseTrayIcon","CallControlPresentNewIcon","onEndCallClick","compressedMode","CallEndIcon","itemStyles","alignSelf","primaryText","overFlowButtonStyles","participantStackStyle","iconStyle","participantStackTokens","onRenderItem","Persona","PersonaSize","size32","presence","PersonaPresence","online","offline","isSpeaking","isScreenSharing","FontIcon","onRenderOverflowButton","overflowItems","screenShareStream","OverflowSet","getParticipants","fullHeightStyles","paneFooterStyles","paneHeaderStyle","paneHeaderTextStyle","settingsContainerStyle","Separator","Footer","headerContainer","headerCenteredContainer","separatorContainerStyle","separatorStyles","actionable","forEveryone","setScreenShare","screenShare","startScreenSharing","stopScreenSharing","handleLocalVideoOnOff","stopVideo","startVideo","initialSelectedKey","MediaControls","mediaGalleryStyle","borderRight","substageMediaGalleryStyle","mediaGalleryGridStyle","neutralLighterAlt","mediaGallerySubstageStyle","overflowX","videoHint","left","mediaContainer","localVideoContainerStyle","rendererViewRef","activeStreamBeingRendered","setActiveStreamBeingRendered","contain","style","Label","streamId","showRenderLoading","setShowRenderLoading","isParticipantStreamSelected","renderRemoteStream","useCallback","SpinnerSize","xSmall","gridCol","setGridCol","gridRow","setGridRow","rows","cols","warn","numRemoteParticipantsToRender","min","numberStreamsToRender","useMemo","num","max","participantsToLayout","isParticipantADominant","p","isParticipantBDominant","mainStageParticipants","substageParticipants","isSubstageVisible","gridTemplateRows","gridTemplateColumns","remoteParticipantsMediaGalleryItems","RemoteStreamMedia","localParticipantMediaGalleryItem","LocalStreamMedia","unshift","getMediaGalleryTilesForParticipants","hiddenFullScreenStyle","loadingStyle","loading","setLoading","renderStreamCallback","headerStyles","containerStyles","paneStyles","overlayStyles","hiddenContainerClassName","activeContainerClassName","isGroup","activeScreenShare","CommandPanel","Overlay","MediaFullScreen","info","require","loadTheme","initializeIcons","store","createStore","applyMiddleware","thunk","setPage","setCallEndReason","setScreenWidth","setWindowWidth","getGroupIdFromUrl","history","pushState","errorMsg","EndCall","EndScreen","RemovedFromThreadScreen","iconTheme","componentStyles","SvgIcon","svgIconStyles","componentVariables","svgIconVariables","siteVariables","ReactDOM","render","Provider","theme","mergeThemes","teamsTheme","App","module","exports"],"mappings":"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","file":"static/js/main.4a33d489.chunk.js","sourcesContent":["// Project settings\nexport const GUID_FOR_INITIAL_TOPIC_NAME = 'c774da81-94d5-4652-85c7-6ed0e8dc67e6';\n\n// Project configurations\nexport const INITIAL_MESSAGES_SIZE = 2000;\nexport const MAXIMUM_LENGTH_OF_NAME = 20;\nexport const MAXIMUM_LENGTH_OF_MESSAGE = 8000;\nexport const MAXIMUM_LENGTH_OF_TOPIC = 30;\nexport const MAXIMUM_LENGTH_OF_TYPING_USERS = 35;\nexport const MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS = 8000;\nexport const MAXIMUM_INT64 = 9223372036854775807;\nexport const NUMBER_OF_MESSAGES_TO_LOAD = 10;\nexport const PAGE_SIZE = 200;\nexport const PARTICIPANTS_THRESHOLD = 20;\n\n// Keyboard keys\nexport const ENTER_KEY = 13;\nexport const SPACE_KEY = 32;\n\n// Http Status Code\nexport const OK = 200;\n\n// Regex\nexport const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\nexport const EMPTY_MESSAGE_REGEX = /^\\s*$/;\n","import { ChatMessage } from '@azure/communication-chat';\nimport { CommunicationIdentifier, isCommunicationUserIdentifier } from '@azure/communication-common';\nimport preval from 'preval.macro';\nimport { ClientChatMessage } from '../core/reducers/MessagesReducer';\nimport { AudioDeviceInfo, VideoDeviceInfo, RemoteVideoStream } from '@azure/communication-calling';\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\nimport { CommunicationUserToken } from '@azure/communication-identity';\n\nexport const CAT = '🐱';\nexport const MOUSE = '🐭';\nexport const KOALA = '🐨';\nexport const OCTOPUS = '🐙';\nexport const MONKEY = '🐵';\nexport const FOX = '🦊';\n\nexport const getImage = (avatar: string, isSmall: boolean) => {\n  let avatarType: string = '';\n  switch (avatar) {\n    case CAT:\n      avatarType = 'cat';\n      break;\n    case MOUSE:\n      avatarType = 'mouse';\n      break;\n    case KOALA:\n      avatarType = 'koala';\n      break;\n    case OCTOPUS:\n      avatarType = 'octopus';\n      break;\n    case MONKEY:\n      avatarType = 'monkey';\n      break;\n    case FOX:\n      avatarType = 'fox';\n      break;\n  }\n\n  return `${isSmall ? '1' : '2'}x/${avatarType}.png`;\n};\nexport const getBackgroundColor = (avatar: string) => {\n  switch (avatar) {\n    case CAT:\n      return {\n        backgroundColor: 'rgba(255, 250, 228, 1)'\n      };\n    case MOUSE:\n      return {\n        backgroundColor: 'rgba(33, 131, 196, 0.1)'\n      };\n    case KOALA:\n      return {\n        backgroundColor: 'rgba(197, 179, 173, 0.3)'\n      };\n    case OCTOPUS:\n      return {\n        backgroundColor: 'rgba(255, 240, 245, 1)'\n      };\n    case MONKEY:\n      return {\n        backgroundColor: 'rgba(255, 245, 222, 1)'\n      };\n    case FOX:\n      return {\n        backgroundColor: 'rgba(255, 231, 205, 1)'\n      };\n    default:\n      return {\n        backgroundColor: 'rgba(255, 250, 228, 1)'\n      };\n  }\n};\n\nexport const getThreadId = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  console.log(urlParams.get('threadId'));\n  return urlParams.get('threadId');\n};\n\nexport const getBuildTime = () => {\n  const dateTimeStamp = preval`module.exports = new Date().toLocaleString();`;\n  return dateTimeStamp;\n};\n\nexport function getChatSDKVersion() {\n  return require('../../package.json')['dependencies']['@azure/communication-chat'];\n}\n\nexport const compareMessages = (firstMessage: ClientChatMessage, secondMessage: ClientChatMessage) => {\n  if (firstMessage.createdOn === undefined) return 1;\n  if (secondMessage.createdOn === undefined) return -1;\n  const firstDate = new Date(firstMessage.createdOn).getTime();\n  const secondDate = new Date(secondMessage.createdOn).getTime();\n  return firstDate - secondDate;\n};\n\nexport const isUserMatchingIdentity = (user: CommunicationIdentifier, communicationUserId: string): boolean => {\n  return isCommunicationUserIdentifier(user) && user.communicationUserId === communicationUserId;\n};\n\nexport const convertToClientChatMessage = (chatMessage: ChatMessage, clientMessageId?: string): ClientChatMessage => {\n  return {\n    content: { message: chatMessage.content?.message },\n    clientMessageId: clientMessageId,\n    sender: chatMessage.sender,\n    senderDisplayName: chatMessage.senderDisplayName,\n    createdOn: chatMessage.createdOn,\n    id: chatMessage.id\n  };\n};\n\nexport const createNewClientChatMessage = (\n  userId: string,\n  displayName: string,\n  clientMessageId: string,\n  message: string\n): ClientChatMessage => {\n  return {\n    content: { message: message },\n    clientMessageId: clientMessageId,\n    sender: { communicationUserId: userId, kind: 'communicationUser' },\n    senderDisplayName: displayName,\n    createdOn: new Date()\n  };\n};\n\nexport const utils = {\n  getAppServiceUrl: (): string => {\n    return window.location.origin;\n  },\n  getTokenForUser: async (): Promise<CommunicationUserToken> => {\n    const response = await fetch('/token');\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('Invalid token response');\n  },\n  getRefreshedTokenForUser: async (identity: string): Promise<string> => {\n    const response = await fetch(`/refreshToken/${identity}`);\n    if (response.ok) {\n      const content = await response.json();\n      return content.token;\n    }\n    throw new Error('Invalid token response');\n  },\n  isSelectedAudioDeviceInList(selected: AudioDeviceInfo, list: AudioDeviceInfo[]): boolean {\n    return list.filter((item) => item.name === selected.name).length > 0;\n  },\n  isSelectedVideoDeviceInList(selected: VideoDeviceInfo, list: VideoDeviceInfo[]): boolean {\n    return list.filter((item) => item.name === selected.name).length > 0;\n  },\n  isMobileSession(): boolean {\n    return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g)\n      ? true\n      : false;\n  },\n  isSmallScreen(): boolean {\n    return window.innerWidth < 700 || window.innerHeight < 400;\n  },\n  isUnsupportedBrowser(): boolean {\n    return window.navigator.userAgent.match(/(Firefox)/g) ? true : false;\n  },\n  getId: (identifier: CommunicationIdentifierKind): string => {\n    switch (identifier.kind) {\n      case 'communicationUser':\n        return identifier.communicationUserId;\n      case 'phoneNumber':\n        return identifier.phoneNumber;\n      case 'microsoftTeamsUser':\n        return identifier.microsoftTeamsUserId;\n      case 'unknown':\n        return identifier.id;\n    }\n  },\n  getStreamId: (userId: string, stream: RemoteVideoStream): string => {\n    return `${userId}-${stream.id}-${stream.mediaStreamType}`;\n  },\n  /*\n   * TODO:\n   *  Remove this method once the SDK improves error handling for unsupported browser.\n   */\n  isOnIphoneAndNotSafari(): boolean {\n    const userAgent = navigator.userAgent;\n    // Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\n    if (userAgent.includes('iPhone') && (userAgent.includes('FxiOS') || userAgent.includes('CriOS'))) {\n      return true;\n    }\n    return false;\n  },\n  getBuildTime: (): string => {\n    const dateTimeStamp = preval`module.exports = new Date().toLocaleString();`;\n    return dateTimeStamp;\n  }\n};\n","import { mergeStyles } from '@fluentui/react';\nimport { ComponentSlotStyle } from '@fluentui/react-northstar';\n\nimport { getBackgroundColor } from '../../utils/utils';\n\nconst messageAvatarContainerStyle = (avatar: string) =>\n  mergeStyles({\n    width: '2rem',\n    minWidth: '2rem',\n    height: '2rem',\n    backgroundColor: getBackgroundColor(avatar)?.backgroundColor,\n    borderRadius: '50%',\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    fontFamily: 'Segoe UI Regular',\n    fontSize: '1rem' // 16px\n  });\n\nconst chatContainerStyle = mergeStyles({\n  height: '100%',\n  width: '100%',\n  maxHeight: '100%',\n  overflow: 'auto'\n});\n\nconst noReadReceiptStyle = mergeStyles({\n  width: '1rem'\n});\n\nconst chatStyle: ComponentSlotStyle = {\n  backgroundColor: 'white',\n  border: 'none',\n  overflow: 'auto',\n  height: '100%'\n};\n\nconst chatMessageStyle = (mine: boolean): ComponentSlotStyle => ({\n  backgroundColor: mine ? 'rgba(42, 161,255, 0.25)' : 'rgba(243,242,241)',\n  overflowY: 'hidden'\n});\n\nconst readReceiptIconStyle = (mine: boolean) =>\n  mergeStyles({\n    marginLeft: mine ? '1rem' : '0rem'\n  });\n\nconst newMessageButtonStyle = mergeStyles({\n  float: 'right',\n  width: 'fit-content'\n});\n\nconst loadMoreMessageButtonStyle = mergeStyles({\n  minHeight: '1.5rem'\n});\n\nconst DownIconStyle = mergeStyles({\n  marginRight: '0.5em'\n});\n\nexport {\n  messageAvatarContainerStyle,\n  chatMessageStyle,\n  readReceiptIconStyle,\n  chatContainerStyle,\n  noReadReceiptStyle,\n  chatStyle,\n  newMessageButtonStyle,\n  loadMoreMessageButtonStyle,\n  DownIconStyle\n};\n","import { Stack, TooltipHost, PrimaryButton, Icon } from '@fluentui/react';\nimport {\n  Chat,\n  MessageSeenIcon,\n  Flex,\n  Ref,\n  Button,\n  PresenceAvailableIcon,\n  PresenceStrokeIcon,\n  RedbangIcon\n} from '@fluentui/react-northstar';\nimport React, { useEffect, useState, createRef, useRef } from 'react';\nimport { LiveAnnouncer, LiveMessage } from 'react-aria-live';\n\nimport { URL_REGEX, NUMBER_OF_MESSAGES_TO_LOAD } from '../constants';\nimport {\n  chatContainerStyle,\n  messageAvatarContainerStyle,\n  noReadReceiptStyle,\n  chatStyle,\n  chatMessageStyle,\n  newMessageButtonStyle,\n  loadMoreMessageButtonStyle,\n  readReceiptIconStyle,\n  DownIconStyle\n} from './styles/ChatThread.styles';\nimport { User } from '../core/reducers/ContosoClientReducers';\nimport { ClientChatMessage } from '../core/reducers/MessagesReducer';\nimport { isUserMatchingIdentity } from '../utils/utils';\n\ninterface ChatThreadProps {\n  isYourLatestMessage(clientMessageId: string, messages: any[]): boolean;\n  isYourLatestSeenMessage(clientMessageId: string, MessagesWithSeen: any[]): boolean;\n  isLargeParticipantsGroup(): boolean;\n  isMessageSeen(clientMessageId: string, messages: any[]): boolean;\n  sendReadReceipt(messages: any[], userId: string): void;\n  messages: ClientChatMessage[];\n  user: User;\n  users: any;\n  failedMessages: string[];\n}\n\n// Reference: https://stackoverflow.com/questions/33235890/react-replace-links-in-a-text\n\nconst renderHyperlink = (text: string) => {\n  return text.split(' ').map((part) =>\n    URL_REGEX.test(part) ? (\n      <a href={part} target=\"_blank\" rel=\"noopener noreferrer\">\n        {part}{' '}\n      </a>\n    ) : (\n      part + ' '\n    )\n  );\n};\n\nlet createdRef: any = createRef();\nlet chatThreadRef: any = createRef();\n//  A Chatthread will be fed many messages so it will try to map out the messages out of the props and feed them into a\n//  Chat item\n//  We need to be smarter and figure out for the last N messages are they all of the same person or not?\nexport default (props: ChatThreadProps): JSX.Element => {\n  const [messagesWithAttached, setMessagesWithAttached] = useState<any[]>([]);\n  const [indexOfTheFirstMessage, setIndexOfTheFirstMessage] = useState(props.messages.length);\n  const [isAtBottomOfScroll, setIsAtBottomOfScroll] = useState(true);\n  const [isAtTopOfScroll, setIsAtTopOfScroll] = useState(false);\n  const [existsNewMessage, setExistsNewMessage] = useState(false);\n  const [shouldUpdateMessageWithAttached, setShouldUpdateMessageWithAttached] = useState(false);\n  const [numberOfMessagesToRender, setNumberOfMessagesToRender] = useState(0);\n  const existsNewMessageText = 'New Messages';\n  const loadMoreText = 'click to load more messages...';\n  const unableToLoadMoreText = 'You have reached the beginning of the thread';\n\n  const messagesWithAttachedRef = useRef(messagesWithAttached);\n  const setMessagesWithAttachedRef = (messagesWithAttachedValue: any[]) => {\n    messagesWithAttachedRef.current = messagesWithAttachedValue;\n    setMessagesWithAttached(messagesWithAttachedValue);\n  };\n\n  const isAtBottomOfScrollRef = useRef(isAtBottomOfScroll);\n  const setIsAtBottomOfScrollRef = (isAtBottomOfScrollValue: boolean) => {\n    isAtBottomOfScrollRef.current = isAtBottomOfScrollValue;\n    setIsAtBottomOfScroll(isAtBottomOfScrollValue);\n  };\n\n  const numberOfMessagesToRenderRef = useRef(numberOfMessagesToRender);\n  const setNumberOfMessagesToRenderRef = (numberOfMessagesToRenderValue: number) => {\n    numberOfMessagesToRenderRef.current = numberOfMessagesToRenderValue;\n    setNumberOfMessagesToRender(numberOfMessagesToRenderValue);\n  };\n\n  useEffect(() => {\n    setNumberOfMessagesToRenderRef(Math.ceil(chatThreadRef.current.clientHeight / 34)); //34 px is the minimum height of the chat bubble\n  }, [chatThreadRef.current?.clientHeight]);\n\n  useEffect(() => {\n    updateIndexOfTheFirstMessage();\n  }, [numberOfMessagesToRender]);\n\n  useEffect(() => {\n    // get the sender of the most recent message\n    const user =\n      props.messages && props.messages[props.messages.length - 1] && props.messages[props.messages.length - 1].sender;\n    // if you are the person that sent the most recent message\n    if (props.messages.length > 0 && user && isUserMatchingIdentity(user, props.user.identity)) {\n      // after sending a message, scroll to bottom\n      scrollToBottom();\n      updateIndexOfTheFirstMessage();\n    } else if (isAtBottomOfScroll) {\n      updateIndexOfTheFirstMessage();\n    } else {\n      setExistsNewMessage(true);\n    }\n    window.addEventListener('focus', sendReadReceipt);\n    createdRef.current.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('focus', sendReadReceipt);\n      createdRef.current.removeEventListener('scroll', handleScroll);\n    };\n  }, [props.messages]);\n\n  useEffect(() => {\n    if (shouldUpdateMessageWithAttached) {\n      updateMessageWithAttached();\n    }\n    setShouldUpdateMessageWithAttached(false);\n  }, [shouldUpdateMessageWithAttached]);\n\n  // auto scroll to the latest message when we are at bottom of the scroll\n  useEffect(() => {\n    if (isAtBottomOfScroll) {\n      scrollToBottom();\n    }\n  }, [messagesWithAttached]);\n\n  const loadMoreMessages = () => {\n    updateIndexOfTheFirstMessageToLoadMore();\n  };\n\n  const loadNewMessages = () => {\n    scrollToBottom();\n    updateIndexOfTheFirstMessage();\n  };\n\n  const scrollToBottom = () => {\n    createdRef.current.scrollTop = createdRef.current.scrollHeight - createdRef.current.clientHeight;\n    setExistsNewMessage(false);\n  };\n\n  const sendReadReceipt = () => {\n    props.sendReadReceipt(messagesWithAttachedRef.current, props.user.identity);\n  };\n\n  const readReceiptIcon = (message: any) => {\n    // message is pending send or is failed to be sent\n    if (message.failed) {\n      let messageFailed: boolean =\n        props.failedMessages.find((failedMessage: string) => failedMessage === message.clientMessageId) !== undefined;\n      return messageFailed ? (\n        <TooltipHost content=\"failed to send\">\n          <RedbangIcon size=\"medium\" styles={{ color: 'red' }} />{' '}\n        </TooltipHost>\n      ) : (\n        <TooltipHost content=\"sending\">\n          <PresenceStrokeIcon size=\"medium\" />{' '}\n        </TooltipHost>\n      );\n    } else {\n      // show read receipt if it's not a large participant group\n      if (!props.isLargeParticipantsGroup()) {\n        let MessagesWithSeen = messagesWithAttached.map((messageWithAttached) => {\n          let isSeen = props.isMessageSeen(messageWithAttached.clientMessageId, messagesWithAttached);\n          return { ...messageWithAttached, isSeen };\n        });\n        if (props.isYourLatestSeenMessage(message.clientMessageId, MessagesWithSeen)) {\n          return (\n            <TooltipHost content=\"seen\">\n              <MessageSeenIcon size=\"medium\" />\n            </TooltipHost>\n          );\n        }\n      }\n      if (props.isYourLatestMessage(message.id, messagesWithAttached)) {\n        return (\n          <TooltipHost content=\"sent\">\n            <PresenceAvailableIcon size=\"medium\" />\n          </TooltipHost>\n        );\n      } else {\n        return <div className={noReadReceiptStyle}></div>;\n      }\n    }\n  };\n\n  const handleScroll = () => {\n    let atBottom = createdRef.current.scrollTop >= createdRef.current.scrollHeight - createdRef.current.clientHeight;\n    let atTop = createdRef.current.scrollTop === 0;\n    if (atBottom && !isAtBottomOfScrollRef.current) {\n      loadNewMessages();\n    }\n    setIsAtBottomOfScrollRef(atBottom);\n    setIsAtTopOfScroll(atTop);\n  };\n\n  const updateIndexOfTheFirstMessageToLoadMore = () => {\n    setIndexOfTheFirstMessage(\n      indexOfTheFirstMessage > NUMBER_OF_MESSAGES_TO_LOAD ? indexOfTheFirstMessage - NUMBER_OF_MESSAGES_TO_LOAD : 0\n    );\n    setShouldUpdateMessageWithAttached(true);\n  };\n\n  const updateIndexOfTheFirstMessage = () => {\n    setIndexOfTheFirstMessage(\n      props.messages.length > numberOfMessagesToRenderRef.current\n        ? props.messages.length - numberOfMessagesToRenderRef.current\n        : 0\n    );\n    setShouldUpdateMessageWithAttached(true);\n  };\n\n  const updateMessageWithAttached = () => {\n    let newMessagesWithAttached: any[] = [];\n    let messagesToRender = props.messages.slice(indexOfTheFirstMessage, props.messages.length);\n    messagesToRender.map((message: any, index: number, messagesList: any) => {\n      let mine = message.sender.communicationUserId === props.user.identity;\n      let attached: string | boolean = false;\n      if (index === 0) {\n        if (index !== messagesList.length - 1) {\n          //the next message has the same sender\n          if (messagesList[index].sender.communicationUserId === messagesList[index + 1].sender.communicationUserId) {\n            attached = 'top';\n          }\n        }\n      } else {\n        if (messagesList[index].sender.communicationUserId === messagesList[index - 1].sender.communicationUserId) {\n          //the previous message has the same sender\n          if (index !== messagesList.length - 1) {\n            if (messagesList[index].sender.communicationUserId === messagesList[index + 1].sender.communicationUserId) {\n              //the next message has the same sender\n              attached = true;\n            } else {\n              //the next message has a different sender\n              attached = 'bottom';\n            }\n          } else {\n            // this is the last message of the whole messages list\n            attached = 'bottom';\n          }\n        } else {\n          //the previous message has a different sender\n          if (index !== messagesList.length - 1) {\n            if (messagesList[index].sender.communicationUserId === messagesList[index + 1].sender.communicationUserId) {\n              //the next message has the same sender\n              attached = 'top';\n            }\n          }\n        }\n      }\n      let messageWithAttached = { ...message, attached, mine };\n      newMessagesWithAttached.push(messageWithAttached);\n    });\n    setMessagesWithAttachedRef(newMessagesWithAttached);\n  };\n\n  return (\n    <Ref innerRef={chatThreadRef}>\n      <Stack className={chatContainerStyle}>\n        {isAtTopOfScroll && (\n          <Button\n            text\n            fluid\n            className={loadMoreMessageButtonStyle}\n            content={indexOfTheFirstMessage === 0 ? unableToLoadMoreText : loadMoreText}\n            disabled={indexOfTheFirstMessage === 0}\n            onClick={loadMoreMessages}\n          />\n        )}\n        <Ref innerRef={createdRef}>\n          <LiveAnnouncer>\n            <Chat\n              styles={chatStyle}\n              items={messagesWithAttached.map((message: any, index: number) => {\n                const liveAuthor = `${message.senderDisplayName} says `;\n                const messageContentItem = (\n                  <div>\n                    <LiveMessage message={`${message.mine ? '' : liveAuthor} ${message.content}`} aria-live=\"polite\" />\n                    {renderHyperlink(message.content.message)}\n                  </div>\n                );\n                return {\n                  gutter: message.mine ? (\n                    ''\n                  ) : (\n                    <div\n                      className={messageAvatarContainerStyle(\n                        props.users[message.sender.communicationUserId] === undefined\n                          ? ''\n                          : props.users[message.sender.communicationUserId].emoji\n                      )}\n                    >\n                      {props.users[message.sender.communicationUserId] === undefined\n                        ? ''\n                        : props.users[message.sender.communicationUserId].emoji}\n                    </div>\n                  ),\n                  key: index,\n                  contentPosition: message.mine ? 'end' : 'start',\n                  message: (\n                    <Flex vAlign=\"end\">\n                      <Chat.Message\n                        styles={chatMessageStyle(message.mine)}\n                        content={messageContentItem}\n                        author={message.senderDisplayName}\n                        mine={message.mine}\n                      />\n                      <div className={readReceiptIconStyle(message.mine)}>{readReceiptIcon(message)}</div>\n                    </Flex>\n                  ),\n                  attached: message.attached\n                };\n              })}\n            />\n          </LiveAnnouncer>\n        </Ref>\n        {existsNewMessage && (\n          <div>\n            <PrimaryButton className={newMessageButtonStyle} onClick={loadNewMessages}>\n              <Icon iconName=\"Down\" className={DownIconStyle} />\n              {existsNewMessageText}\n            </PrimaryButton>\n          </div>\n        )}\n      </Stack>\n    </Ref>\n  );\n};\n","import { ChatClient } from '@azure/communication-chat';\n\nexport const SET_CHAT_CLIENT = 'SET_CHAT_CLIENT';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SET_USERS = 'SET_USERS';\n\nexport type UserConfiguration = {\n  emoji: string;\n};\n\nexport type Users = Record<string, UserConfiguration>;\n\nexport interface SetChatClientAction {\n  type: typeof SET_CHAT_CLIENT;\n  chatClient: ChatClient | undefined;\n}\n\nexport interface SetContosoUserAction {\n  type: typeof SET_CURRENT_USER;\n  identity: string;\n  token: string;\n  displayName: string;\n  memberRole?: string;\n}\n\nexport interface SetContosoUsersAction {\n  type: typeof SET_USERS;\n  users: Users;\n}\n\nexport const setChatClient = (chatClient: ChatClient | undefined): SetChatClientAction => ({\n  type: SET_CHAT_CLIENT,\n  chatClient\n});\n\nexport const setContosoUser = (identity: string, token: string, displayName: string): SetContosoUserAction => ({\n  type: SET_CURRENT_USER,\n  identity,\n  token,\n  displayName\n});\n\nexport const setContosoUsers = (users: Users): SetContosoUsersAction => ({\n  type: SET_USERS,\n  users\n});\n\nexport type ContosoActionTypes = SetChatClientAction | SetContosoUserAction | SetContosoUsersAction;\n","import { ChatMessageReadReceipt } from '@azure/communication-chat';\n\nexport const SET_RECEIPTS = 'SET_RECEIPTS';\n\nexport interface SetReceiptsAction {\n  type: typeof SET_RECEIPTS;\n  receipts: ChatMessageReadReceipt[];\n}\n\nexport const setReceipts = (receipts: ChatMessageReadReceipt[]): SetReceiptsAction => ({\n  type: SET_RECEIPTS,\n  receipts\n});\n\nexport type ConversationsActionTypes = SetReceiptsAction;\n","import { ChatParticipant } from '@azure/communication-chat';\nimport { ClientChatMessage } from '../reducers/MessagesReducer';\n\nexport const SET_MESSAGES = 'SET_MESSAGES';\nexport const SET_TYPING_NOTIFICATIONS = 'SET_TYPING_NOTIFICATIONS';\nexport const SET_TYPING_USERS = 'SET_TYPING_USERS';\nexport const SET_FAILED_MESSAGES = 'SET_FAILED_MESSAGES';\n\nexport interface SetMessagesAction {\n  type: typeof SET_MESSAGES;\n  messages: ClientChatMessage[];\n}\n\nexport type TypingNotification = {\n  recipientId: string; // the user that is sending a message\n  originalArrivalTime: Date; // when the message was last sent\n  threadId: string;\n  version: string;\n};\n\nexport interface SetTypingNotificationsAction {\n  type: typeof SET_TYPING_NOTIFICATIONS;\n  id: string;\n  typingNotification: TypingNotification;\n}\n\nexport interface SetTypingUsersAction {\n  type: typeof SET_TYPING_USERS;\n  typingUsers: ChatParticipant[];\n}\n\nexport interface SetFailedMessagesAction {\n  type: typeof SET_FAILED_MESSAGES;\n  failedMessages: string[];\n}\n\nexport const setMessages = (messages: ClientChatMessage[]): SetMessagesAction => ({\n  type: SET_MESSAGES,\n  messages\n});\n\nexport const setTypingNotifications = (\n  id: string,\n  typingNotification: TypingNotification\n): SetTypingNotificationsAction => ({\n  type: SET_TYPING_NOTIFICATIONS,\n  id,\n  typingNotification\n});\n\nexport const setTypingUsers = (typingUsers: ChatParticipant[]): SetTypingUsersAction => ({\n  type: SET_TYPING_USERS,\n  typingUsers\n});\n\nexport const setFailedMessages = (failedMessages: string[]): SetFailedMessagesAction => ({\n  type: SET_FAILED_MESSAGES,\n  failedMessages\n});\n\nexport type MessagesActionTypes =\n  | SetMessagesAction\n  | SetTypingNotificationsAction\n  | SetTypingUsersAction\n  | SetFailedMessagesAction;\n","export const SET_THREAD_TOPIC_NAME = 'SET_THREAD_TOPIC_NAME';\nexport const SET_THREAD_ID = 'SET_THREAD_ID';\n\nexport interface SetThreadTopicNameAction {\n  type: typeof SET_THREAD_TOPIC_NAME;\n  topicName: string;\n}\n\nexport interface SetThreadIdAction {\n  type: typeof SET_THREAD_ID;\n  threadId: string;\n}\n\nexport const setThreadTopicName = (topicName: string): SetThreadTopicNameAction => ({\n  type: SET_THREAD_TOPIC_NAME,\n  topicName\n});\n\nexport const setThreadId = (threadId: string): SetThreadIdAction => ({\n  type: SET_THREAD_ID,\n  threadId\n});\n\nexport type ThreadActionTypes = SetThreadTopicNameAction | SetThreadIdAction;\n","import { ChatParticipant } from '@azure/communication-chat';\n\nexport const SET_THREAD_MEMBERS = 'SET_THREAD_MEMBERS';\nexport const SET_THREAD_MEMBERS_ERROR = 'SET_THREAD_MEMBERS_ERROR';\nexport const SET_REMOVE_THREAD_MEMBER_ERROR = 'SET_REMOVE_THREAD_MEMBER_ERROR';\nexport const SET_ADD_THREAD_MEMBER_ERROR = 'SET_ADD_THREAD_MEMBER_ERROR';\nexport const SET_REMOVED_FROM_THREAD = 'SET_REMOVED_FROM_THREAD';\n\nexport interface SetThreadMembersAction {\n  type: typeof SET_THREAD_MEMBERS;\n  threadMembers: ChatParticipant[];\n}\n\nexport interface SetThreadMembersErrorAction {\n  type: typeof SET_THREAD_MEMBERS_ERROR;\n  error?: boolean;\n}\n\nexport interface SetRemovedFromThreadAction {\n  type: typeof SET_REMOVED_FROM_THREAD;\n  isRemoved: boolean;\n}\n\nexport const setThreadMembers = (threadMembers: ChatParticipant[]): SetThreadMembersAction => ({\n  type: SET_THREAD_MEMBERS,\n  threadMembers\n});\n\nexport const setThreadMembersError = (error: boolean): SetThreadMembersErrorAction => ({\n  type: SET_THREAD_MEMBERS_ERROR,\n  error\n});\n\nexport const setRemovedFromThread = (isRemoved: boolean): SetRemovedFromThreadAction => ({\n  type: SET_REMOVED_FROM_THREAD,\n  isRemoved\n});\n\nexport type ThreadMembersActionTypes =\n  | SetThreadMembersAction\n  | SetThreadMembersErrorAction\n  | SetRemovedFromThreadAction;\n","import { CallEndReason, Call, RemoteParticipant, CallAgent } from '@azure/communication-calling';\nimport { SelectionState } from '../RemoteStreamSelector';\n\nconst SET_CALL_AGENT = 'SET_CALL_AGENT';\nconst SET_GROUP = 'SET_GROUP';\nconst CALL_ADDED = 'CALL_ADDED';\nconst CALL_REMOVED = 'CALL_REMOVED';\nconst SET_CALL_STATE = 'SET_CALL_STATE';\nconst SET_PARTICIPANTS = 'SET_PARTICIPANTS';\nconst SET_DOMINANT_PARTICIPANTS = 'SET_DOMINANT_PARTICIPANTS';\n\ninterface SetCallAgentAction {\n  type: typeof SET_CALL_AGENT;\n  callAgent: CallAgent;\n}\n\ninterface SetGroupAction {\n  type: typeof SET_GROUP;\n  group: string;\n}\n\ninterface CallAddedAction {\n  type: typeof CALL_ADDED;\n  call: Call;\n}\n\ninterface CallRemovedAction {\n  type: typeof CALL_REMOVED;\n  call: Call | undefined;\n  incomingCallEndReason: CallEndReason | undefined;\n  groupCallEndReason: CallEndReason | undefined;\n}\n\ninterface SetCallStateAction {\n  type: typeof SET_CALL_STATE;\n  callState: string;\n}\n\ninterface SetParticipantsAction {\n  type: typeof SET_PARTICIPANTS;\n  remoteParticipants: RemoteParticipant[];\n}\n\ninterface SetDominantParticipantsAction {\n  type: typeof SET_DOMINANT_PARTICIPANTS;\n  dominantParticipants: SelectionState[];\n}\n\nexport const setCallAgent = (callAgent: CallAgent): SetCallAgentAction => {\n  return {\n    type: SET_CALL_AGENT,\n    callAgent\n  };\n};\n\nexport const setGroup = (groupId: string): SetGroupAction => {\n  return {\n    type: SET_GROUP,\n    group: groupId\n  };\n};\n\nexport const callAdded = (addedCall: Call): CallAddedAction => {\n  return {\n    type: CALL_ADDED,\n    call: addedCall\n  };\n};\n\nexport const callRemoved = (removedCall: Call, group: string): CallRemovedAction => {\n  return {\n    type: CALL_REMOVED,\n    call: undefined,\n    incomingCallEndReason: removedCall.direction === 'Incoming' ? removedCall.callEndReason : undefined,\n    groupCallEndReason: removedCall.direction !== 'Incoming' && !!group ? removedCall.callEndReason : undefined\n  };\n};\n\nexport const setCallState = (callState: string): SetCallStateAction => {\n  return {\n    type: SET_CALL_STATE,\n    callState\n  };\n};\n\nexport const setParticipants = (participants: RemoteParticipant[]): SetParticipantsAction => {\n  return {\n    type: SET_PARTICIPANTS,\n    remoteParticipants: participants\n  };\n};\n\nexport const setDominantParticipants = (selected: SelectionState[]): SetDominantParticipantsAction => {\n  return {\n    type: SET_DOMINANT_PARTICIPANTS,\n    dominantParticipants: selected\n  };\n};\n\nexport {\n  SET_CALL_AGENT,\n  SET_GROUP,\n  CALL_ADDED,\n  CALL_REMOVED,\n  SET_CALL_STATE,\n  SET_DOMINANT_PARTICIPANTS,\n  SET_PARTICIPANTS\n};\n\nexport type CallTypes =\n  | SetCallAgentAction\n  | SetParticipantsAction\n  | SetDominantParticipantsAction\n  | SetCallStateAction\n  | SetGroupAction\n  | CallAddedAction\n  | CallRemovedAction;\n","const SET_MIC = 'SET_MIC';\nconst SET_SHARE_SCREEN = 'SET_SHARE_SCREEN';\n\ninterface SetMicAction {\n  type: typeof SET_MIC;\n  mic: boolean;\n}\n\ninterface SetShareScreenAction {\n  type: typeof SET_SHARE_SCREEN;\n  shareScreen: boolean;\n}\n\nexport const setMic = (mic: boolean): SetMicAction => {\n  return {\n    type: SET_MIC,\n    mic\n  };\n};\n\nexport const setShareScreen = (shareScreen: boolean): SetShareScreenAction => {\n  return {\n    type: SET_SHARE_SCREEN,\n    shareScreen\n  };\n};\n\nexport { SET_MIC, SET_SHARE_SCREEN };\n\nexport type ControlTypes = SetMicAction | SetShareScreenAction;\n","import { AudioDeviceInfo, VideoDeviceInfo, DeviceManager } from '@azure/communication-calling';\n\nconst SET_DEVICE_MANAGER = 'SET_DEVICE_MANAGER';\nconst SET_AUDIO_DEVICE_INFO = 'SET_AUDIO_DEVICE_INFO';\nconst SET_VIDEO_DEVICE_INFO = 'SET_VIDEO_DEVICE_INFO';\nconst SET_AUDIO_DEVICE_LIST = 'SET_AUDIO_DEVICE_LIST';\nconst SET_VIDEO_DEVICE_LIST = 'SET_VIDEO_DEVICE_LIST';\nconst SET_MICROPHONE_PERMISSION = 'SET_MICROPHONE_PERMISSION';\nconst SET_CAMERA_PERMISSION = 'SET_CAMERA_PERMISSION';\n\ninterface SetDeviceManagerAction {\n  type: typeof SET_DEVICE_MANAGER;\n  deviceManager: DeviceManager;\n}\n\ninterface SetMicrophonePermission {\n  type: typeof SET_MICROPHONE_PERMISSION;\n  microphonePermission: string;\n}\n\ninterface SetCameraPermission {\n  type: typeof SET_CAMERA_PERMISSION;\n  cameraPermission: string;\n}\n\ninterface SetAudioDeviceAction {\n  type: typeof SET_AUDIO_DEVICE_INFO;\n  audioDeviceInfo: AudioDeviceInfo | undefined;\n}\n\ninterface SetVideoDeviceAction {\n  type: typeof SET_VIDEO_DEVICE_INFO;\n  videoDeviceInfo: VideoDeviceInfo | undefined;\n}\n\ninterface SetAudioDeviceListAction {\n  type: typeof SET_AUDIO_DEVICE_LIST;\n  audioDeviceList: AudioDeviceInfo[];\n}\n\ninterface SetVideoDeviceListAction {\n  type: typeof SET_VIDEO_DEVICE_LIST;\n  videoDeviceList: VideoDeviceInfo[];\n}\n\nexport const setDeviceManager = (deviceManager: DeviceManager): SetDeviceManagerAction => {\n  return {\n    type: SET_DEVICE_MANAGER,\n    deviceManager\n  };\n};\n\nexport const setMicrophonePermission = (microphonePermission: string): SetMicrophonePermission => {\n  return {\n    type: SET_MICROPHONE_PERMISSION,\n    microphonePermission\n  };\n};\n\nexport const setCameraPermission = (cameraPermission: string): SetCameraPermission => {\n  return {\n    type: SET_CAMERA_PERMISSION,\n    cameraPermission\n  };\n};\n\nexport const setAudioDeviceInfo = (audioDeviceInfo: AudioDeviceInfo | undefined): SetAudioDeviceAction => {\n  return {\n    type: SET_AUDIO_DEVICE_INFO,\n    audioDeviceInfo\n  };\n};\n\nexport const setVideoDeviceInfo = (videoDeviceInfo: VideoDeviceInfo | undefined): SetVideoDeviceAction => {\n  return {\n    type: SET_VIDEO_DEVICE_INFO,\n    videoDeviceInfo\n  };\n};\n\nexport const setAudioDeviceList = (audioDeviceList: AudioDeviceInfo[]): SetAudioDeviceListAction => {\n  return {\n    type: SET_AUDIO_DEVICE_LIST,\n    audioDeviceList\n  };\n};\n\nexport const setVideoDeviceList = (videoDeviceList: VideoDeviceInfo[]): SetVideoDeviceListAction => {\n  return {\n    type: SET_VIDEO_DEVICE_LIST,\n    videoDeviceList\n  };\n};\nexport {\n  SET_DEVICE_MANAGER,\n  SET_AUDIO_DEVICE_INFO,\n  SET_VIDEO_DEVICE_INFO,\n  SET_VIDEO_DEVICE_LIST,\n  SET_AUDIO_DEVICE_LIST,\n  SET_CAMERA_PERMISSION,\n  SET_MICROPHONE_PERMISSION\n};\n\nexport type DeviceTypes =\n  | SetDeviceManagerAction\n  | SetAudioDeviceAction\n  | SetVideoDeviceAction\n  | SetMicrophonePermission\n  | SetCameraPermission\n  | SetAudioDeviceListAction\n  | SetVideoDeviceListAction;\n","import { RemoteParticipant, RemoteVideoStream } from '@azure/communication-calling';\n\nconst ADD_SCREENSHARE_STREAM = 'ADD_SCREENSHARE_STREAM';\nconst REMOVE_SCREENSHARE_STREAM = 'REMOVE_SCREENSHARE_STREAM';\n\ninterface AddScreenShareStreamAction {\n  type: typeof ADD_SCREENSHARE_STREAM;\n  stream: RemoteVideoStream;\n  user: RemoteParticipant;\n}\n\ninterface RemoveScreenShareStreamAction {\n  type: typeof REMOVE_SCREENSHARE_STREAM;\n  stream: RemoteVideoStream;\n  user: RemoteParticipant;\n}\n\nexport const addScreenShareStream = (\n  stream: RemoteVideoStream,\n  user: RemoteParticipant\n): AddScreenShareStreamAction => {\n  return {\n    type: ADD_SCREENSHARE_STREAM,\n    stream,\n    user\n  };\n};\n\nexport const removeScreenShareStream = (\n  stream: RemoteVideoStream,\n  user: RemoteParticipant\n): RemoveScreenShareStreamAction => {\n  return {\n    type: REMOVE_SCREENSHARE_STREAM,\n    stream,\n    user\n  };\n};\n\nexport { ADD_SCREENSHARE_STREAM, REMOVE_SCREENSHARE_STREAM };\n\nexport type StreamTypes = AddScreenShareStreamAction | RemoveScreenShareStreamAction;\n","import { setDominantParticipants } from './actions/calls';\nimport { Dispatch } from 'redux';\nimport { RemoteParticipantState } from '@azure/communication-calling';\n\ninterface Event {\n  participantId: string;\n  timeStamp: number;\n  process: Function;\n}\n\nclass AudioChangedEvent implements Event {\n  participantId: string;\n  timeStamp: number;\n  isUnMuted = false;\n\n  constructor(participantId: string, isUnMuted: boolean) {\n    this.participantId = participantId;\n    this.isUnMuted = isUnMuted;\n    this.timeStamp = Date.now();\n  }\n\n  process(participant: SelectionState): void {\n    if (this.isUnMuted && !participant.isUnMuted) {\n      participant.lastUnMuted = this.timeStamp;\n    }\n    participant.isUnMuted = this.isUnMuted;\n  }\n}\n\nclass VideoChangedEvent implements Event {\n  participantId: string;\n  timeStamp: number;\n  isVideoOn = false;\n\n  constructor(participantId: string, isVideoOn: boolean) {\n    this.participantId = participantId;\n    this.isVideoOn = isVideoOn;\n    this.timeStamp = Date.now();\n  }\n\n  process(participant: SelectionState): void {\n    participant.isVideoOn = this.isVideoOn;\n  }\n}\n\nexport class SelectionState {\n  isVideoOn: boolean;\n  isUnMuted: boolean;\n  lastUnMuted: number;\n  participantId: string;\n  displayName: string;\n\n  constructor(participantId: string, displayName: string, isUnMuted = false, isVideoOn = false) {\n    this.participantId = participantId;\n    this.displayName = displayName;\n    this.isUnMuted = isUnMuted;\n    this.isVideoOn = isVideoOn;\n    this.lastUnMuted = -1;\n  }\n}\n\nexport default class RemoteStreamSelector {\n  private readonly dominantParticipantsCount: number;\n  private readonly dipatch: Dispatch;\n  private batchedCommands: Event[];\n  private remoteParticipants: Map<string, SelectionState>;\n  private static ProcessingDelayInSeconds = 2000;\n  private static Singleton: RemoteStreamSelector;\n\n  constructor(dominantParticipantsCount: number, dispatch: Dispatch) {\n    this.dominantParticipantsCount = dominantParticipantsCount;\n    this.dipatch = dispatch;\n    this.batchedCommands = [];\n    this.remoteParticipants = new Map();\n\n    setInterval(\n      () => this.batchedCommands.length > 0 && this.processCommands(),\n      RemoteStreamSelector.ProcessingDelayInSeconds\n    );\n  }\n\n  private compareFn = (a: SelectionState, b: SelectionState): number => {\n    if (a.isVideoOn === b.isVideoOn) {\n      if (a.isUnMuted === b.isUnMuted) return b.lastUnMuted - a.lastUnMuted;\n      return a.isUnMuted ? -1 : 1;\n    }\n    return a.isVideoOn ? -1 : 1;\n  };\n\n  public processCommands = (commands = this.batchedCommands): void => {\n    commands.forEach((command) => {\n      const participant = this.remoteParticipants.get(command.participantId);\n      if (!participant) {\n        console.error(`RemoteStreamSelector: Participant ${command.participantId} not found`);\n        return;\n      }\n      command.process(participant);\n    });\n    this.batchedCommands = [];\n\n    const sortedList = [...this.remoteParticipants.values()].sort(this.compareFn);\n    console.log('RemoteStreamSelector: Participants sorted list', sortedList);\n\n    this.dipatch(setDominantParticipants(sortedList.slice(0, this.dominantParticipantsCount)));\n  };\n\n  public participantAudioChanged = (participantId: string, isUnmuted: boolean): void => {\n    this.batchedCommands.push(new AudioChangedEvent(participantId, isUnmuted));\n  };\n\n  public participantVideoChanged = (participantId: string, isVideoOn: boolean): void => {\n    this.batchedCommands.push(new VideoChangedEvent(participantId, isVideoOn));\n  };\n\n  public participantStateChanged = (\n    participantId: string,\n    displayName: string,\n    state: RemoteParticipantState,\n    isUnMuted: boolean,\n    isVideoOn: boolean\n  ): void => {\n    switch (state) {\n      case 'Connecting':\n        this.remoteParticipants.set(\n          participantId,\n          new SelectionState(participantId, displayName, isUnMuted, isVideoOn)\n        );\n        break;\n      case 'Connected':\n        this.remoteParticipants.set(\n          participantId,\n          new SelectionState(participantId, displayName, isUnMuted, isVideoOn)\n        );\n        this.participantAudioChanged(participantId, isUnMuted);\n        this.participantVideoChanged(participantId, isVideoOn);\n        break;\n      case 'Disconnected':\n        this.remoteParticipants.delete(participantId);\n        this.processCommands(); // Force update Redux list with removed participant.\n        break;\n    }\n  };\n\n  public static getInstance = (dominantParticipantsCount: number, dispatch: Dispatch): RemoteStreamSelector =>\n    (RemoteStreamSelector.Singleton =\n      RemoteStreamSelector.Singleton ?? new RemoteStreamSelector(dominantParticipantsCount, dispatch));\n}\n","export class Constants {\n    static INCOMING = 'Incoming';\n    static RINGING = 'Ringing';\n    static CONNECTING = 'Connecting';\n    static CONNECTED = 'Connected';\n    static DEFAULT_IMG_WIDTH = 200;\n    static CROP_MEDIA = 'Crop';\n    static CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID = 'ConfigurationLocalVideoPreview';\n    static LOCAL_VIDEO_PREVIEW_ID = 'LocalVideoPreview';\n    static MINI_HEADER_WINDOW_WIDTH = 360;\n    static DOMINANT_PARTICIPANTS_COUNT = 1; // The media gallery is design to work between 1 and 8 dominant participants inclusive\n  }\n","import { CallClient } from '@azure/communication-calling';\n\nconst SET_USERID = 'SET_USERID';\nconst SET_CALL_CLIENT = 'SET_CALL_CLIENT';\nconst SET_DISPLAY_NAME = 'SET_DISPLAY_NAME';\n\ninterface SetUserIdAction {\n  type: typeof SET_USERID;\n  userId: string;\n}\n\ninterface SetCallClient {\n  type: typeof SET_CALL_CLIENT;\n  callClient: CallClient;\n}\n\ninterface SetDisplayNameAction {\n  type: typeof SET_DISPLAY_NAME;\n  displayName: string;\n}\n\nexport const setUserId = (userId: string): SetUserIdAction => {\n  return {\n    type: SET_USERID,\n    userId\n  };\n};\n\nexport const setCallClient = (callClient: CallClient): SetCallClient => {\n  return {\n    type: SET_CALL_CLIENT,\n    callClient\n  };\n};\n\nexport const setDisplayName = (displayName: string): SetDisplayNameAction => {\n  return {\n    type: SET_DISPLAY_NAME,\n    displayName\n  };\n};\n\nexport { SET_USERID, SET_CALL_CLIENT, SET_DISPLAY_NAME };\n\nexport type SdkTypes = SetUserIdAction | SetCallClient | SetDisplayNameAction;\n","import { Stack, TextField, PrimaryButton, Icon, StackItem } from '@fluentui/react';\nimport React, { useEffect, useState, Dispatch } from 'react';\nimport { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';\n\nimport { ENTER_KEY, GUID_FOR_INITIAL_TOPIC_NAME, MAXIMUM_LENGTH_OF_TOPIC } from '../../src/constants';\nimport InviteFooter from './InviteFooter';\nimport MemberItem from './MemberItem';\nimport { inputBoxTextStyle } from './styles/ConfigurationScreen.styles';\nimport {\n  memberListStyle,\n  settingsListStyle,\n  saveChatNameButtonStyle,\n  sidePanelContainerStyle,\n  textFieldIconStyle,\n  titleStyle,\n  topicWarningStyle,\n  emptyWarningStyle,\n  saveButtonTextStyle,\n  groupNameStyle,\n  groupNameInputBoxStyle,\n  groupNameInputBoxWarningStyle\n} from './styles/SidePanel.styles';\nimport { SidePanelDispatchProps, SidePanelProps } from '../containers/SidePanel';\nimport { CommunicationUserIdentifier } from '@azure/communication-common';\n\nexport enum SidePanelTypes {\n  None = 'none',\n  People = 'People',\n  Settings = 'Settings'\n}\n\ntype ChatSidePaneProps = {\n  selectedPane: SidePanelTypes;\n  setSelectedPane: Dispatch<SidePanelTypes>;\n};\n\nexport default (props: SidePanelProps & SidePanelDispatchProps & ChatSidePaneProps): JSX.Element => {\n  const [topicName, setTopicName] = useState('');\n  const [isEditingTopicName, setIsEditingTopicName] = useState(false);\n  const [isTopicNameOverflow, setTopicNameOverflow] = useState(false);\n  const [isSavingTopicName, setIsSavingTopicName] = useState(false);\n\n  const { chatClient, threadId } = props;\n\n  const onTopicNameTextChange = (event: any) => {\n    setIsEditingTopicName(true);\n    setTopicName(event.target.value);\n    if (event.target.value.length > MAXIMUM_LENGTH_OF_TOPIC) {\n      setTopicNameOverflow(true);\n    } else {\n      setTopicNameOverflow(false);\n    }\n  };\n\n  const onTopicNameSubmit = () => {\n    if (topicName.length > MAXIMUM_LENGTH_OF_TOPIC) return;\n    if (!chatClient) return;\n    if (!threadId) return;\n    props.updateThreadTopicName(chatClient, threadId, topicName, setIsSavingTopicName);\n    setIsSavingTopicName(true);\n    setIsEditingTopicName(false);\n    setTimeout(() => {\n      document.getElementById('focusButton')?.focus();\n    }, 100);\n  };\n\n  return (\n    <>\n      <Stack\n        verticalAlign=\"space-between\"\n        className={sidePanelContainerStyle(props.selectedPane === SidePanelTypes.People)}\n      >\n        {/* Title */}\n        <span className={titleStyle}>People</span>\n        {/* Member list */}\n        <StackItem className={memberListStyle}>\n          <FocusZone direction={FocusZoneDirection.vertical}>\n            {props.chatParticipants.map((person) => {\n              const id = (person.id as CommunicationUserIdentifier).communicationUserId;\n              return (\n                <MemberItem\n                  key={id}\n                  userId={id}\n                  avatar={props.users[id] === undefined ? '' : props.users[id].emoji}\n                  name={person.displayName as string}\n                  isYou={id === (props.identity as string)}\n                  removeThreadMemberByUserId={props.removeChatParticipantById}\n                />\n              );\n            })}\n          </FocusZone>\n        </StackItem>\n        {/* Invite link footer */}\n        <InviteFooter />\n      </Stack>\n      <Stack\n        verticalAlign=\"space-between\"\n        className={sidePanelContainerStyle(props.selectedPane === SidePanelTypes.Settings)}\n      >\n        {/* Title */}\n        <div className={titleStyle}>Settings</div>\n        <div className={settingsListStyle}>\n          {/* Change Chat Name */}\n          <div className={groupNameStyle}>Group Name</div>\n          <TextField\n            className={isTopicNameOverflow ? groupNameInputBoxWarningStyle : groupNameInputBoxStyle}\n            inputClassName={inputBoxTextStyle}\n            borderless={true}\n            defaultValue={props.topic === GUID_FOR_INITIAL_TOPIC_NAME ? '' : props.topic}\n            placeholder={props.existsTopicName ? undefined : 'Type a group name'}\n            autoComplete=\"off\"\n            onSubmit={onTopicNameSubmit}\n            onChange={onTopicNameTextChange}\n            onKeyUp={(ev) => {\n              if (ev.which === ENTER_KEY) {\n                onTopicNameSubmit();\n              }\n            }}\n          />\n          {(isTopicNameOverflow && <div className={topicWarningStyle}> Topic cannot be over 30 characters </div>) ||\n            (!isTopicNameOverflow && <div className={emptyWarningStyle} />)}\n          <PrimaryButton\n            id=\"editThreadTopicButton\"\n            className={saveChatNameButtonStyle}\n            onClick={(e: any) => onTopicNameSubmit()}\n            disabled={isSavingTopicName}\n          >\n            <Icon iconName=\"Save\" className={textFieldIconStyle} />\n            <div className={saveButtonTextStyle}>{isSavingTopicName ? 'Saving...' : 'Save'}</div>\n          </PrimaryButton>\n        </div>\n      </Stack>\n    </>\n  );\n};\n","import { Dispatch } from 'redux';\nimport React from 'react';\n\nimport {\n  MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS,\n  MAXIMUM_INT64,\n  PAGE_SIZE,\n  INITIAL_MESSAGES_SIZE,\n} from '../constants';\nimport { setChatClient, setContosoUser, setContosoUsers } from './actions/ContosoClientAction';\nimport { setReceipts } from './actions/ConversationsAction';\nimport { setMessages, setTypingNotifications, setTypingUsers, setFailedMessages } from './actions/MessagesAction';\nimport { setThreadId, setThreadTopicName } from './actions/ThreadAction';\nimport { setThreadMembers, setThreadMembersError, setRemovedFromThread } from './actions/ThreadMembersAction';\nimport { User } from './reducers/ContosoClientReducers';\nimport { State } from './reducers/index';\nimport { ClientChatMessage } from './reducers/MessagesReducer';\nimport {\n  compareMessages,\n  convertToClientChatMessage,\n  createNewClientChatMessage,\n  isUserMatchingIdentity,\n  utils,\n} from '../utils/utils';\n\nimport {\n  ChatClient,\n  ChatThreadClient,\n  SendReadReceiptRequest,\n  ChatMessageReadReceipt,\n  ChatMessage,\n  ChatParticipant\n} from '@azure/communication-chat';\nimport {\n  AzureCommunicationTokenCredential,\n  CommunicationTokenRefreshOptions,\n  CommunicationUserIdentifier\n} from '@azure/communication-common';\nimport {\n  ChatThreadPropertiesUpdatedEvent,\n  CommunicationUserKind,\n  ParticipantsAddedEvent,\n  ParticipantsRemovedEvent\n} from '@azure/communication-signaling';\n\nimport {\n  AudioDeviceInfo,\n  Call,\n  CommunicationServicesError,\n  GroupCallLocator,\n  JoinCallOptions,\n  DeviceManager,\n  DeviceAccess,\n  RemoteParticipant,\n  VideoDeviceInfo,\n  CallAgent,\n  CallClient,\n  HangUpOptions,\n  CallEndReason\n} from '@azure/communication-calling';\nimport { callAdded, callRemoved, setCallState, setParticipants, setCallAgent } from './actions/calls';\nimport { setMic, setShareScreen } from './actions/controls';\nimport {\n  setAudioDeviceInfo,\n  setAudioDeviceList,\n  setCameraPermission,\n  setMicrophonePermission,\n  setVideoDeviceInfo,\n  setVideoDeviceList,\n  setDeviceManager\n} from './actions/devices';\nimport { addScreenShareStream, removeScreenShareStream } from './actions/streams';\nimport { setLogLevel } from '@azure/logger';\nimport RemoteStreamSelector from './RemoteStreamSelector';\nimport { Constants } from './constants';\nimport { setCallClient, setUserId } from './actions/sdk';\n\n// This function sets up the user to chat with the thread\nconst addUserToThread = (displayName: string, emoji: string) => async (dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  if (state.thread.threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  let threadId: string = state.thread.threadId;\n\n  // get environment url from server\n  let environmentUrl = await getEnvironmentUrl();\n\n  if (environmentUrl === undefined) {\n    console.error('unable to get environment url from server');\n    return;\n  }\n  // create our user\n  let userToken = await getToken();\n\n  if (userToken === undefined) {\n    console.error('unable to get a token');\n    return;\n  }\n\n  const user = userToken.user as CommunicationUserIdentifier;\n\n  let options: CommunicationTokenRefreshOptions = {\n    token: userToken.token,\n    tokenRefresher: () => refreshTokenAsync(user.communicationUserId),\n    refreshProactively: true\n  };\n\n  let userAccessTokenCredentialNew = new AzureCommunicationTokenCredential(options);\n  let chatClient = new ChatClient(environmentUrl, userAccessTokenCredentialNew);\n\n  // set emoji for the user\n  setEmoji(user.communicationUserId, emoji);\n\n  // subscribe for message, typing indicator, and read receipt\n  let chatThreadClient = await chatClient.getChatThreadClient(threadId);\n  subscribeForMessage(chatClient, dispatch, getState);\n  subscribeForTypingIndicator(chatClient, dispatch);\n  subscribeForReadReceipt(chatClient, chatThreadClient, dispatch);\n  subscribeForChatParticipants(chatClient, user.communicationUserId, dispatch, getState);\n  subscribeForTopicUpdated(chatClient, dispatch, getState);\n  dispatch(setThreadId(threadId));\n  dispatch(setContosoUser(user.communicationUserId, userToken.token, displayName));\n  dispatch(setChatClient(chatClient));\n\n  await addThreadMemberHelper(\n    threadId,\n    {\n      identity: user.communicationUserId,\n      token: userToken.token,\n      displayName: displayName,\n      memberRole: 'User'\n    },\n    dispatch\n  );\n\n  await getThreadInformation(chatClient, dispatch, getState);\n  await getMessages(chatClient, dispatch, getState);\n};\n\nconst subscribeForTypingIndicator = async (chatClient: ChatClient, dispatch: Dispatch) => {\n  await chatClient.startRealtimeNotifications();\n  chatClient.on('typingIndicatorReceived', async (event) => {\n    const fromId = (event.sender as CommunicationUserKind).communicationUserId;\n    const typingNotification = {\n      from: fromId,\n      originalArrivalTime: event.receivedOn,\n      recipientId: (event.recipient as CommunicationUserKind).communicationUserId,\n      threadId: event.threadId,\n      version: event.version\n    };\n    dispatch(setTypingNotifications(fromId, typingNotification));\n  });\n};\n\nconst subscribeForMessage = async (chatClient: ChatClient, dispatch: Dispatch, getState: () => State) => {\n  await chatClient.startRealtimeNotifications();\n  chatClient.on('chatMessageReceived', async (event) => {\n    let state: State = getState();\n    let messages: ClientChatMessage[] = state.chat.messages !== undefined ? state.chat.messages : [];\n    if (!isUserMatchingIdentity(event.sender, state.contosoClient.user.identity)) {\n      const clientChatMessage = {\n        sender: event.sender,\n        id: event.id,\n        senderDisplayName: event.senderDisplayName,\n        createdOn: event.createdOn,\n        content: { message: event.message }\n      };\n\n      messages.push(clientChatMessage);\n      dispatch(setMessages(messages.sort(compareMessages)));\n    }\n  });\n};\n\nconst subscribeForReadReceipt = async (\n  chatClient: ChatClient,\n  chatThreadClient: ChatThreadClient,\n  dispatch: Dispatch\n) => {\n  await chatClient.startRealtimeNotifications();\n  chatClient.on('readReceiptReceived', async (event) => {\n    let receipts: ChatMessageReadReceipt[] = [];\n    for await (let page of chatThreadClient.listReadReceipts().byPage()) {\n      for (const receipt of page) {\n        receipts.push(receipt);\n      }\n    }\n    dispatch(setReceipts(receipts));\n  });\n};\n\nconst subscribeForChatParticipants = async (\n  chatClient: ChatClient,\n  identity: string,\n  dispatch: Dispatch,\n  getState: () => State\n) => {\n  chatClient.on('participantsRemoved', async (event: ParticipantsRemovedEvent) => {\n    const state = getState();\n    let participants: ChatParticipant[] = [];\n    for (let chatParticipant of event.participantsRemoved) {\n      // if you are in the list, remove yourself from the chat\n      if (isUserMatchingIdentity(chatParticipant.id, identity)) {\n        dispatch(setRemovedFromThread(true));\n        return;\n      }\n    }\n\n    const originalParticipants = state.threadMembers.threadMembers;\n    for (var i = 0; i < originalParticipants.length; i++) {\n      const participantId = (originalParticipants[i].id as CommunicationUserIdentifier).communicationUserId;\n      if (\n        event.participantsRemoved.filter((chatParticipant) => isUserMatchingIdentity(chatParticipant.id, participantId))\n          .length === 0\n      ) {\n        participants.push(originalParticipants[i]);\n      }\n    }\n\n    dispatch(setThreadMembers(participants));\n  });\n\n  chatClient.on('participantsAdded', async (event: ParticipantsAddedEvent) => {\n    const state = getState();\n    let participants: ChatParticipant[] = [...state.threadMembers.threadMembers];\n\n    // there is a chance that the participant added is you and so there is a chance that you can come in as a\n    // new participant as well\n    const addedParticipants = event.participantsAdded.map((chatParticipant: ChatParticipant) => {\n      return {\n        id: chatParticipant.id,\n        displayName: chatParticipant.displayName,\n        shareHistoryTime: new Date(chatParticipant?.shareHistoryTime || new Date())\n      };\n    });\n\n    // add participants not in the list\n    for (var j = 0; j < event.participantsAdded.length; j++) {\n      const addedParticipant = event.participantsAdded[j];\n      const id = (addedParticipant.id as CommunicationUserIdentifier).communicationUserId;\n      if (\n        participants.filter((participant: ChatParticipant) => isUserMatchingIdentity(participant.id, id)).length === 0\n      ) {\n        participants.push(addedParticipant);\n      }\n    }\n\n    // also make sure we get the emojis for the new participants\n    let users = Object.assign({}, state.contosoClient.users);\n    for (var i = 0; i < addedParticipants.length; i++) {\n      var threadMember = addedParticipants[i];\n      var identity = (threadMember.id as CommunicationUserIdentifier).communicationUserId;\n      var user = users[identity];\n      if (user == null) {\n        var serverUser = await getEmoji(identity);\n        if (serverUser !== undefined) {\n          users[identity] = { emoji: serverUser.emoji };\n        }\n      }\n    }\n\n    dispatch(setContosoUsers(users));\n    dispatch(setThreadMembers(participants));\n  });\n};\n\nconst subscribeForTopicUpdated = async (chatClient: ChatClient, dispatch: Dispatch, getState: () => State) => {\n  chatClient.on('chatThreadPropertiesUpdated', async (e: ChatThreadPropertiesUpdatedEvent) => {\n    const state = getState();\n    let threadId = state.thread.threadId;\n\n    if (!threadId) {\n      console.error('no threadId set');\n      return;\n    }\n\n    dispatch(setThreadTopicName(e.properties.topic));\n  });\n};\n\nconst sendTypingNotification = () => async (dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  let chatClient = state.contosoClient.chatClient;\n  if (chatClient === undefined) {\n    console.error('Chat Client not created yet');\n    return;\n  }\n  let threadId = state.thread.threadId;\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  await sendTypingNotificationHelper(await chatClient.getChatThreadClient(threadId));\n};\n\nconst updateTypingUsers = () => async (dispatch: Dispatch, getState: () => State) => {\n  let typingUsers = [];\n  let state: State = getState();\n  let typingNotifications = state.chat.typingNotifications;\n  for (let id in typingNotifications) {\n    let typingNotification = typingNotifications[id];\n    if (!typingNotification.originalArrivalTime) {\n      continue;\n    }\n    if (shouldDisplayTyping(typingNotification.originalArrivalTime)) {\n      let threadMember = state.threadMembers.threadMembers.find((threadMember) =>\n        isUserMatchingIdentity(threadMember.id, id)\n      );\n      if (threadMember) {\n        typingUsers.push(threadMember);\n      }\n    }\n  }\n  dispatch(setTypingUsers(typingUsers));\n};\n\nconst shouldDisplayTyping = (lastReceivedTypingEventDate: number) => {\n  let currentDate = new Date();\n  let timeSinceLastTypingNotificationMs = currentDate.getTime() - lastReceivedTypingEventDate;\n  return timeSinceLastTypingNotificationMs <= MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS;\n};\n\nconst sendMessage = (messageContent: string) => async (dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  let chatClient = state.contosoClient.chatClient;\n  if (chatClient === undefined) {\n    console.error('Chat Client not created yet');\n    return;\n  }\n  let threadId = state.thread.threadId;\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  let displayName = state.contosoClient.user.displayName;\n  let userId = state.contosoClient.user.identity;\n\n  // we use this client message id to have a local id for messages\n  // if we fail to send the message we'll at least be able to show that the message failed to send on the client\n  let clientMessageId = (Math.floor(Math.random() * MAXIMUM_INT64) + 1).toString(); //generate a random unsigned Int64 number\n  let newMessage = createNewClientChatMessage(userId, displayName, clientMessageId, messageContent);\n\n  let messages = getState().chat.messages;\n  messages.push(newMessage);\n  dispatch(setMessages(messages));\n\n  await sendMessageHelper(\n    await chatClient.getChatThreadClient(threadId),\n    messageContent,\n    displayName,\n    clientMessageId,\n    dispatch,\n    getState\n  );\n};\n\nconst isValidThread = (threadId: string) => async (dispatch: Dispatch) => {\n  try {\n    let validationRequestOptions = { method: 'GET' };\n    let validationResponse = await fetch('/isValidThread/' + threadId, validationRequestOptions);\n    if (validationResponse.status === 200) {\n      dispatch(setThreadId(threadId));\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.error('Failed at getting isThreadIdValid, Error: ', error);\n  }\n};\n\nconst getMessages = async (chatClient: ChatClient, dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  if (chatClient === undefined) {\n    console.error('Chat Client not created yet');\n    return;\n  }\n  let threadId = state.thread.threadId;\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  let messages = await getMessagesHelper(await chatClient.getChatThreadClient(threadId));\n  if (messages === undefined) {\n    console.error('unable to get messages');\n    return;\n  }\n\n  const reversedClientChatMessages: ClientChatMessage[] = messages\n    .map((message) => convertToClientChatMessage(message))\n    .reverse();\n\n  return dispatch(setMessages(reversedClientChatMessages));\n};\n\nconst createThread = async () => {\n  let threadId = await createThreadHelper();\n  if (threadId !== null) {\n    window.location.href += `?threadId=${threadId}`;\n  } else {\n    console.error('unable to generate a new chat thread');\n  }\n};\n\nconst addThreadMember = () => async (dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  let user = state.contosoClient.user;\n  let threadId = state.thread.threadId;\n\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  await addThreadMemberHelper(\n    threadId,\n    {\n      identity: user.identity,\n      token: user.token,\n      displayName: user.displayName,\n      memberRole: 'User'\n    },\n    dispatch\n  );\n};\n\nconst removeThreadMemberByUserId = (userId: string) => async (dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  let chatClient = state.contosoClient.chatClient;\n  let threadId = state.thread.threadId;\n  if (chatClient === undefined) {\n    console.error(\"Chat client doesn't created yet\");\n    return;\n  }\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  let chatThreadClient = await chatClient.getChatThreadClient(threadId);\n  try {\n    await chatThreadClient.removeParticipant({\n      communicationUserId: userId\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getThreadMembers = () => async (dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  let chatClient = state.contosoClient.chatClient;\n  if (chatClient === undefined) {\n    console.error('Chat Client not created yet');\n    return;\n  }\n  let threadId = state.thread.threadId;\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  let chatThreadClient = await chatClient.getChatThreadClient(threadId);\n\n  try {\n    let threadMembers = [];\n    for await (let page of chatThreadClient.listParticipants().byPage()) {\n      for (const threadMember of page) {\n        threadMembers.push(threadMember);\n      }\n    }\n    dispatch(setThreadMembers(threadMembers));\n  } catch (error) {\n    console.error('Failed at getting members, Error: ', error);\n    dispatch(setThreadMembersError(true));\n  }\n};\n\n// We want to grab everything about the chat thread that has occured before we register for events.\n// We care about pre-existing messages, the chat topic, and the participants in this chat\nconst getThreadInformation = async (chatClient: ChatClient, dispatch: Dispatch, getState: () => State) => {\n  let state: State = getState();\n  if (chatClient === undefined) {\n    console.error('Chat Client not created yet');\n    return;\n  }\n  let threadId = state.thread.threadId;\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n\n  let chatThreadClient;\n  let iteratableParticipants;\n\n  try {\n    chatThreadClient = chatClient.getChatThreadClient(threadId);\n    iteratableParticipants = chatThreadClient.listParticipants();\n  } catch (error) {\n    console.error(error);\n    dispatch(setThreadMembersError(true));\n  }\n\n  let chatParticipants = [];\n  // This is just to get all of the members in a chat. This is not performance as we're not using paging\n  if (!iteratableParticipants) {\n    console.error('unable to resolve chat participant iterator');\n    return; // really we need to alert that there was an error?\n  }\n\n  for await (const page of iteratableParticipants.byPage()) {\n    for (const chatParticipant of page) {\n      chatParticipants.push(chatParticipant);\n    }\n  }\n\n  if (chatParticipants.length === 0) {\n    console.error('unable to get members in the thread');\n    return;\n  }\n\n  // remove undefined display name chat participants\n  const validChatParticipants = chatParticipants.filter(\n    (chatParticipant) => chatParticipant.displayName !== undefined && chatParticipant.id !== undefined\n  );\n\n  // get the emojis for the new participants\n  let users = state.contosoClient.users;\n  for (var i = 0; i < chatParticipants.length; i++) {\n    var threadMember = chatParticipants[i];\n    var identity = (threadMember.id as CommunicationUserIdentifier).communicationUserId;\n    var user = users[identity];\n    if (user == null) {\n      var serverUser = await getEmoji(identity);\n      if (serverUser !== undefined) {\n        users[identity] = { emoji: serverUser.emoji };\n      }\n    }\n  }\n\n  const properties = await chatThreadClient?.getProperties();\n\n  if (!properties) {\n    console.error('no chat thread properties');\n    return;\n  }\n\n  dispatch(setThreadId(threadId));\n  dispatch(setThreadTopicName(properties.topic));\n  dispatch(setContosoUsers(users));\n  dispatch(setThreadMembers(validChatParticipants));\n};\n\nconst updateThreadTopicName = async (\n  chatClient: ChatClient,\n  threadId: string,\n  topicName: string,\n  setIsSavingTopicName: React.Dispatch<boolean>\n) => {\n  const chatThreadClient = await chatClient.getChatThreadClient(threadId);\n  updateThreadTopicNameHelper(chatThreadClient, topicName, setIsSavingTopicName);\n};\n\n// Thread Helper\nconst createThreadHelper = async () => {\n  try {\n    let createThreadRequestOptions = { method: 'POST' };\n    let createThreadResponse = await fetch('/createThread', createThreadRequestOptions);\n    let threadId = await createThreadResponse.text();\n    return threadId;\n  } catch (error) {\n    console.error('Failed at creating thread, Error: ', error);\n  }\n};\n\nconst updateThreadTopicNameHelper = async (\n  chatThreadClient: ChatThreadClient,\n  topicName: string,\n  setIsSavingTopicName: React.Dispatch<boolean>\n) => {\n  try {\n    await chatThreadClient.updateTopic(topicName);\n    setIsSavingTopicName(false);\n  } catch (error) {\n    console.error('Failed at updating thread property, Error: ', error);\n  }\n};\n\n// Thread Member Helper\nconst addThreadMemberHelper = async (threadId: string, user: User, dispatch: Dispatch) => {\n  try {\n    let body = {\n      id: user.identity,\n      displayName: user.displayName\n    };\n    let addMemberRequestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body)\n    };\n    await fetch('/addUser/' + threadId, addMemberRequestOptions);\n  } catch (error) {\n    console.error('Failed at adding thread member, Error: ', error);\n  }\n};\n\n// Message Helper\nconst sendMessageHelper = async (\n  chatThreadClient: ChatThreadClient,\n  messageContent: string,\n  displayName: string,\n  clientMessageId: string,\n  dispatch: Dispatch,\n  getState: () => State\n) => {\n  // for real time messages we want to store it locally and render it and then sync it with the server message later\n  // 1. send the message\n  // 2. cache the message locally using the message.id\n  // 3. when we get the server synced message we match with the message.id\n  try {\n    const messageResult = await chatThreadClient.sendMessage(\n      { content: messageContent },\n      { senderDisplayName: displayName }\n    );\n    const message: ChatMessage = await chatThreadClient.getMessage(messageResult.id);\n    updateMessagesArray(dispatch, getState, convertToClientChatMessage(message, clientMessageId));\n  } catch (error) {\n    console.error('Failed at getting messages, Error: ', error);\n    let failedMessages = getState().chat.failedMessages;\n    failedMessages.push(clientMessageId);\n    setFailedMessages(failedMessages);\n\n    const message = getState().chat.messages.filter((message) => message.clientMessageId === clientMessageId)[0];\n    message.failed = true;\n    updateMessagesArray(dispatch, getState, message);\n  }\n};\n\n// Merge our local messages with server synced messages\nconst updateMessagesArray = async (dispatch: Dispatch, getState: () => State, newMessage: ClientChatMessage) => {\n  let state: State = getState();\n  let messages: ClientChatMessage[] = state.chat.messages !== undefined ? state.chat.messages : [];\n\n  // the message id is what we we get from the server when it is synced. There will be other server attributes\n  // on the message but the id should be consistent.\n  messages = messages.map((message: ClientChatMessage) => {\n    return message.clientMessageId === newMessage.clientMessageId ? Object.assign({}, message, newMessage) : message;\n  });\n  dispatch(setMessages(messages.sort(compareMessages)));\n};\n\nconst getMessagesHelper = async (chatThreadClient: ChatThreadClient): Promise<ChatMessage[] | undefined> => {\n  try {\n    let messages: ChatMessage[] = [];\n    let getMessagesResponse = await chatThreadClient.listMessages({\n      maxPageSize: PAGE_SIZE\n    });\n\n    let messages_temp = [];\n\n    for await (let page of getMessagesResponse.byPage()) {\n      for (const message of page) {\n        messages_temp.push(message);\n      }\n    }\n\n    while (true) {\n      if (messages_temp === undefined) {\n        console.error('Unable to get messages from server');\n        return;\n      }\n\n      // filter and only return top 100 text messages\n      messages.push(...messages_temp.filter((message) => message.type === 'text'));\n      if (messages.length >= INITIAL_MESSAGES_SIZE) {\n        return messages.slice(0, INITIAL_MESSAGES_SIZE);\n      }\n      // if there is no more messages\n      break;\n    }\n\n    return messages.slice(0, INITIAL_MESSAGES_SIZE);\n  } catch (error) {\n    console.error('Failed at getting messages, Error: ', error);\n  }\n};\n\n// Typing Notification Helper\nconst sendTypingNotificationHelper = async (chatThreadClient: ChatThreadClient) => {\n  try {\n    await chatThreadClient.sendTypingNotification();\n  } catch (error) {\n    console.error('Failed at sending typing notification, Error: ', error);\n  }\n};\n\nconst getEnvironmentUrl = async () => {\n  try {\n    let getRequestOptions = {\n      method: 'GET'\n    };\n    let response = await fetch('/getEnvironmentUrl', getRequestOptions);\n    return response.text().then((environmentUrl) => environmentUrl);\n  } catch (error) {\n    console.error('Failed at getting environment url, Error: ', error);\n  }\n};\n\n// Token Helper\nexport const getToken = async () => {\n  try {\n    let getTokenRequestOptions = {\n      method: 'POST'\n    };\n    let getTokenResponse = await fetch('/token', getTokenRequestOptions);\n    return getTokenResponse.json().then((_responseJson) => _responseJson);\n  } catch (error) {\n    console.error('Failed at getting token, Error: ', error);\n  }\n};\n\nconst refreshTokenAsync = async (userIdentity: string): Promise<string> => {\n  return new Promise<string>((resolve, reject) => {\n    return fetch('/refreshToken/' + userIdentity).then(\n      (response) => {\n        if (response.ok) {\n          resolve(response.json().then((json) => json.token));\n        } else {\n          reject(new Error('error'));\n        }\n      },\n      (error) => {\n        reject(new Error(error.message));\n      }\n    );\n  });\n};\n\nconst setEmoji = async (userId: string, emoji: string) => {\n  try {\n    let getTokenRequestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ Emoji: emoji })\n    };\n    await (await fetch('/userConfig/' + userId, getTokenRequestOptions)).json;\n  } catch (error) {\n    console.error('Failed at setting emoji, Error: ', error);\n  }\n};\n\nconst getEmoji = async (userId: string) => {\n  try {\n    let getTokenRequestOptions = {\n      headers: { 'Content-Type': 'application/json' },\n      method: 'GET'\n    };\n    return await (await fetch('/userConfig/' + userId, getTokenRequestOptions)).json();\n  } catch (error) {\n    console.error('Failed at getting emoji, Error: ', error);\n  }\n};\n\nconst sendReadReceipt = (messageId: string) => async (dispatch: Dispatch, getState: () => State) => {\n  // This is sent when we get focus to this tab and see this message\n  let state: State = getState();\n  let chatClient = state.contosoClient.chatClient;\n  if (chatClient === undefined) {\n    console.error('Chat Client not created yet');\n    return;\n  }\n  let threadId = state.thread.threadId;\n  if (threadId === undefined) {\n    console.error('Thread Id not created yet');\n    return;\n  }\n  await sendReadReceiptHelper(await chatClient.getChatThreadClient(threadId), messageId);\n};\n\nconst sendReadReceiptHelper = async (chatThreadClient: ChatThreadClient, messageId: string) => {\n  let postReadReceiptRequest: SendReadReceiptRequest = {\n    chatMessageId: messageId\n  };\n  await chatThreadClient.sendReadReceipt(postReadReceiptRequest);\n};\n\nexport const setMicrophone = (mic: boolean) => {\n  return async (dispatch: Dispatch, getState: () => State): Promise<void> => {\n    const state = getState();\n\n    if (state === undefined || state.calls.call === undefined) {\n      console.error('state or state.controls.mic is null');\n      return;\n    }\n\n    try {\n      if (!state.controls.mic) {\n        await state.calls.call.unmute();\n      } else {\n        await state.calls.call.mute();\n      }\n\n      dispatch(setMic(mic));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\n\nexport const setShareUnshareScreen = (shareScreen: boolean) => {\n  return async (dispatch: Dispatch, getState: () => State): Promise<void> => {\n    const state = getState();\n\n    if (state === undefined || state.calls.call === undefined) {\n      console.error('state or state.controls.shareScreen is null');\n      return;\n    }\n\n    try {\n      if (!state.controls.shareScreen) {\n        await state.calls.call.startScreenSharing();\n      } else {\n        await state.calls.call.stopScreenSharing();\n      }\n\n      dispatch(setShareScreen(shareScreen));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\n\nconst subscribeToParticipant = (participant: RemoteParticipant, call: Call, dispatch: Dispatch): void => {\n  const remoteStreamSelector = RemoteStreamSelector.getInstance(Constants.DOMINANT_PARTICIPANTS_COUNT, dispatch);\n\n  participant.on('stateChanged', () => {\n    remoteStreamSelector.participantStateChanged(\n      utils.getId(participant.identifier),\n      participant.displayName ?? '',\n      participant.state,\n      !participant.isMuted,\n      participant.videoStreams[0].isAvailable\n    );\n    dispatch(setParticipants([...call.remoteParticipants.values()]));\n  });\n\n  participant.on('isMutedChanged', () => {\n    remoteStreamSelector.participantAudioChanged(utils.getId(participant.identifier), !participant.isMuted);\n  });\n\n  participant.on('isSpeakingChanged', () => {\n    dispatch(setParticipants([...call.remoteParticipants.values()]));\n  });\n\n  participant.on('videoStreamsUpdated', (e): void => {\n    e.added.forEach((addedStream) => {\n      if (addedStream.mediaStreamType === 'ScreenSharing') {\n        addedStream.on('isAvailableChanged', () => {\n          if (addedStream.isAvailable) {\n            dispatch(addScreenShareStream(addedStream, participant));\n          } else {\n            dispatch(removeScreenShareStream(addedStream, participant));\n          }\n        });\n\n        if (addedStream.isAvailable) {\n          dispatch(addScreenShareStream(addedStream, participant));\n        }\n      } else if (addedStream.mediaStreamType === 'Video') {\n        addedStream.on('isAvailableChanged', () => {\n          remoteStreamSelector.participantVideoChanged(utils.getId(participant.identifier), addedStream.isAvailable);\n        });\n      }\n    });\n    dispatch(setParticipants([...call.remoteParticipants.values()]));\n  });\n};\n\nconst updateAudioDevices = async (\n  deviceManager: DeviceManager,\n  dispatch: Dispatch,\n  getState: () => State\n): Promise<void> => {\n  const microphoneList: AudioDeviceInfo[] = await deviceManager.getMicrophones();\n  dispatch(setAudioDeviceList(microphoneList));\n\n  const state = getState();\n  if (state.devices.audioDeviceInfo === undefined && microphoneList.length > 0) {\n    dispatch(setAudioDeviceInfo(microphoneList[0]));\n    deviceManager.selectMicrophone(microphoneList[0]);\n  } else if (\n    state.devices.audioDeviceInfo &&\n    !utils.isSelectedAudioDeviceInList(state.devices.audioDeviceInfo, microphoneList)\n  ) {\n    deviceManager.selectMicrophone(state.devices.audioDeviceInfo);\n  }\n};\n\nconst updateVideoDevices = async (\n  deviceManager: DeviceManager,\n  dispatch: Dispatch,\n  getState: () => State\n): Promise<void> => {\n  const cameraList: VideoDeviceInfo[] = await deviceManager.getCameras();\n  dispatch(setVideoDeviceList(cameraList));\n\n  const state = getState();\n  if (state.devices.videoDeviceInfo === undefined) {\n    dispatch(setVideoDeviceInfo(cameraList[0]));\n  } else if (\n    state.devices.videoDeviceInfo &&\n    !utils.isSelectedVideoDeviceInList(state.devices.videoDeviceInfo, cameraList)\n  ) {\n    dispatch(setVideoDeviceInfo(state.devices.videoDeviceInfo));\n  }\n};\n\nconst subscribeToDeviceManager = async (\n  deviceManager: DeviceManager,\n  dispatch: Dispatch,\n  getState: () => State\n): Promise<void> => {\n  // listen for any new events\n  deviceManager.on('videoDevicesUpdated', async () => {\n    updateVideoDevices(deviceManager, dispatch, getState);\n  });\n\n  deviceManager.on('audioDevicesUpdated', async () => {\n    updateAudioDevices(deviceManager, dispatch, getState);\n  });\n\n  deviceManager.askDevicePermission({ audio: true, video: true }).then((e: DeviceAccess) => {\n    if (e.audio !== undefined) {\n      if (e.audio) {\n        dispatch(setMicrophonePermission('Granted'));\n\n        updateAudioDevices(deviceManager, dispatch, getState);\n      } else {\n        dispatch(setMicrophonePermission('Denied'));\n      }\n    }\n\n    if (e.video !== undefined) {\n      if (e.video) {\n        dispatch(setCameraPermission('Granted'));\n        updateVideoDevices(deviceManager, dispatch, getState);\n      } else {\n        dispatch(setCameraPermission('Denied'));\n      }\n    }\n  });\n};\n\nexport const updateDevices = () => {\n  return async (dispatch: Dispatch, getState: () => State): Promise<void> => {\n    const state = getState();\n    const deviceManager = state.devices.deviceManager;\n\n    if (deviceManager == null) {\n      console.error('no device manager available');\n      return;\n    }\n\n    const cameraList: VideoDeviceInfo[] = await deviceManager.getCameras();\n\n    dispatch(setVideoDeviceList(cameraList));\n\n    const microphoneList: AudioDeviceInfo[] = await deviceManager.getMicrophones();\n\n    dispatch(setAudioDeviceList(microphoneList));\n  };\n};\n\nexport const registerToCallAgent = (\n  userId: string,\n  callAgent: CallAgent,\n  callEndedHandler: (reason: CallEndReason) => void\n) => {\n  return async (dispatch: Dispatch, getState: () => State): Promise<void> => {\n    setLogLevel('verbose');\n\n    setUserId(userId);\n    setCallAgent(callAgent);\n\n    callAgent.on('callsUpdated', (e: { added: Call[]; removed: Call[] }): void => {\n      e.added.forEach((addedCall) => {\n        console.log(`Call added : Call Id = ${addedCall.id}`);\n\n        const state = getState();\n        if (state.calls.call && addedCall.direction === 'Incoming') {\n          addedCall.hangUp();\n          return;\n        }\n\n        dispatch(callAdded(addedCall));\n\n        addedCall.on('stateChanged', (): void => {\n          dispatch(setCallState(addedCall.state));\n        });\n\n        dispatch(setCallState(addedCall.state));\n\n        addedCall.on('isScreenSharingOnChanged', (): void => {\n          dispatch(setShareScreen(addedCall.isScreenSharingOn));\n        });\n\n        dispatch(setShareScreen(addedCall.isScreenSharingOn));\n\n        // if remote participants have changed, subscribe to the added remote participants\n        addedCall.on('remoteParticipantsUpdated', (ev): void => {\n          // for each of the added remote participants, subscribe to events and then just update as well in case the update has already happened\n          const state = getState();\n          ev.added.forEach((addedRemoteParticipant) => {\n            subscribeToParticipant(addedRemoteParticipant, addedCall, dispatch);\n            dispatch(setParticipants([...state.calls.remoteParticipants, addedRemoteParticipant]));\n          });\n\n          // We don't use the actual value we are just going to reset the remoteParticipants based on the call\n          if (ev.removed.length > 0) {\n            dispatch(setParticipants([...addedCall.remoteParticipants.values()]));\n          }\n        });\n\n        dispatch(setParticipants([...state.calls.remoteParticipants]));\n      });\n      e.removed.forEach((removedCall) => {\n        const state = getState();\n        if (state.calls.call && state.calls.call === removedCall) {\n          dispatch(callRemoved(removedCall, state.calls.group));\n          if (removedCall.callEndReason && removedCall.callEndReason.code !== 0) {\n            removedCall.callEndReason && callEndedHandler(removedCall.callEndReason);\n          }\n        }\n      });\n    });\n  };\n};\n\nexport const initCallClient = (unsupportedStateHandler: () => void) => {\n  return async (dispatch: Dispatch, getState: () => State): Promise<void> => {\n    let callClient;\n\n    // check if chrome on ios OR firefox browser\n    if (utils.isOnIphoneAndNotSafari() || utils.isUnsupportedBrowser()) {\n      unsupportedStateHandler();\n      return;\n    }\n\n    try {\n      setLogLevel('verbose');\n      callClient = new CallClient();\n    } catch (e) {\n      unsupportedStateHandler();\n      return;\n    }\n\n    if (!callClient) {\n      return;\n    }\n\n    const deviceManager: DeviceManager = await callClient.getDeviceManager();\n    dispatch(setCallClient(callClient));\n    dispatch(setDeviceManager(deviceManager));\n    subscribeToDeviceManager(deviceManager, dispatch, getState);\n  };\n};\n\n// what does the forEveryone parameter really mean?\nexport const endCall = async (call: Call, options: HangUpOptions): Promise<void> => {\n  await call.hangUp(options).catch((e: CommunicationServicesError) => console.error(e));\n};\n\nexport const joinGroup = async (\n  callAgent: CallAgent,\n  context: GroupCallLocator,\n  callOptions: JoinCallOptions\n): Promise<void> => {\n  try {\n    await callAgent.join(context, callOptions);\n  } catch (e) {\n    console.log('Failed to join a call', e);\n    return;\n  }\n};\n\nexport const addParticipant = async (call: Call, user: CommunicationUserKind): Promise<void> => {\n  await call.addParticipant(user);\n};\n\nexport const removeParticipant = async (call: Call, user: CommunicationUserKind): Promise<void> => {\n  await call.removeParticipant(user).catch((e: CommunicationServicesError) => console.error(e));\n};\n\n\nexport {\n  sendMessage,\n  getMessages,\n  createThread,\n  addThreadMember,\n  getThreadMembers,\n  addUserToThread,\n  removeThreadMemberByUserId,\n  getEmoji,\n  setEmoji,\n  sendReadReceipt,\n  sendTypingNotification,\n  updateTypingUsers,\n  isValidThread,\n  updateThreadTopicName\n};\n","import { connect } from 'react-redux';\n\nimport ChatThread from '../components/ChatThread';\nimport { State } from '../core/reducers/index';\nimport { sendReadReceipt } from '../core/sideEffects';\nimport { PARTICIPANTS_THRESHOLD } from '../constants';\nimport { isUserMatchingIdentity } from '../utils/utils';\n\nconst mapStateToProps = (state: State) => ({\n  messages: state.chat.messages,\n  user: state.contosoClient.user,\n  users: state.contosoClient.users,\n  failedMessages: state.chat.failedMessages,\n  isYourLatestMessage: (messageId: string, messages: any[]) => {\n    let latestArrivalTime: any = -1;\n    let latestMessageId: string | undefined = undefined;\n\n    for (var i = 0; i < messages.length; i++) {\n      let date: any = messages[i].createdOn;\n      if (\n        messages[i].sender.communicationUserId === state.contosoClient.user.identity &&\n        messages[i] &&\n        new Date(date) >= new Date(latestArrivalTime)\n      ) {\n        latestArrivalTime = messages[i].createdOn;\n        latestMessageId = messages[i].id;\n      }\n    }\n\n    // we know the message we are rendering is not our latest message so we dont want to render a seen component\n    if (messageId !== latestMessageId || latestMessageId === undefined) {\n      return false;\n    }\n\n    return true;\n  },\n  isLargeParticipantsGroup: () => {\n    return state.threadMembers.threadMembers.length >= PARTICIPANTS_THRESHOLD;\n  },\n  isMessageSeen: (clientMessageId: string, messages: any[]) => {\n    if (!state.conversations.receipts || state.conversations.receipts.length === 0) {\n      return false;\n    }\n\n    let message = messages.find((message) => message.clientMessageId === clientMessageId);\n    let latestArrivalTime: any = message ? message.createdOn : -1;\n\n    var numSeen = state.conversations.receipts.filter((receipt) => {\n      if (isUserMatchingIdentity(receipt.sender, state.contosoClient.user.identity)) return false; //don't count sender's own read receipt\n      let readMessagecreatedOn = messages.find((message) => message.id === receipt.chatMessageId)?.createdOn;\n      return new Date(readMessagecreatedOn) >= new Date(latestArrivalTime);\n    }).length;\n\n    return numSeen > 0 ? true : false;\n  },\n  isYourLatestSeenMessage: (clientMessageId: string, MessagesWithSeen: any[]) => {\n    let latestArrivalTime: any = -1;\n    let latestMessageId: string | undefined = undefined;\n\n    for (var i = 0; i < MessagesWithSeen.length; i++) {\n      let date: any = MessagesWithSeen[i].createdOn;\n      if (\n        MessagesWithSeen[i].isSeen &&\n        MessagesWithSeen[i].sender.communicationUserId === state.contosoClient.user.identity &&\n        MessagesWithSeen[i] &&\n        new Date(date) >= new Date(latestArrivalTime)\n      ) {\n        latestArrivalTime = MessagesWithSeen[i].createdOn;\n        latestMessageId = MessagesWithSeen[i].clientMessageId;\n      }\n    }\n\n    if (clientMessageId !== latestMessageId || latestMessageId === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  sendReadReceipt: (messages: any[], userId: string) => {\n    // if you have no messages, you haven't seen any messages to send a read receipt for\n    if (!messages || messages.length === 0) {\n      return;\n    }\n\n    let latestArrivalTime: any = -1;\n    let latestMessageId = undefined;\n\n    for (var i = 0; i < messages.length; i++) {\n      let date: any = messages[i].createdOn;\n      if (messages[i].sender.communicationUserId !== userId && new Date(date) > new Date(latestArrivalTime)) {\n        latestArrivalTime = messages[i].createdOn;\n        latestMessageId = messages[i].id;\n      }\n    }\n    if (latestMessageId) {\n      dispatch(sendReadReceipt(latestMessageId));\n    }\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatThread);\n","import { mergeStyles } from '@fluentui/react';\n\nconst textFieldStyle = mergeStyles({\n  width: '100%',\n  height: '2.25rem'\n});\n\nconst TextFieldStyleProps = {\n  wrapper: {\n    height: '2.25rem'\n  },\n  fieldGroup: {\n    height: '2.25rem'\n  }\n};\nconst sendBoxStyle = mergeStyles({\n  border: '0rem', // 0px\n  color: 'black',\n  backgroundColor: '#EEF2F5',\n  fontWeight: 400,\n  fontSize: '1rem', // 16px\n  width: '100%',\n  height: '2.25rem',\n  '::-webkit-input-placeholder': {\n    fontSize: '1rem'\n  },\n  '::-moz-placeholder': {\n    fontSize: '1rem'\n  },\n  ':-moz-placeholder': {\n    fontSize: '1rem'\n  }\n});\n\nconst sendIconStyle = mergeStyles({\n  backgroundColor: '#EEF2F5',\n  width: '2.25rem',\n  height: '2.25rem',\n  color: 'grey',\n  paddingLeft: '0.5rem',\n  paddingTop: '0.625rem',\n  fontSize: '0.875rem' // 14px\n});\n\nexport { textFieldStyle, sendBoxStyle, sendIconStyle, TextFieldStyleProps };\n","import { connect } from 'react-redux';\nimport { Dispatch } from 'react';\n\nimport SendBox from '../components/SendBox';\nimport { sendMessage, sendTypingNotification } from '../core/sideEffects';\nimport { MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS } from '../constants';\nimport { State } from '../core/reducers';\n\nconst mapStateToProps = (state: State) => ({\n  user: state.contosoClient.user\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onSendMessage: (messageContent: string) => dispatch(sendMessage(messageContent)),\n  onSendTypingNotification: (\n    lastSentTypingNotificationDate: number,\n    setLastSentTypingNotificationDate: Dispatch<number>\n  ) => {\n    let currentDate = new Date();\n    let timeSinceLastSentTypingNotificationMs = currentDate.getTime() - lastSentTypingNotificationDate;\n    if (timeSinceLastSentTypingNotificationMs >= MINIMUM_TYPING_INTERVAL_IN_MILLISECONDS) {\n      dispatch(sendTypingNotification());\n      setLastSentTypingNotificationDate(currentDate.getTime());\n    }\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SendBox);\n","import { Stack, TextField } from '@fluentui/react';\nimport { SendIcon } from '@fluentui/react-northstar';\nimport React, { useState, Dispatch } from 'react';\n\nimport { ENTER_KEY, EMPTY_MESSAGE_REGEX, MAXIMUM_LENGTH_OF_MESSAGE } from '../../src/constants';\nimport { sendBoxStyle, sendIconStyle, textFieldStyle, TextFieldStyleProps } from './styles/SendBox.styles';\nimport { User } from '../core/reducers/ContosoClientReducers';\n\ninterface SendboxProps {\n  onSendMessage(messageContent: string): void;\n  onSendTypingNotification(\n    lastSentTypingNotificationDate: number,\n    setLastSentTypingNotificationDate: Dispatch<number>\n  ): void;\n  user: User;\n}\n\nexport default (props: SendboxProps): JSX.Element => {\n  const [textValue, setTextValue] = useState('');\n  const [textValueOverflow, setTextValueOverflow] = useState(false);\n  const [lastSentTypingNotificationDate, setLastSentTypingNotificationDate] = useState(0);\n\n  const addMessage = () => {\n    // we dont want to send empty messages including spaces, newlines, tabs\n    if (!EMPTY_MESSAGE_REGEX.test(textValue)) {\n      props.onSendMessage(textValue);\n      setTextValue('');\n    }\n  };\n  const setText = (e: any) => {\n    if (e.target.value.length > MAXIMUM_LENGTH_OF_MESSAGE) {\n      setTextValueOverflow(true);\n    } else {\n      setTextValueOverflow(false);\n    }\n    setTextValue(e.target.value);\n  };\n\n  return (\n    <div>\n      <Stack horizontal={true}>\n        <TextField\n          className={textFieldStyle}\n          id=\"sendbox\"\n          borderless={true}\n          ariaLabel={'Type'}\n          inputClassName={sendBoxStyle}\n          placeholder=\"Type your message\"\n          value={textValue}\n          onChange={setText}\n          autoComplete=\"off\"\n          onKeyUp={(ev) => {\n            if (ev.which === ENTER_KEY && !textValueOverflow) {\n              addMessage();\n            }\n            props.onSendTypingNotification(lastSentTypingNotificationDate, setLastSentTypingNotificationDate);\n          }}\n          styles={TextFieldStyleProps}\n        />\n        <SendIcon\n          outline\n          className={sendIconStyle}\n          id=\"sendmessage\"\n          onClick={() => {\n            if (!textValueOverflow) {\n              addMessage();\n            }\n          }}\n        />\n      </Stack>\n    </div>\n  );\n};\n","import { mergeStyles } from '@fluentui/react';\n\nconst TypingIndicatorContainerStyle = mergeStyles({\n  height: '2.125rem',\n  display: 'flex',\n  alignItems: 'center'\n});\n\nconst TypingIndicatorListStyle = mergeStyles({\n  fontWeight: 400,\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  paddingRight: '0.1875rem'\n});\n\nconst TypingIndicatorVerbStyle = mergeStyles({\n  fontWeight: 400,\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  paddingRight: '0.1875rem'\n});\n\nexport { TypingIndicatorContainerStyle, TypingIndicatorListStyle, TypingIndicatorVerbStyle };\n","import { connect } from 'react-redux';\n\nimport TypingIndicator from '../components/TypingIndicator';\nimport { State } from '../core/reducers/index';\nimport { PARTICIPANTS_THRESHOLD, MAXIMUM_LENGTH_OF_TYPING_USERS } from '../constants';\nimport { ChatParticipant } from '@azure/communication-chat';\nimport { CommunicationUserIdentifier } from '@azure/communication-common';\n\nconst mapStateToProps = (state: State) => ({\n  generateTypingIndicatorList: () => {\n    let typingUsersFromStore = state.chat.typingUsers;\n    let contosoUsers = state.contosoClient.users;\n    let currentContosoUser = state.contosoClient.user;\n\n    let typingIndicator = '';\n    let typingUsers = typingUsersFromStore.filter(\n      (typingUser: ChatParticipant) =>\n        (typingUser.id as CommunicationUserIdentifier).communicationUserId !== currentContosoUser.identity\n    );\n    if (typingUsers.length === 0 || state.threadMembers.threadMembers.length >= PARTICIPANTS_THRESHOLD) {\n      return typingIndicator;\n    }\n    // if we have at least one other participant we want to show names for the first 2\n    if (typingUsers.length > 0) {\n      typingIndicator += typingUsers\n        .filter(\n          (typingUser: ChatParticipant) =>\n            contosoUsers[(typingUser.id as CommunicationUserIdentifier).communicationUserId] !== undefined\n        )\n        .slice(0, 2)\n        .map(\n          (typingUserWithEmoji: any) =>\n            `${contosoUsers[typingUserWithEmoji.id.communicationUserId].emoji}${typingUserWithEmoji.displayName}`\n        )\n        .join(', ');\n    }\n    // if we have more than 2 other participants we want to show the number of other participants\n    if (typingUsers.length > 2) {\n      var len = typingUsers.length - 2;\n      typingIndicator += ` and ${len} other${len === 1 ? '' : 's'}`;\n    }\n    if (typingIndicator.length > MAXIMUM_LENGTH_OF_TYPING_USERS) {\n      typingIndicator = `${typingUsers.length} participant${typingUsers.length === 1 ? '' : 's'}`;\n    }\n    return typingIndicator;\n  },\n\n  generateTypingIndicatorVerb: () => {\n    let typingUsersFromStore = state.chat.typingUsers;\n    let currentContosoUser = state.contosoClient.user;\n\n    let typingIndicatorVerb = '';\n    let typingUsers = typingUsersFromStore.filter(\n      (typingUser: ChatParticipant) =>\n        (typingUser.id as CommunicationUserIdentifier).communicationUserId !== currentContosoUser.identity\n    );\n    if (typingUsers.length === 0 || state.threadMembers.threadMembers.length >= PARTICIPANTS_THRESHOLD) {\n      return typingIndicatorVerb;\n    }\n    typingIndicatorVerb = (typingUsers.length > 1 ? ' are' : ' is') + ' typing...';\n    return typingIndicatorVerb;\n  }\n});\n\nexport default connect(mapStateToProps)(TypingIndicator);\n","import React from 'react';\n\nimport {\n  TypingIndicatorContainerStyle,\n  TypingIndicatorListStyle,\n  TypingIndicatorVerbStyle\n} from './styles/TypingIndicator.styles';\n\ninterface TypingIndicatorProps {\n  generateTypingIndicatorList(): string;\n  generateTypingIndicatorVerb(): string;\n}\n\nexport default (props: TypingIndicatorProps): JSX.Element => {\n  return (\n    <div className={TypingIndicatorContainerStyle}>\n      <span className={TypingIndicatorListStyle}>{props.generateTypingIndicatorList()}</span>\n      <span className={TypingIndicatorVerbStyle}>{props.generateTypingIndicatorVerb()}</span>\n    </div>\n  );\n};\n","import { mergeStyles } from '@fluentui/react';\n\nconst chatAreaContainerStyle = mergeStyles({\n  height: '100%',\n  width: '100%',\n  marginLeft: '6%',\n  marginRight: '6%',\n  paddingBottom: '1rem',\n  overflow: 'auto'\n});\n\nexport { chatAreaContainerStyle };\n","import { connect } from 'react-redux';\n\nimport ChatArea from '../components/ChatArea';\nimport { State } from '../core/reducers/index';\nimport { updateTypingUsers } from '../core/sideEffects';\n\nconst mapStateToProps = (state: State) => ({\n  typingNotifications: state.chat.typingNotifications\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onUpdateTypingUsers: () => dispatch(updateTypingUsers())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatArea);\n","import { Stack } from '@fluentui/react';\nimport React, { useEffect } from 'react';\n\nimport ChatThread from '../containers/ChatThread';\nimport SendBox from '../containers/SendBox';\nimport TypingIndicator from '../containers/TypingIndicator';\nimport { chatAreaContainerStyle } from './styles/ChatArea.styles';\n\ninterface ChatAreaProps {\n  onUpdateTypingUsers(): void;\n  typingNotifications: any;\n}\n\nexport default (props: ChatAreaProps): JSX.Element => {\n  const { onUpdateTypingUsers } = props;\n\n  useEffect(() => {\n    let listener: NodeJS.Timeout = setInterval(() => {\n      onUpdateTypingUsers();\n    }, 500);\n    return () => {\n      clearInterval(listener);\n    };\n  }, [onUpdateTypingUsers]);\n\n  return (\n    <Stack className={chatAreaContainerStyle}>\n      <ChatThread />\n      <TypingIndicator />\n      <SendBox />\n    </Stack>\n  );\n};\n","import { getTheme, IStackTokens, IStackStyles, ITextFieldStyles, mergeStyles } from '@fluentui/react';\n\nconst palette = getTheme().palette;\n\nconst paneFooterTokens: IStackTokens = {\n  childrenGap: 5\n};\n\nconst textFieldStyles: Partial<ITextFieldStyles> = {\n  field: {\n    color: palette.neutralSecondary,\n    padding: 0\n  },\n  root: {\n    marginLeft: '1rem',\n    marginRight: '1rem'\n  },\n  fieldGroup: {\n    border: 'none'\n  }\n};\n\nconst footerMainTextStyle = mergeStyles({\n  fontSize: '1rem', // 16px\n  fontWeight: 600,\n  marginLeft: '1rem',\n  marginRight: '1rem',\n  marginTop: '1rem'\n});\n\nconst copyLinkButtonStyle = mergeStyles({\n  fontWeight: 600,\n  height: '2.5rem',\n  marginLeft: '1rem',\n  marginRight: '1rem',\n  width: '90%'\n});\n\nconst copyIconStyle = mergeStyles({\n  marginRight: '0.5em',\n  fontSize: '0.875rem' // 14px\n});\n\nconst copyLinkTextStyle = mergeStyles({\n  fontSize: '1rem'\n});\n\nconst sidePanelContainerStyle = (showSidePanel: boolean) =>\n  mergeStyles({\n    height: '100%',\n    width: '17.813rem', // 285px\n    display: showSidePanel ? 'flex' : 'none',\n    borderLeft: '0.063rem solid #DDDDDD'\n  });\n\nconst titleStyle = mergeStyles({\n  marginLeft: '1rem',\n  marginTop: '1rem',\n  fontSize: '1rem', // 16px\n  height: '1.375rem',\n  marginBottom: '1.25rem',\n  fontWeight: 600\n});\n\nconst memberListStyle = mergeStyles({\n  height: '100%',\n  width: '100%',\n  maxHeight: '100%',\n  overflow: 'auto'\n});\n\nconst settingsListStyle = mergeStyles({\n  height: '100%',\n  width: '100%',\n  maxHeight: '100%'\n});\n\nconst textFieldIconStyle = mergeStyles({\n  marginRight: '0.5em',\n  fontSize: '0.875rem' // 14px\n});\n\nconst chatNameTextFieldStyle: Partial<ITextFieldStyles> = {\n  field: {\n    width: '100%',\n    height: '100%'\n  },\n  root: {\n    marginLeft: '1rem',\n    marginRight: '1rem'\n  },\n  fieldGroup: {\n    borderColor: '#CCCCCC',\n    borderRadius: '0.188rem',\n    height: '2.25rem',\n    paddingBottom: '0.25rem'\n  },\n  subComponentStyles: {\n    label: {\n      root: {} && {\n        fontSize: '0.875rem' // 14px\n      }\n    }\n  }\n};\n\nconst chatNameTextWarningFieldStyle: Partial<ITextFieldStyles> = {\n  field: {\n    width: '100%',\n    height: '100%'\n  },\n  root: {\n    marginLeft: '1rem',\n    marginRight: '1rem'\n  },\n  fieldGroup: {\n    borderColor: '#FF0000',\n    borderRadius: '0.188rem',\n    height: '2.25rem',\n    paddingBottom: '0.25rem'\n  },\n  subComponentStyles: {\n    label: {\n      root: {} && {\n        fontSize: '0.875rem' // 14px\n      }\n    }\n  }\n};\n\nconst saveChatNameButtonStyle = mergeStyles({\n  fontWeight: 600,\n  height: '2.5rem',\n  marginLeft: '1rem',\n  paddingRight: '1rem',\n  width: '90%'\n});\n\nconst giveFeedbackSectionStyle = mergeStyles({\n  bottom: '1rem',\n  minHeight: '7.25rem',\n  borderTop: '0.063rem solid #DDDDDD'\n});\n\nconst giveFeedbackBottomStyle = mergeStyles({\n  border: '1px solid #CCCCCC',\n  borderRadius: '2px',\n  fontWeight: 600,\n  height: '2.5rem',\n  marginLeft: '1rem',\n  marginRight: '1rem',\n  marginTop: '1rem',\n  width: '90%'\n});\n\nconst giveFeedbackIconStyle = mergeStyles({\n  marginRight: '0.5rem'\n});\n\nconst appInformationStyle = mergeStyles({\n  paddingLeft: '1rem',\n  paddingTop: '0.625rem',\n  color: '#605E5C'\n});\n\nconst inviteFooterStackContainerStyles = mergeStyles({\n  minHeight: '7.25rem',\n  borderTop: '0.063rem solid #DDDDDD'\n});\n\nconst inviteFooterStackStyles: IStackStyles = {\n  root: {\n    marginBottom: '1.25rem'\n  }\n};\n\nconst topicWarningStyle = mergeStyles({\n  height: '1.75rem',\n  backgroundColor: '#FFFFFF',\n  color: 'red',\n  fontSize: '0.75rem',\n  paddingLeft: '1rem',\n  paddingBottom: '0.5rem'\n});\n\nconst emptyWarningStyle = mergeStyles({\n  height: '1.75rem',\n  paddingBottom: '1.75rem'\n});\n\nconst saveButtonTextStyle = mergeStyles({\n  fontSize: '0.875rem' // 14px\n});\n\nconst groupNameStyle = mergeStyles({\n  fontSize: '0.875rem',\n  fontWeight: 600,\n  marginTop: '0.5rem',\n  marginLeft: '1rem'\n});\n\nconst groupNameInputBoxStyle = mergeStyles({\n  boxSizing: 'border-box',\n  height: '2.5rem',\n  width: '90%',\n  border: '0.125rem solid #CCCCCC',\n  borderRadius: '0.188rem',\n  backgroundColor: '#FFFFFF',\n  marginTop: '0.375rem',\n  marginBottom: '0.25rem',\n  marginLeft: '1rem',\n  fontSize: '1rem'\n});\n\nconst groupNameInputBoxWarningStyle = mergeStyles({\n  boxSizing: 'border-box',\n  height: '2.5rem',\n  width: '90%',\n  border: '0.125rem solid #FF0000',\n  borderRadius: '0.188rem',\n  backgroundColor: '#FFFFFF',\n  marginTop: '0.375rem',\n  marginBottom: '0.25rem',\n  marginLeft: '1rem',\n  fontSize: '1rem'\n});\n\nexport {\n  sidePanelContainerStyle,\n  titleStyle,\n  memberListStyle,\n  settingsListStyle,\n  textFieldIconStyle,\n  chatNameTextFieldStyle,\n  chatNameTextWarningFieldStyle,\n  saveChatNameButtonStyle,\n  giveFeedbackSectionStyle,\n  giveFeedbackBottomStyle,\n  giveFeedbackIconStyle,\n  appInformationStyle,\n  inviteFooterStackContainerStyles,\n  inviteFooterStackStyles,\n  paneFooterTokens,\n  textFieldStyles,\n  footerMainTextStyle,\n  copyLinkButtonStyle,\n  copyIconStyle,\n  copyLinkTextStyle,\n  topicWarningStyle,\n  emptyWarningStyle,\n  saveButtonTextStyle,\n  groupNameStyle,\n  groupNameInputBoxStyle,\n  groupNameInputBoxWarningStyle\n};\n","import { getTheme, IIconProps, IPivotStyles, mergeStyles } from '@fluentui/react';\n\nconst chatHeaderContainerStyle = mergeStyles({\n  width: '100%',\n  height: 'auto',\n  paddingLeft: '3.25rem',\n  paddingRight: '3.25rem',\n  marginTop: '1rem',\n  selectors: {\n    '@media (max-width: 65rem)': {\n      paddingLeft: '5%',\n      paddingRight: '5%'\n    }\n  },\n  borderBottom: '0.063rem solid #DDDDDD'\n});\n\nconst topicNameContainerStyle = mergeStyles({\n  height: '100%',\n  maxWidth: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: '0.625rem'\n});\n\nconst topicNameLabelStyle = mergeStyles({\n  color: '#323130',\n  fontSize: '1rem', // 16px\n  fontWeight: 600,\n  marginRight: '0.125rem',\n  width: '31.25rem',\n  wordBreak: 'break-all',\n  overflowY: 'hidden'\n});\n\nconst topicNameEditTextStyle1 = mergeStyles({\n  color: '#A19F9D',\n  fontSize: '1rem', // 16px\n  fontWeight: 600,\n  width: '100%',\n  height: '100%'\n});\n\nconst leaveButtonContainerStyle = mergeStyles({\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center'\n});\n\nconst leaveButtonStyle = mergeStyles({\n  marginRight: '0.625rem',\n  width: '6.688rem',\n  borderWidth: '0.125rem',\n  borderColor: '#CCCCCC',\n  color: '#323130',\n  fontSize: '0.875rem', // 14px\n  fontWeight: 600\n});\n\nconst greyIconButtonStyle = mergeStyles({\n  color: '#323130',\n  marginRight: '0.5rem'\n});\n\nconst editIcon: IIconProps = {\n  iconName: 'Edit'\n};\n\nconst leaveIcon: IIconProps = {\n  iconName: 'Leave'\n};\n\nconst pivotItemStyle = mergeStyles({\n  padding: '0px 13px'\n});\n\nconst palette = getTheme().palette;\nconst pivotItemStyles: Partial<IPivotStyles> = {\n  linkIsSelected: {\n    padding: 0,\n    marginRight: 0,\n    height: '100%',\n    color: palette.themePrimary,\n    selectors: {\n      ':hover': { color: palette.themePrimary }\n    }\n  },\n  link: { padding: 0, marginRight: 0, height: 60 },\n  root: {\n    width: 84,\n    height: 60,\n    marginRight: '0.5rem',\n    display: 'inline-block',\n    verticalAlign: 'top'\n  }\n};\n\nconst iconButtonContainerStyle = mergeStyles({\n  whiteSpace: 'nowrap',\n  selectors: {\n    '@media (min-width: 50rem)': {\n      display: 'none'\n    }\n  }\n});\n\nconst largeButtonContainerStyle = mergeStyles({\n  whiteSpace: 'nowrap',\n  // selectors: {\n  //   '@media (max-width: 50rem)': {\n  //     display: 'none'\n  //   }\n  // }\n});\n\nexport {\n  chatHeaderContainerStyle,\n  topicNameContainerStyle,\n  topicNameLabelStyle,\n  topicNameEditTextStyle1,\n  leaveButtonContainerStyle,\n  leaveButtonStyle,\n  greyIconButtonStyle,\n  editIcon,\n  leaveIcon,\n  pivotItemStyle,\n  pivotItemStyles,\n  iconButtonContainerStyle,\n  largeButtonContainerStyle\n};\n","import { Icon, PrimaryButton, Stack, TextField } from '@fluentui/react';\nimport React from 'react';\n\nimport {\n  copyLinkButtonStyle,\n  copyLinkTextStyle,\n  copyIconStyle,\n  footerMainTextStyle,\n  paneFooterTokens,\n  textFieldStyles\n} from './styles/SidePanel.styles';\nimport {\n  inviteFooterStackContainerStyles,\n  inviteFooterStackStyles,\n  saveButtonTextStyle\n} from './styles/SidePanel.styles';\n\nconst copyJoinLink = () => {\n  const inputElement: HTMLInputElement = document.getElementById('inputText') as HTMLInputElement;\n  inputElement.select();\n  document.execCommand('copy');\n  document.getElementById('copyLinkButton')?.focus();\n};\n\nexport default (): JSX.Element => {\n  const invitePeopleString = 'Invite people to join';\n  const copyJoinInfoString = 'Copy invite link';\n\n  return (\n    <Stack styles={inviteFooterStackStyles} className={inviteFooterStackContainerStyles} tokens={paneFooterTokens}>\n      <div className={footerMainTextStyle}>{invitePeopleString}</div>\n      <TextField\n        inputClassName={copyLinkTextStyle}\n        tabIndex={-1}\n        ariaLabel=\"Join link\"\n        styles={textFieldStyles}\n        id=\"inputText\"\n        type=\"text\"\n        value={`${document.baseURI}`}\n      ></TextField>\n      <PrimaryButton tab-index=\"-1\" id=\"copyLinkButton\" className={copyLinkButtonStyle} onClick={copyJoinLink}>\n        <Icon iconName=\"Copy\" className={copyIconStyle} />\n        <div className={saveButtonTextStyle}>{copyJoinInfoString}</div>\n      </PrimaryButton>\n    </Stack>\n  );\n};\n","import { mergeStyles } from '@fluentui/react';\n\nconst memberItemContainerStyle = mergeStyles({\n  marginLeft: '1rem',\n  marginRight: '0.5rem',\n  marginTop: '0.125rem',\n  marginBottom: '0.125rem',\n  display: 'flex',\n  position: 'relative'\n});\n\nconst memberItemNameStyle = mergeStyles({\n  fontSize: '0.875rem', // 14px\n  fontWeight: 400,\n  marginTop: '0.3125rem',\n  marginRight: '0.25rem',\n  paddingLeft: '0.25rem',\n  overflowY: 'hidden'\n});\n\nconst memberItemIsYouStyle = mergeStyles({\n  fontSize: '0.875rem', // 14px\n  fontWeight: 400,\n  color: '#A19F9D',\n  marginTop: '0.3125rem',\n  marginLeft: '0.3125rem'\n});\n\nconst moreInforStyle = mergeStyles({\n  position: 'absolute',\n  right: '1rem'\n});\n\nexport { memberItemContainerStyle, memberItemNameStyle, memberItemIsYouStyle, moreInforStyle };\n","import { IconButton } from '@fluentui/react';\nimport React from 'react';\n\nimport { messageAvatarContainerStyle } from './styles/ChatThread.styles';\nimport {\n  memberItemContainerStyle,\n  memberItemIsYouStyle,\n  memberItemNameStyle,\n  moreInforStyle\n} from './styles/MemberItem.styles';\n\ninterface MemberItemProps {\n  name: string;\n  userId: string;\n  isYou: boolean;\n  avatar: string;\n  removeThreadMemberByUserId(userId: string): void;\n}\n\nexport default (props: MemberItemProps): JSX.Element => {\n  return (\n    <div className={memberItemContainerStyle}>\n      <div className={messageAvatarContainerStyle(props.avatar)}>{props.avatar}</div>\n      <span className={memberItemNameStyle}>{props.name}</span>\n      {props.isYou && <span className={memberItemIsYouStyle}>(you)</span>}\n      {!props.isYou && (\n        <div className={moreInforStyle}>\n          <IconButton\n            menuIconProps={{ iconName: 'More' }}\n            menuProps={{\n              items: props.isYou\n                ? []\n                : [\n                    {\n                      key: props.name,\n                      name: 'Remove participant',\n                      onClick: () => {\n                        props.removeThreadMemberByUserId(props.userId);\n                      }\n                    }\n                  ]\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { mergeStyles } from '@fluentui/react';\n\nimport { getBackgroundColor } from '../../utils/utils';\n\nconst responsiveLayoutStyle = mergeStyles({\n  display: 'flex',\n  flexDirection: 'row',\n  selectors: {\n    '@media (max-width: 37.5rem)': {\n      flexDirection: 'column'\n    }\n  }\n});\n\nconst leftPreviewContainerStyle = mergeStyles({\n  height: '10.563rem',\n  width: '8.313rem',\n  marginRight: '9.688rem',\n  selectors: {\n    '@media (max-width: 37.5rem)': {\n      marginRight: '0rem'\n    }\n  }\n});\n\nconst rightInputContainerStyle = mergeStyles({\n  height: '14.75rem',\n  width: '19rem',\n  selectors: {\n    '@media (max-width: 37.5rem)': {\n      marginTop: '6.25rem'\n    }\n  }\n});\n\nconst smallAvatarContainerStyle = (avatar: string, selectedAvatar: string) =>\n  mergeStyles({\n    width: '3rem',\n    height: '3rem',\n    border: avatar === selectedAvatar ? '0.125rem solid #0378D4' : '',\n    backgroundColor: getBackgroundColor(avatar)?.backgroundColor,\n    borderRadius: '50%',\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    outline: 'none'\n  });\n\nconst largeAvatarContainerStyle = (avatar: string) =>\n  mergeStyles({\n    width: '8.25rem',\n    height: '8.25rem',\n    backgroundColor: getBackgroundColor(avatar)?.backgroundColor,\n    borderRadius: '50%',\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center'\n  });\n\nconst smallAvatarStyle = mergeStyles({\n  height: '1.75rem',\n  width: '2rem',\n  color: '#444444',\n  fontWeight: 400,\n  fontSize: '1.5rem',\n  letterSpacing: '0',\n  lineHeight: '1.75rem',\n  textAlign: 'center'\n});\n\nconst largeAvatarStyle = mergeStyles({\n  height: '4.938rem',\n  color: '#444444',\n  fontWeight: 400,\n  fontSize: '3.75rem', // 60px\n  letterSpacing: '0',\n  lineHeight: '4.938rem',\n  textAlign: 'center'\n});\n\nconst namePreviewStyle = (isEmpty: boolean) => {\n  return mergeStyles({\n    height: '1.5rem',\n    width: '8.313rem',\n    fontSize: '1.125rem', // 18px\n    fontWeight: 600,\n    letterSpacing: '0',\n    lineHeight: '1.5rem',\n    textAlign: 'center',\n    opacity: isEmpty ? 1 : 0.34,\n    color: isEmpty ? '#000000' : '#A19F9D',\n    wordWrap: 'break-word',\n    overflowY: 'hidden'\n  });\n};\n\nconst labelFontStyle = mergeStyles({\n  height: '1.188rem',\n  width: '2.625rem',\n  color: '#444444',\n  fontSize: '1rem', // 16px\n  fontWeight: 600,\n  letterSpacing: '0',\n  lineHeight: '2rem',\n  marginBottom: '0.625rem'\n});\n\nconst nameInputFontStyle = mergeStyles({\n  height: '1.25rem',\n  color: '#A19F9D',\n  fontWeight: 400,\n  fontSize: '1rem', // 16px\n  letterSpacing: '0',\n  lineHeight: '1.125rem'\n});\n\nconst configContainerStyle = mergeStyles({\n  maxWidth: '46.875rem',\n  width: '100%',\n  height: '100%',\n  selectors: {\n    '@media (max-width: 46.875rem)': {\n      padding: 10,\n      height: '100%'\n    }\n  },\n  horizontalAlign: 'center',\n  verticalAlign: 'center'\n});\n\nconst inputBoxStyle = mergeStyles({\n  boxSizing: 'border-box',\n  height: '2.5rem',\n  width: '18.75rem',\n  border: '0.125rem solid #CCCCCC',\n  borderRadius: '0.188rem',\n  backgroundColor: '#FFFFFF',\n  marginTop: '0.375rem',\n  marginBottom: '0.875rem'\n});\n\nconst inputBoxTextStyle = mergeStyles({\n  fontSize: '1rem', // 16px\n  lineHeight: '1.5rem',\n  '::-webkit-input-placeholder': {\n    fontSize: '1rem'\n  },\n  '::-moz-placeholder': {\n    fontSize: '1rem'\n  },\n  ':-moz-placeholder': {\n    fontSize: '1rem'\n  }\n});\n\nconst TextFieldStyleProps = {\n  wrapper: {\n    height: '2.25rem'\n  },\n  fieldGroup: {\n    height: '2.25rem'\n  }\n};\n\nconst inputBoxTextWarningStyle = mergeStyles({\n  fontSize: '1rem', // 16px\n  lineHeight: '1.5rem',\n  color: 'red'\n});\n\nconst inputBoxWarningStyle = mergeStyles({\n  boxSizing: 'border-box',\n  height: '2.5rem',\n  width: '18.75rem',\n  border: '0.125rem solid #FF0000',\n  borderRadius: '0.188rem',\n  backgroundColor: '#FFFFFF',\n  marginTop: '0.375rem',\n  marginBottom: '0.875rem',\n  fontSize: '1rem' // 16px\n});\n\nconst warningStyle = mergeStyles({\n  width: '18.75rem',\n  backgroundColor: '#FFFFFF',\n  marginTop: '0.188rem',\n  marginBottom: '0.188rem',\n  marginLeft: '0.188rem',\n  color: 'red',\n  fontSize: '1rem' // 16px\n});\n\nconst chatIconStyle = mergeStyles({\n  marginRight: '0.375rem',\n  fontSize: '0.875rem' // 14px\n});\n\nconst buttonStyle = mergeStyles({\n  height: '2.75rem',\n  fontWeight: 600,\n  width: '100%',\n  maxWidth: '18.75rem',\n  minWidth: '12.5rem',\n  fontSize: '0.875rem' // 14px\n});\n\nconst mainContainerStyle = mergeStyles({\n  maxWidth: '46.875rem',\n  width: '100%',\n  height: '100%',\n  selectors: {\n    '@media (max-width: 46.875rem)': {\n      padding: '0.625rem',\n      height: '100%'\n    }\n  }\n});\n\nconst startChatButtonTextStyle = mergeStyles({\n  fontSize: '0.875rem' // 14px\n});\n\nexport {\n  responsiveLayoutStyle,\n  leftPreviewContainerStyle,\n  rightInputContainerStyle,\n  smallAvatarContainerStyle,\n  largeAvatarContainerStyle,\n  smallAvatarStyle,\n  largeAvatarStyle,\n  namePreviewStyle,\n  labelFontStyle,\n  nameInputFontStyle,\n  configContainerStyle,\n  inputBoxStyle,\n  inputBoxTextStyle,\n  TextFieldStyleProps,\n  inputBoxTextWarningStyle,\n  inputBoxWarningStyle,\n  warningStyle,\n  chatIconStyle,\n  buttonStyle,\n  mainContainerStyle,\n  startChatButtonTextStyle\n};\n","\nimport React, { useEffect } from 'react';\nimport { Stack, Toggle, Image, ImageFit } from '@fluentui/react';\nimport { MicIcon, CallVideoIcon } from '@fluentui/react-icons-northstar';\nimport { Constants } from '../core/constants';\nimport {\n  VideoStreamRendererView,\n  VideoDeviceInfo,\n  AudioDeviceInfo,\n  LocalVideoStream,\n  VideoStreamRenderer\n} from '@azure/communication-calling';\nimport staticMediaSVG from '../assets/staticmedia.svg';\nimport {\n  toggleStyle,\n  imgStyles,\n  toggleButtonsBarToken,\n  localPreviewContainerStyle,\n  toggleButtonsBarStyle,\n  localPreviewStyle\n} from './styles/LocalPreview.styles';\n\nexport interface LocalPreviewProps {\n  setMic(mic: boolean): void;\n  mic: boolean;\n  setLocalVideoStream(device: LocalVideoStream | undefined): void;\n  videoDeviceInfo: VideoDeviceInfo;\n  audioDeviceInfo: AudioDeviceInfo;\n  videoDeviceList: VideoDeviceInfo[];\n  audioDeviceList: AudioDeviceInfo[];\n  localVideoStream: LocalVideoStream;\n}\n\nlet rendererView: VideoStreamRendererView | undefined;\n\nexport default (props: LocalPreviewProps): JSX.Element => {\n  const imageProps = {\n    src: staticMediaSVG.toString(),\n    imageFit: ImageFit.cover,\n    maximizeFrame: true\n  };\n\n  const handleLocalVideoOnOff = (_ev: React.MouseEvent<HTMLElement>, checked = false): void => {\n    const stream = new LocalVideoStream(props.videoDeviceInfo);\n    props.setLocalVideoStream(checked ? stream : undefined);\n  };\n  const handleLocalMicOnOff = (_ev: React.MouseEvent<HTMLElement>, checked = false): void => {\n    props.setMic(checked);\n  };\n\n  useEffect(() => {\n    (async (): Promise<void> => {\n      if (props.localVideoStream) {\n        const renderer: VideoStreamRenderer = new VideoStreamRenderer(props.localVideoStream);\n        rendererView = await renderer.createView({ scalingMode: 'Crop', isMirrored: true });\n\n        const container = document.getElementById(Constants.CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID);\n\n        if (container && container.childElementCount === 0) {\n          container.appendChild(rendererView.target);\n        }\n      }\n    })();\n\n    return (): void => {\n      if (rendererView) {\n        rendererView.dispose();\n        rendererView = undefined;\n      }\n    };\n  }, [props.localVideoStream]);\n  return (\n    <Stack className={localPreviewContainerStyle}>\n      <Stack\n        horizontalAlign=\"center\"\n        verticalAlign=\"center\"\n        id={Constants.CONFIGURATION_LOCAL_VIDEO_PREVIEW_ID}\n        className={localPreviewStyle}\n      >\n        {!props.localVideoStream && <Image styles={imgStyles} {...imageProps} aria-label=\"Local video preview image\" />}\n      </Stack>\n      <Stack\n        horizontal\n        horizontalAlign=\"center\"\n        verticalAlign=\"center\"\n        tokens={toggleButtonsBarToken}\n        className={toggleButtonsBarStyle}\n      >\n        <CallVideoIcon size=\"medium\" />\n        <Toggle\n          checked={props.localVideoStream !== undefined}\n          styles={toggleStyle}\n          disabled={!props.videoDeviceInfo || props.videoDeviceList.length === 0}\n          onChange={handleLocalVideoOnOff}\n          ariaLabel=\"Video Icon\"\n        />\n        <MicIcon size=\"medium\" />\n        <Toggle\n          checked={props.mic}\n          styles={toggleStyle}\n          disabled={!props.audioDeviceInfo || props.audioDeviceList.length === 0}\n          onChange={handleLocalMicOnOff}\n          ariaLabel=\"Microphone Icon\"\n        />\n      </Stack>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport NewLocalSettings from './LocalSettings';\nimport ParticipantStack from '../containers/ParticipantStack';\nimport { VideoDeviceInfo, AudioDeviceInfo, DeviceManager } from '@azure/communication-calling';\nimport { Stack } from '@fluentui/react';\nimport {\n  fullHeightStyles,\n  paneHeaderStyle,\n  settingsContainerStyle,\n  paneHeaderTextStyle\n} from './styles/CommandPanel.styles';\nimport Footer from './Footer';\n\nexport interface CommandPanelProps {\n  selectedPane: string;\n  videoDeviceInfo: VideoDeviceInfo;\n  videoDeviceList: VideoDeviceInfo[];\n  audioDeviceList: AudioDeviceInfo[];\n  audioDeviceInfo: AudioDeviceInfo;\n  setSelectedPane: any;\n  setVideoDeviceInfo(device: VideoDeviceInfo): void;\n  setAudioDeviceInfo(device: AudioDeviceInfo): void;\n  deviceManager: DeviceManager;\n}\nexport enum CommandPanelTypes {\n  None = 'none',\n  People = 'People',\n  Settings = 'Settings'\n}\n\nexport default (props: CommandPanelProps): JSX.Element => {\n  return (\n    <Stack styles={fullHeightStyles}>\n      <Stack.Item className={paneHeaderStyle}>\n        <div className={paneHeaderTextStyle}>{props.selectedPane}</div>\n      </Stack.Item>\n\n      {props.selectedPane === CommandPanelTypes.People && (\n        <Stack.Item styles={fullHeightStyles}>\n          <ParticipantStack />\n        </Stack.Item>\n      )}\n      {props.selectedPane === CommandPanelTypes.People && (\n        <Stack.Item>\n          <Footer />\n        </Stack.Item>\n      )}\n      {props.selectedPane === CommandPanelTypes.Settings && (\n        <Stack.Item>\n          <div className={settingsContainerStyle}>\n            <NewLocalSettings\n              videoDeviceList={props.videoDeviceList}\n              audioDeviceList={props.audioDeviceList}\n              audioDeviceInfo={props.audioDeviceInfo}\n              videoDeviceInfo={props.videoDeviceInfo}\n              setVideoDeviceInfo={props.setVideoDeviceInfo}\n              setAudioDeviceInfo={props.setAudioDeviceInfo}\n              deviceManager={props.deviceManager}\n            />\n          </div>\n        </Stack.Item>\n      )}\n    </Stack>\n  );\n};\n","import { connect } from 'react-redux';\n\nimport { ChatParticipant } from '@azure/communication-chat';\n\nimport { GUID_FOR_INITIAL_TOPIC_NAME } from '../../src/constants';\nimport ChatHeader from '../components/ChatHeader';\nimport { State } from '../core/reducers/index';\nimport { removeThreadMemberByUserId } from '../core/sideEffects';\nimport { isUserMatchingIdentity } from '../utils/utils';\n\nexport type ChatHeaderProps = {\n  userId: string;\n  existsTopicName: boolean;\n  generateHeaderMessage: () => string;\n  threadMembers: ChatParticipant[];\n  topic: string;\n};\n\nexport type ChatHeaderDispatchProps = {\n  removeChatParticipantById: (userId: string) => Promise<void>;\n};\n\nconst mapStateToProps = (state: State): ChatHeaderProps => ({\n  threadMembers: state.threadMembers.threadMembers,\n  topic: state.thread.topic,\n  userId: state.contosoClient.user.identity,\n  existsTopicName: state.thread.topic !== GUID_FOR_INITIAL_TOPIC_NAME,\n  generateHeaderMessage: () => {\n    let header = 'Chat with ';\n\n    if (state.threadMembers === undefined) {\n      header += 'yourself';\n      return header;\n    }\n\n    let members = state.threadMembers.threadMembers.filter(\n      (member: ChatParticipant) => !isUserMatchingIdentity(member.id, state.contosoClient.user.identity)\n    );\n    if (members.length === 0) {\n      header += 'yourself';\n      return header;\n    }\n\n    // if we have at least one other participant we want to show names for the first 3\n    if (members.length > 0) {\n      let namedMembers = members.slice(0, 3);\n      header += namedMembers.map((member: ChatParticipant) => member.displayName).join(', ');\n    }\n\n    // if we have more than 3 other participants we want to show the number of other participants\n    if (members.length > 3) {\n      let len = members.length - 3;\n      header += ` and ${len} other participant${len === 1 ? '' : 's'}`;\n    }\n\n    return header;\n  }\n});\n\nconst mapDispatchToProps = (dispatch: any): ChatHeaderDispatchProps => ({\n  removeChatParticipantById: (userId: string) => dispatch(removeThreadMemberByUserId(userId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatHeader);\n","import { DefaultButton, Icon, Pivot, PivotItem, Stack } from '@fluentui/react';\nimport { UserFriendsIcon, SettingsIcon } from '@fluentui/react-icons-northstar';\nimport React, { Dispatch, useEffect, useState } from 'react';\n\nimport { copyIconStyle } from './styles/SidePanel.styles';\nimport {\n  chatHeaderContainerStyle,\n  largeButtonContainerStyle,\n  leaveButtonStyle,\n  pivotItemStyle,\n  pivotItemStyles,\n  topicNameLabelStyle\n} from './styles/ChatHeader.styles';\nimport { SidePanelTypes } from './SidePanel';\nimport { ChatHeaderDispatchProps, ChatHeaderProps } from '../containers/ChatHeader';\nimport { GUID_FOR_INITIAL_TOPIC_NAME } from '../constants';\n\ntype ChatHeaderPaneProps = {\n  selectedPane: SidePanelTypes;\n  setSelectedPane: Dispatch<SidePanelTypes>;\n  leaveChatHandler: () => void;\n  startCallHandler: () => void;\n};\n\nexport default (props: ChatHeaderDispatchProps & ChatHeaderProps & ChatHeaderPaneProps): JSX.Element => {\n  const [header, setHeader] = useState('');\n\n  const togglePivotItem = (item: PivotItem | undefined) => {\n    if (!item) return;\n    if (item.props.itemKey === SidePanelTypes.Settings) toggleSettings(props.selectedPane, props.setSelectedPane);\n    if (item.props.itemKey === SidePanelTypes.People) togglePeople(props.selectedPane, props.setSelectedPane);\n  };\n\n  const togglePeople = (selectedPane: SidePanelTypes, setSelectedPane: (pane: SidePanelTypes) => void) => {\n    return selectedPane !== SidePanelTypes.People\n      ? setSelectedPane(SidePanelTypes.People)\n      : setSelectedPane(SidePanelTypes.None);\n  };\n\n  const toggleSettings = (selectedPane: SidePanelTypes, setSelectedPane: (pane: SidePanelTypes) => void) => {\n    return selectedPane !== SidePanelTypes.Settings\n      ? setSelectedPane(SidePanelTypes.Settings)\n      : setSelectedPane(SidePanelTypes.None);\n  };\n\n  const leaveString = 'Leave';\n  const joinCallString = 'Join Call'\n\n  const { topic, generateHeaderMessage, leaveChatHandler, removeChatParticipantById, userId, startCallHandler } = props;\n\n  useEffect(() => {\n    setHeader(topic && topic !== GUID_FOR_INITIAL_TOPIC_NAME ? topic : generateHeaderMessage());\n  }, [topic, generateHeaderMessage]);\n\n  return (\n    <Stack className={chatHeaderContainerStyle} horizontal={true} horizontalAlign=\"space-between\">\n      <Stack.Item align=\"center\">\n        <div className={topicNameLabelStyle}>{header}</div>\n      </Stack.Item>\n      <Stack.Item align=\"center\">\n        <Stack horizontal={true}>\n          <Stack.Item align=\"center\">\n            <Pivot\n              onKeyDownCapture={(e) => {\n                if ((e.target as HTMLElement).id === SidePanelTypes.People && e.keyCode === 39) e.preventDefault();\n              }}\n              getTabId={(itemKey: string) => itemKey}\n              onLinkClick={(item) => togglePivotItem(item)}\n              styles={pivotItemStyles}\n              defaultSelectedKey={SidePanelTypes.None}\n              selectedKey={props.selectedPane}\n            >\n              <PivotItem itemKey={SidePanelTypes.None} />\n              {/* To Toggle People's Panel */}\n              <PivotItem\n                itemKey={SidePanelTypes.People}\n                onRenderItemLink={() => (\n                  <UserFriendsIcon\n                    outline={props.selectedPane === SidePanelTypes.People ? false : true}\n                    size=\"medium\"\n                    className={pivotItemStyle}\n                  />\n                )}\n              />\n              {/* To Toggle Settings's Panel */}\n              <PivotItem\n                itemKey={SidePanelTypes.Settings}\n                onRenderItemLink={() => (\n                  <SettingsIcon\n                    outline={props.selectedPane === SidePanelTypes.Settings ? false : true}\n                    size=\"medium\"\n                    className={pivotItemStyle}\n                  />\n                )}\n              />\n            </Pivot>\n          </Stack.Item>\n          <Stack.Item align=\"center\">\n            <div className={largeButtonContainerStyle}>\n              <DefaultButton\n                id=\"leave\"\n                className={leaveButtonStyle}\n                onClick={() => {\n                  leaveChatHandler();\n                  removeChatParticipantById(userId);\n                }}\n              >\n                <Icon iconName=\"Leave\" className={copyIconStyle} />\n                {leaveString}\n              </DefaultButton>\n            </div>\n          </Stack.Item>\n\n          <Stack.Item align=\"center\">\n            <div className={largeButtonContainerStyle}>\n              <DefaultButton\n                id=\"joinCall\"\n                className={leaveButtonStyle}\n                onClick={() => {\n                  startCallHandler();\n                }}\n              >\n                <Icon iconName=\"Phone\" className={copyIconStyle} />\n                {joinCallString}\n              </DefaultButton>\n            </div>\n          </Stack.Item>\n          \n        </Stack>\n      </Stack.Item>\n    </Stack>\n  );\n};\n","import { connect } from 'react-redux';\n\nimport { GUID_FOR_INITIAL_TOPIC_NAME } from '../../src/constants';\nimport { setContosoUsers, SetContosoUsersAction } from '../core/actions/ContosoClientAction';\nimport SidePanel from '../components/SidePanel';\nimport { State } from '../core/reducers/index';\nimport React from 'react';\nimport { updateThreadTopicName, removeThreadMemberByUserId } from '../core/sideEffects';\nimport { ChatClient, ChatParticipant } from '@azure/communication-chat';\n\nexport type SidePanelProps = {\n  identity: string;\n  chatParticipants: ChatParticipant[];\n  users: any;\n  existsTopicName: boolean;\n  topic: string | undefined;\n  threadId: string | undefined;\n  chatClient: ChatClient | undefined;\n  updateThreadTopicName: (\n    chatClient: ChatClient,\n    threadId: string,\n    topicName: string,\n    setIsSavingTopicName: React.Dispatch<boolean>\n  ) => void;\n};\n\nexport type SidePanelDispatchProps = {\n  setContosoUsers: (users: any) => SetContosoUsersAction;\n  removeChatParticipantById: (userId: string) => void;\n};\n\nconst mapStateToProps = (state: State): SidePanelProps => ({\n  identity: state.contosoClient.user.identity,\n  chatParticipants: state.threadMembers.threadMembers,\n  users: state.contosoClient.users,\n  existsTopicName: state.thread.topic !== GUID_FOR_INITIAL_TOPIC_NAME,\n  topic: state.thread.topic,\n  threadId: state.thread.threadId,\n  chatClient: state.contosoClient.chatClient,\n  updateThreadTopicName: (\n    chatClient: ChatClient,\n    threadId: string,\n    topicName: string,\n    setIsSavingTopicName: React.Dispatch<boolean>\n  ) => {\n    updateThreadTopicName(chatClient, threadId, topicName, setIsSavingTopicName);\n  }\n});\n\nconst mapDispatchToProps = (dispatch: any): SidePanelDispatchProps => ({\n  setContosoUsers: (users: any) => setContosoUsers(users),\n  removeChatParticipantById: async (userId: string) => {\n    dispatch(removeThreadMemberByUserId(userId));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidePanel);\n","import { mergeStyles } from '@fluentui/react';\n\nconst chatScreenContainerStyle = mergeStyles({\n  height: '100%',\n  width: '100%'\n});\n\nconst chatScreenBottomContainerStyle = mergeStyles({\n  height: '100%',\n  width: '100%',\n  maxHeight: '100%',\n  overflow: 'auto'\n});\n\nexport { chatScreenContainerStyle, chatScreenBottomContainerStyle };\n","import { connect } from 'react-redux';\n\nimport ChatScreen from '../components/ChatScreen';\nimport { State } from '../core/reducers';\n\nconst mapStateToProps = (state: State) => ({\n  isRemoved: state.threadMembers.isRemoved\n});\n\nexport default connect(mapStateToProps)(ChatScreen);\n","import { Stack } from '@fluentui/react';\nimport React, { useEffect, useState } from 'react';\n\nimport ChatArea from '../containers/ChatArea';\nimport ChatHeader from '../containers/ChatHeader';\nimport SidePanel from '../containers/SidePanel';\nimport { chatScreenBottomContainerStyle, chatScreenContainerStyle } from './styles/ChatScreen.styles';\nimport { SidePanelTypes } from './SidePanel';\n\ninterface ChatScreenProps {\n  leaveChatHandler(): void;\n  removedFromThreadHandler(): void;\n  startCallHandler() : void;\n  isRemoved: boolean;\n}\n\nexport default (props: ChatScreenProps): JSX.Element => {\n  // People pane will be visible when a chat is joined if the window width is greater than 600\n  const [selectedPane, setSelectedPane] = useState(\n    window.innerWidth > 600 ? SidePanelTypes.People : SidePanelTypes.None\n  );\n\n  const { leaveChatHandler, isRemoved, removedFromThreadHandler, startCallHandler } = props;\n\n  // when the screen first loads we want to put focus on the sendbox\n  useEffect(() => {\n    document.getElementById('sendbox')?.focus();\n  }, []);\n\n  // if a user is on the chat screen and they are removed from the chat thread\n  // we want to move them to the removedFromThread screen\n  useEffect(() => {\n    if (isRemoved) {\n      removedFromThreadHandler();\n    }\n  }, [isRemoved, removedFromThreadHandler]);\n\n  return (\n    <Stack className={chatScreenContainerStyle}>\n      <ChatHeader leaveChatHandler={leaveChatHandler} selectedPane={selectedPane} setSelectedPane={setSelectedPane} startCallHandler={startCallHandler}/>\n      <Stack className={chatScreenBottomContainerStyle} horizontal={true}>\n        <ChatArea />\n        <Stack.Item grow disableShrink>\n          <SidePanel selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\n        </Stack.Item>\n      </Stack>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport { TextField } from '@fluentui/react';\n\nimport {\n  inputBoxStyle,\n  inputBoxTextStyle,\n  TextFieldStyleProps,\n  inputBoxWarningStyle,\n  labelFontStyle,\n  warningStyle\n} from './styles/ConfigurationScreen.styles';\nimport { MAXIMUM_LENGTH_OF_NAME, ENTER_KEY } from '../constants';\n\ninterface DisplayNameFieldProps {\n  setName(name: string): void;\n  setEmptyWarning(isEmpty: boolean): void;\n  setNameLengthExceedLimit(isNameLengthExceedLimit: boolean): void;\n  validateName(): void;\n  isEmpty: boolean;\n  isNameLengthExceedLimit: boolean;\n}\n\nexport default (props: DisplayNameFieldProps): JSX.Element => {\n  const onNameTextChange = (event: any) => {\n    props.setName(event.target.value);\n    if (!event.target.value) {\n      props.setEmptyWarning(true);\n    } else if (event.target.value.length > MAXIMUM_LENGTH_OF_NAME) {\n      props.setNameLengthExceedLimit(true);\n    } else {\n      props.setEmptyWarning(false);\n      props.setNameLengthExceedLimit(false);\n    }\n  };\n\n  return (\n    <div>\n      <div className={labelFontStyle}>Name</div>\n      <TextField\n        autoComplete=\"off\"\n        inputClassName={inputBoxTextStyle}\n        ariaLabel=\"Choose your name\"\n        borderless={true}\n        className={props.isEmpty || props.isNameLengthExceedLimit ? inputBoxWarningStyle : inputBoxStyle}\n        onChange={onNameTextChange}\n        id=\"name\"\n        placeholder=\"Enter your name\"\n        onKeyDown={(ev) => {\n          if (ev.which === ENTER_KEY) {\n            props.validateName();\n          }\n        }}\n        styles={TextFieldStyleProps}\n      />\n      {(props.isEmpty && (\n        <div role=\"alert\" className={warningStyle}>\n          {' '}\n          Name cannot be empty{' '}\n        </div>\n      )) ||\n        (props.isNameLengthExceedLimit && (\n          <div role=\"alert\" className={warningStyle}>\n            {' '}\n            Name cannot be over 10 characters{' '}\n          </div>\n        ))}\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\n\nimport ConfigurationScreen from '../components/ConfigurationScreen';\nimport { addUserToThread, isValidThread } from '../core/sideEffects';\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setup: async (displayName: string, emoji: string) => {\n    dispatch(addUserToThread(displayName, emoji));\n  },\n  isValidThread: async (threadId: string) => dispatch(isValidThread(threadId))\n});\n\nexport default connect(undefined, mapDispatchToProps)(ConfigurationScreen);\n","import { PrimaryButton, Stack, Spinner } from '@fluentui/react';\nimport { ChatIcon } from '@fluentui/react-icons-northstar';\nimport React, { useEffect, useState } from 'react';\nimport { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';\n\nimport { buttonStyle, chatIconStyle, mainContainerStyle } from './styles/ConfigurationScreen.styles';\nimport {\n  labelFontStyle,\n  largeAvatarContainerStyle,\n  largeAvatarStyle,\n  leftPreviewContainerStyle,\n  namePreviewStyle,\n  responsiveLayoutStyle,\n  rightInputContainerStyle,\n  smallAvatarContainerStyle,\n  smallAvatarStyle,\n  startChatButtonTextStyle\n} from './styles/ConfigurationScreen.styles';\nimport { CAT, MOUSE, KOALA, OCTOPUS, MONKEY, FOX, getThreadId } from '../utils/utils';\nimport DisplayNameField from './DisplayNameField';\nimport { MAXIMUM_LENGTH_OF_NAME } from '../constants';\n\nexport interface ConfigurationScreenProps {\n  joinChatHandler(): void;\n  setup(displayName: string, emoji: string): void;\n  isValidThread(threadId: string | null): any;\n}\n\nexport default (props: ConfigurationScreenProps): JSX.Element => {\n  const spinnerLabel = 'Initializing chat client...';\n\n  const avatarsList = [CAT, MOUSE, KOALA, OCTOPUS, MONKEY, FOX];\n  const [name, setName] = useState('');\n\n  const [emptyWarning, setEmptyWarning] = useState(false);\n\n  const [isNameLengthExceedLimit, setNameLengthExceedLimit] = useState(false);\n\n  const [selectedAvatar, setSelectedAvatar] = useState(CAT);\n\n  const [isJoining, setIsJoining] = useState(false);\n\n  const [isValidThread, setIsValidThread] = useState<boolean | undefined>(undefined);\n\n  const { joinChatHandler, setup } = props;\n\n  const onAvatarChange = (newAvatar: string) => {\n    setSelectedAvatar(newAvatar);\n  };\n\n  const validateName = () => {\n    if (!name) {\n      setEmptyWarning(true);\n      setNameLengthExceedLimit(false);\n    } else if (name.length > MAXIMUM_LENGTH_OF_NAME) {\n      setEmptyWarning(false);\n      setNameLengthExceedLimit(true);\n    } else {\n      setEmptyWarning(false);\n      setNameLengthExceedLimit(false);\n      if (!isJoining) {\n        setup(name, selectedAvatar);\n        setIsJoining(true);\n      }\n    }\n  };\n\n  const isValidThreadProp = props.isValidThread;\n\n  useEffect(() => {\n    const isValidThread = async () => {\n      if (await isValidThreadProp(getThreadId())) {\n        setIsValidThread(true);\n      } else {\n        setIsValidThread(false);\n      }\n    };\n    isValidThread();\n    document.getElementById('🐱')?.focus();\n  }, [isValidThreadProp]);\n\n  const invalidChatThread = () => {\n    return (\n      <div>\n        <p>thread Id is not valid</p>\n      </div>\n    );\n  };\n\n  const joinChatLoading = () => {\n    return <Spinner label={spinnerLabel} ariaLive=\"assertive\" labelPosition=\"top\" />;\n  };\n\n  const joinChatArea = () => {\n    return (\n      <div>\n        <Stack className={responsiveLayoutStyle} horizontal={true} horizontalAlign=\"center\" verticalAlign=\"center\">\n          <Stack\n            className={leftPreviewContainerStyle}\n            horizontal={false}\n            verticalAlign=\"center\"\n            horizontalAlign=\"center\"\n            tokens={{ childrenGap: 13 }}\n          >\n            <div className={largeAvatarContainerStyle(selectedAvatar)}>\n              <div className={largeAvatarStyle}>{selectedAvatar}</div>\n            </div>\n            <div aria-label=\"Display name\" className={namePreviewStyle(name !== '')}>\n              {name !== '' ? name : 'Name'}\n            </div>\n          </Stack>\n          <Stack className={rightInputContainerStyle} horizontal={false} tokens={{ childrenGap: 20 }}>\n            <div>\n              <div className={labelFontStyle}>Avatar</div>\n              <FocusZone direction={FocusZoneDirection.horizontal}>\n                <Stack role=\"list\" horizontal={true} tokens={{ childrenGap: 4 }}>\n                  {avatarsList.map((avatar, index) => (\n                    <div\n                      role=\"listitem\"\n                      id={avatar}\n                      key={index}\n                      tabIndex={0}\n                      data-is-focusable={true}\n                      className={smallAvatarContainerStyle(avatar, selectedAvatar)}\n                      onFocus={() => onAvatarChange(avatar)}\n                    >\n                      <div className={smallAvatarStyle}>{avatar}</div>\n                    </div>\n                  ))}\n                </Stack>\n              </FocusZone>\n            </div>\n            <DisplayNameField\n              setName={setName}\n              setEmptyWarning={setEmptyWarning}\n              setNameLengthExceedLimit={setNameLengthExceedLimit}\n              validateName={validateName}\n              isEmpty={emptyWarning}\n              isNameLengthExceedLimit={isNameLengthExceedLimit}\n            />\n            <div>\n              <PrimaryButton\n                id=\"join\"\n                className={buttonStyle}\n                onClick={() => {\n                  validateName();\n                  if (emptyWarning === false && isNameLengthExceedLimit === false) {\n                    joinChatHandler();\n                  }\n                }}\n              >\n                <ChatIcon className={chatIconStyle} size=\"medium\" />\n                <div className={startChatButtonTextStyle}>Join chat</div>\n              </PrimaryButton>\n            </div>\n          </Stack>\n        </Stack>\n      </div>\n    );\n  };\n\n  const configurationScreen = () => {\n    return (\n      <Stack className={mainContainerStyle} horizontalAlign=\"center\" verticalAlign=\"center\">\n        {isValidThread === false ? invalidChatThread() : joinChatArea()}\n      </Stack>\n    );\n  };\n\n  return isJoining ? joinChatLoading() : configurationScreen();\n};\n","import { IToggleStyles, IStackTokens, mergeStyles, IImageStyles, getTheme } from '@fluentui/react';\n\nconst palette = getTheme().palette;\nexport const toggleStyle: Partial<IToggleStyles> = {\n  root: { marginBottom: 0 }\n};\nexport const imgStyles: Partial<IImageStyles> = {\n  root: { width: '10rem', height: '10.5rem' }\n};\nexport const toggleButtonsBarToken: IStackTokens = {\n  childrenGap: '0.625rem',\n  padding: '0.625rem'\n};\nexport const localPreviewContainerStyle = mergeStyles({\n  maxWidth: '25rem',\n  minWidth: '12.5rem',\n  width: '100%',\n  height: '100%',\n  maxHeight: '18.75rem',\n  minHeight: '12.5rem',\n  background: palette.neutralLighter,\n  color: palette.neutralPrimaryAlt\n});\nexport const toggleButtonsBarStyle = mergeStyles({\n  height: '2.8125rem',\n  width: '100%',\n  backgroundColor: palette.neutralQuaternaryAlt\n});\nexport const localPreviewStyle = mergeStyles({\n  width: '100%',\n  height: '100%',\n  maxHeight: '15.9375rem'\n});\n","import { IStackTokens, mergeStyles, IDropdownStyles } from '@fluentui/react';\n\nexport const mainStackTokens: IStackTokens = {\n  childrenGap: '1.5rem'\n};\nexport const micStackTokens: IStackTokens = {\n  childrenGap: '0.75rem'\n};\nexport const dropDownStyles: Partial<IDropdownStyles> = {\n  caretDownWrapper: {\n    height: '2.5rem',\n    lineHeight: '2.5rem'\n  },\n  dropdownItem: {\n    fontWeight: 600,\n    fontSize: '0.875rem',\n    height: '2.5rem'\n  },\n  dropdown: { height: '2.5rem' },\n  title: {\n    fontWeight: 600,\n    fontSize: '0.875rem',\n    height: '2.5rem',\n    lineHeight: '2.3125rem'\n  },\n  label: {\n    fontWeight: 600,\n    fontSize: '0.875rem'\n  }\n};\nexport const localSettingsContainer = mergeStyles({\n  width: '100%',\n  maxWidth: '18.75rem',\n  minWidth: '12.5rem',\n  maxHeight: '14.125rem',\n  marginTop: '2.125rem'\n});\n","\nimport React from 'react';\nimport { Stack, Dropdown, IDropdownOption } from '@fluentui/react';\nimport { VideoDeviceInfo, AudioDeviceInfo, DeviceManager } from '@azure/communication-calling';\nimport { localSettingsContainer, dropDownStyles, micStackTokens, mainStackTokens } from './styles/LocalSettings.styles';\n\nexport interface LocalSettingsProps {\n  deviceManager: DeviceManager;\n  videoDeviceList: VideoDeviceInfo[];\n  audioDeviceList: AudioDeviceInfo[];\n  videoDeviceInfo: VideoDeviceInfo;\n  audioDeviceInfo: AudioDeviceInfo;\n  setVideoDeviceInfo(device: VideoDeviceInfo): void;\n  setAudioDeviceInfo(device: AudioDeviceInfo): void;\n}\n\nexport default (props: LocalSettingsProps): JSX.Element => {\n  const defaultPlaceHolder = 'Select an option';\n  const cameraLabel = 'Camera';\n  const micLabel = 'Microphone';\n\n  const getDropDownList = (list: Array<VideoDeviceInfo | AudioDeviceInfo>): IDropdownOption[] => {\n    return list.map((item) => ({\n      val: item,\n      key: item.id,\n      text: item.name === '' ? item.deviceType : item.name\n    }));\n  };\n  return (\n    <Stack className={localSettingsContainer} tokens={mainStackTokens}>\n      <Dropdown\n        placeholder={defaultPlaceHolder}\n        label={cameraLabel}\n        options={getDropDownList(props.videoDeviceList)}\n        styles={dropDownStyles}\n        disabled={props.videoDeviceList.length === 0}\n        defaultSelectedKey={props.videoDeviceInfo ? props.videoDeviceInfo.id : ''}\n        onChange={(...args): void => {\n          const index = args[2] ?? 0;\n          props.setVideoDeviceInfo(props.videoDeviceList[index]);\n        }}\n      />\n      <Stack tokens={micStackTokens}>\n        <Dropdown\n          placeholder={defaultPlaceHolder}\n          label={micLabel}\n          styles={dropDownStyles}\n          disabled={props.audioDeviceList.length === 0}\n          options={getDropDownList(props.audioDeviceList)}\n          defaultSelectedKey={props.audioDeviceInfo ? props.audioDeviceInfo.id : ''}\n          onChange={(...args): void => {\n            const index = args[2] ?? 0;\n            props.setAudioDeviceInfo(props.audioDeviceList[index]);\n            props.deviceManager.selectMicrophone(props.audioDeviceList[index]);\n          }}\n        />\n      </Stack>\n    </Stack>\n  );\n};\n","import { mergeStyles, IStackTokens } from '@fluentui/react';\n\nexport const configurationStackTokens: IStackTokens = {\n  childrenGap: '3rem'\n};\nexport const videoCameraIconStyle = mergeStyles({\n  marginRight: '0.375rem',\n  fontSize: '1.375rem'\n});\nexport const buttonStyle = mergeStyles({\n  fontWeight: 600,\n  fontSize: '0.875rem', // 14px\n  height: '2.75rem',\n  width: '100%',\n  marginTop: '2.125rem',\n  maxWidth: '18.75rem',\n  minWidth: '12.5rem'\n});\nexport const mainContainerStyle = mergeStyles({\n  maxWidth: '46.875rem',\n  width: '100%',\n  height: '100%',\n  selectors: {\n    '@media (max-width: 750px)': {\n      padding: '0.625rem',\n      height: '100%'\n    }\n  }\n});\nexport const localSettingsContainerStyle = mergeStyles({\n  width: '100%',\n  maxWidth: '18.75rem'\n});\nexport const fullScreenStyle = mergeStyles({\n  height: '100%',\n  width: '100%'\n});\nexport const verticalStackStyle = mergeStyles({\n  height: '100%',\n  width: '100%',\n  justifyContent: 'space-evenly'\n});\nexport const localVideoWrapperStyle = mergeStyles({\n  minWidth: '12.5rem'\n});\n\nexport const inputBoxStyle = mergeStyles({\n  boxSizing: 'border-box',\n  height: '2.5rem',\n  width: '18.75rem',\n  border: '1px solid #605e5c',\n  borderRadius: '2px',\n  backgroundColor: '#FFFFFF'\n});\n\nexport const inputBoxTextStyle = mergeStyles({\n  fontSize: '0.875rem',\n  fontWeight: 600,\n  lineHeight: '1.5rem',\n  '::-webkit-input-placeholder': {\n    fontSize: '0.875rem',\n    fontWeight: 600\n  },\n  '::-moz-placeholder': {\n    fontSize: '0.875rem',\n    fontWeight: 600\n  },\n  ':-moz-placeholder': {\n    fontSize: '0.875rem',\n    fontWeight: 600\n  }\n});\n\nexport const inputBoxWarningStyle = mergeStyles({\n  boxSizing: 'border-box',\n  height: '2.5rem',\n  width: '18.75rem',\n  border: '1px solid #e81123',\n  borderRadius: '2px',\n  backgroundColor: '#FFFFFF',\n  fontSize: '0.875rem'\n});\n\nexport const labelFontStyle = mergeStyles({\n  fontSize: '0.875rem',\n  fontWeight: 600,\n  color: 'rgb(50, 49, 48)',\n  boxSizing: 'border-box',\n  boxShadow: 'none',\n  margin: 0,\n  display: 'inline-block',\n  padding: '5px 0px',\n  overflowWrap: 'break-word'\n});\n\nexport const warningStyle = mergeStyles({\n  width: '18.75rem',\n  backgroundColor: '#FFFFFF',\n  marginTop: '0.188rem',\n  marginBottom: '0.188rem',\n  marginLeft: '0.188rem',\n  color: '#e81123',\n  fontSize: '.7375rem',\n  fontWeight: '400'\n});\n","import React from 'react';\nimport { TextField } from '@fluentui/react';\n\nimport {\n  inputBoxStyle,\n  inputBoxTextStyle,\n  inputBoxWarningStyle,\n  labelFontStyle,\n  warningStyle\n} from './styles/CallConfigurationScreen.styles';\n\ninterface DisplayNameFieldProps {\n  setName(name: string): void;\n  name: string;\n  setEmptyWarning(isEmpty: boolean): void;\n  isEmpty: boolean;\n}\n\nconst TextFieldStyleProps = {\n  wrapper: {\n    height: '2.3rem'\n  },\n  fieldGroup: {\n    height: '2.3rem'\n  }\n};\n\nexport default (props: DisplayNameFieldProps): JSX.Element => {\n  const onNameTextChange = (event: any): void => {\n    props.setName(event.target.value);\n    if (event.target.value) {\n      props.setEmptyWarning(false);\n    } else {\n      props.setEmptyWarning(true);\n    }\n  };\n\n  return (\n    <div>\n      <div className={labelFontStyle}>Name</div>\n      <TextField\n        autoComplete=\"off\"\n        inputClassName={inputBoxTextStyle}\n        ariaLabel=\"Choose your name\"\n        borderless={true}\n        className={props.isEmpty ? inputBoxWarningStyle : inputBoxStyle}\n        onChange={onNameTextChange}\n        id=\"name\"\n        placeholder=\"Enter your name\"\n        defaultValue={props.name}\n        styles={TextFieldStyleProps}\n      />\n      {props.isEmpty && (\n        <div role=\"alert\" className={warningStyle}>\n          {' '}\n          Name cannot be empty{' '}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\r\nimport ConfigurationScreen, { ConfigurationScreenProps, TokenResponse } from '../components/CallConfigurationScreen';\r\nimport { setCallAgent, setGroup } from '../core/actions/calls';\r\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\r\nimport { initCallClient, joinGroup, registerToCallAgent, updateDevices } from '../core/sideEffects';\r\nimport { setMic } from '../core/actions/controls';\r\nimport { State } from '../core/reducers';\r\nimport {\r\n  AudioDeviceInfo,\r\n  VideoDeviceInfo,\r\n  LocalVideoStream,\r\n  CallAgent,\r\n  CallEndReason\r\n} from '@azure/communication-calling';\r\nimport { CommunicationUserToken } from '@azure/communication-identity';\r\nimport { utils } from '../utils/utils';\r\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\r\nimport { setUserId } from '../core/actions/sdk';\r\nimport { getToken } from '../core/sideEffects';\r\n\r\nconst mapStateToProps = (state: State, props: ConfigurationScreenProps) => ({\r\n  deviceManager: state.devices.deviceManager,\r\n  callAgent: state.calls.callAgent,\r\n  group: state.calls.group,\r\n  mic: state.controls.mic,\r\n  screenWidth: props.screenWidth,\r\n  audioDeviceInfo: state.devices.audioDeviceInfo,\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  videoDeviceList: state.devices.videoDeviceList,\r\n  audioDeviceList: state.devices.audioDeviceList,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission,\r\n  joinGroup: async (callAgent: CallAgent, groupId: string, localVideoStream: LocalVideoStream): Promise<void> => {\r\n    callAgent &&\r\n      (await joinGroup(\r\n        callAgent,\r\n        {\r\n          groupId\r\n        },\r\n        {\r\n          videoOptions: {\r\n            localVideoStreams: localVideoStream ? [localVideoStream] : undefined\r\n          },\r\n          audioOptions: { muted: !state.controls.mic }\r\n        }\r\n      ));\r\n  },\r\n  getToken: async (): Promise<TokenResponse> => {\r\n    const tokenResponse: CommunicationUserToken = await getToken();\r\n    const userToken = tokenResponse.token;\r\n    const userId = tokenResponse.user.communicationUserId;\r\n\r\n    const tokenCredential = new AzureCommunicationTokenCredential({\r\n      tokenRefresher: (): Promise<string> => {\r\n        return utils.getRefreshedTokenForUser(userId);\r\n      },\r\n      refreshProactively: true,\r\n      token: userToken\r\n    });\r\n\r\n    return {\r\n      tokenCredential,\r\n      userId\r\n    };\r\n  },\r\n  createCallAgent: async (\r\n    tokenCredential: AzureCommunicationTokenCredential,\r\n    displayName: string\r\n  ): Promise<CallAgent> => {\r\n    const callClient = state.sdk.callClient;\r\n\r\n    if (callClient === undefined) {\r\n      throw new Error('CallClient is not initialized');\r\n    }\r\n\r\n    const callAgent: CallAgent = await callClient.createCallAgent(tokenCredential, { displayName });\r\n    return callAgent;\r\n  }\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setMic: (mic: boolean): void => dispatch(setMic(mic)),\r\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo): void => dispatch(setAudioDeviceInfo(deviceInfo)),\r\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo): void => dispatch(setVideoDeviceInfo(deviceInfo)),\r\n  setupCallClient: (unsupportedStateHandler: () => void): void => dispatch(initCallClient(unsupportedStateHandler)),\r\n  registerToCallEvents: async (\r\n    userId: string,\r\n    callAgent: CallAgent,\r\n    endCallHandler: (reason: CallEndReason) => void\r\n  ): Promise<void> => {\r\n    dispatch(setUserId(userId));\r\n    dispatch(setCallAgent(callAgent));\r\n    dispatch(registerToCallAgent(userId, callAgent, endCallHandler));\r\n  },\r\n  setGroup: (groupId: string): void => dispatch(setGroup(groupId)),\r\n  updateDevices: (): void => dispatch(updateDevices())\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(ConfigurationScreen);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Stack, Spinner, PrimaryButton } from '@fluentui/react';\r\nimport LocalPreview from './LocalPreview';\r\nimport LocalSettings from './LocalSettings';\r\nimport CallDisplayNameField from './CallDisplayNameField';\r\nimport {\r\n  VideoDeviceInfo,\r\n  AudioDeviceInfo,\r\n  LocalVideoStream,\r\n  DeviceManager,\r\n  CallAgent,\r\n  CallEndReason\r\n} from '@azure/communication-calling';\r\nimport { VideoCameraEmphasisIcon } from '@fluentui/react-icons-northstar';\r\nimport {\r\n  videoCameraIconStyle,\r\n  configurationStackTokens,\r\n  buttonStyle,\r\n  localSettingsContainerStyle,\r\n  mainContainerStyle,\r\n  fullScreenStyle,\r\n  verticalStackStyle\r\n} from './styles/CallConfigurationScreen.styles';\r\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\r\n\r\nexport type TokenResponse = {\r\n  tokenCredential: AzureCommunicationTokenCredential;\r\n  userId: string;\r\n};\r\n\r\nexport interface ConfigurationScreenProps {\r\n  userId: string;\r\n  groupId: string;\r\n  callAgent: CallAgent;\r\n  deviceManager: DeviceManager;\r\n  setupCallClient(unsupportedStateHandler: () => void): void;\r\n  setupCallAgent(\r\n    displayName: string,\r\n    groupId: string,\r\n    afterSetupHandler: (callAgent: CallAgent, groupId: string) => void\r\n  ): void;\r\n  setGroup(groupId: string): void;\r\n  startCallHandler(): void;\r\n  unsupportedStateHandler: () => void;\r\n  callEndedHandler: (reason: CallEndReason) => void;\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  setVideoDeviceInfo(device: VideoDeviceInfo): void;\r\n  setAudioDeviceInfo(device: AudioDeviceInfo): void;\r\n  mic: boolean;\r\n  setMic(mic: boolean): void;\r\n  setLocalVideoStream(stream: LocalVideoStream | undefined): void;\r\n  localVideoRendererIsBusy: boolean;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  localVideoStream: LocalVideoStream;\r\n  screenWidth: number;\r\n  joinGroup(callAgent: CallAgent, groupId: string): void;\r\n  getToken(): Promise<TokenResponse>;\r\n  createCallAgent(tokenCredential: AzureCommunicationTokenCredential, displayName: string): Promise<CallAgent>;\r\n  registerToCallEvents(\r\n    userId: string,\r\n    callAgent: CallAgent,\r\n    endCallHandler: (reason: CallEndReason) => void\r\n  ): Promise<void>;\r\n}\r\n\r\nexport default (props: ConfigurationScreenProps): JSX.Element => {\r\n  const spinnerLabel = 'Initializing call client...';\r\n  const buttonText = 'Start call';\r\n\r\n  const createUserId = (): string => 'user' + Math.ceil(Math.random() * 1000);\r\n\r\n  const [name, setName] = useState(createUserId());\r\n  const [emptyWarning, setEmptyWarning] = useState(false);\r\n\r\n  const { groupId, setupCallClient, setGroup, unsupportedStateHandler } = props;\r\n\r\n  useEffect(() => {\r\n    setupCallClient(unsupportedStateHandler);\r\n  }, [setupCallClient, unsupportedStateHandler]);\r\n\r\n  return (\r\n    <Stack className={mainContainerStyle} horizontalAlign=\"center\" verticalAlign=\"center\">\r\n      {props.deviceManager ? (\r\n        <Stack\r\n          className={props.screenWidth > 750 ? fullScreenStyle : verticalStackStyle}\r\n          horizontal={props.screenWidth > 750}\r\n          horizontalAlign=\"center\"\r\n          verticalAlign=\"center\"\r\n          tokens={props.screenWidth > 750 ? configurationStackTokens : undefined}\r\n        >\r\n          <LocalPreview\r\n            mic={props.mic}\r\n            setMic={props.setMic}\r\n            setLocalVideoStream={props.setLocalVideoStream}\r\n            videoDeviceInfo={props.videoDeviceInfo}\r\n            audioDeviceInfo={props.audioDeviceInfo}\r\n            localVideoStream={props.localVideoStream}\r\n            videoDeviceList={props.videoDeviceList}\r\n            audioDeviceList={props.audioDeviceList}\r\n          />\r\n          <Stack className={localSettingsContainerStyle}>\r\n            <CallDisplayNameField setName={setName} name={name} setEmptyWarning={setEmptyWarning} isEmpty={emptyWarning} />\r\n            <div>\r\n              <LocalSettings\r\n                videoDeviceList={props.videoDeviceList}\r\n                audioDeviceList={props.audioDeviceList}\r\n                audioDeviceInfo={props.audioDeviceInfo}\r\n                videoDeviceInfo={props.videoDeviceInfo}\r\n                setVideoDeviceInfo={props.setVideoDeviceInfo}\r\n                setAudioDeviceInfo={props.setAudioDeviceInfo}\r\n                deviceManager={props.deviceManager}\r\n              />\r\n            </div>\r\n            <div>\r\n              <PrimaryButton\r\n                className={buttonStyle}\r\n                onClick={async (): Promise<void> => {\r\n                  if (!name) {\r\n                    setEmptyWarning(true);\r\n                  } else {\r\n                    setEmptyWarning(false);\r\n                    //1. Retrieve a token\r\n                    const { tokenCredential, userId } = await props.getToken();\r\n                    //2. Initialize the call agent\r\n                    const callAgent = await props.createCallAgent(tokenCredential, name);\r\n                    //3. Register for calling events\r\n                    props.registerToCallEvents(userId, callAgent, props.callEndedHandler);\r\n                    //4. Join the call\r\n                    await props.joinGroup(callAgent, groupId);\r\n                    props.startCallHandler();\r\n                    setGroup(groupId);\r\n                  }\r\n                }}\r\n              >\r\n                <VideoCameraEmphasisIcon className={videoCameraIconStyle} size=\"medium\" />\r\n                {buttonText}\r\n              </PrimaryButton>\r\n            </div>\r\n          </Stack>\r\n        </Stack>\r\n      ) : (\r\n        <Spinner label={spinnerLabel} ariaLive=\"assertive\" labelPosition=\"top\" />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n","import { IStackTokens, mergeStyles } from '@fluentui/react';\n\nconst mainStackTokens: IStackTokens = {\n  childrenGap: 44\n};\n\nconst buttonsStackTokens: IStackTokens = {\n  childrenGap: 12\n};\n\nconst upperStackTokens: IStackTokens = {\n  childrenGap: 24\n};\nconst endCallContainerStyle = mergeStyles({\n  width: 330\n});\n\nconst endCallTitleStyle = mergeStyles({\n  fontWeight: 600,\n  fontSize: '1.375rem' // 22px\n});\n\nconst buttonStyle = mergeStyles({\n  fontWeight: 600,\n  height: '2.5rem',\n  width: '9.875rem',\n  fontSize: '0.875rem', // 14px\n  padding: 0\n});\n\nconst videoCameraIconStyle = mergeStyles({\n  marginRight: '0.375rem',\n  fontSize: '1.375rem' // 22px\n});\n\nconst bottomStackFooterStyle = mergeStyles({\n  color: 'rgb(0,0,0)',\n  fontSize: '0.875rem' // 14px\n});\n\nconst buttonTextStyle = mergeStyles({\n  fontSize: '0.875rem' // 14px\n});\n\nexport {\n  mainStackTokens,\n  buttonsStackTokens,\n  upperStackTokens,\n  endCallContainerStyle,\n  endCallTitleStyle,\n  buttonStyle,\n  videoCameraIconStyle,\n  bottomStackFooterStyle,\n  buttonTextStyle\n};\n","import { DefaultButton, PrimaryButton, Stack } from '@fluentui/react';\nimport { ChatIcon } from '@fluentui/react-icons-northstar';\nimport React, { useState } from 'react';\n\nimport {\n  buttonsStackTokens,\n  buttonStyle,\n  endCallContainerStyle,\n  endCallTitleStyle,\n  mainStackTokens,\n  upperStackTokens,\n  videoCameraIconStyle,\n  buttonTextStyle\n} from './styles/EndChat.styles';\n\nexport interface EndCallProps {\n  rejoinHandler(): void;\n  homeHandler(): void;\n}\n\nexport default (props: EndCallProps): JSX.Element => {\n  const leftCall = 'You left the chat';\n  const goHomePage = 'Go to homepage';\n  const rejoinChat = 'Rejoin chat';\n  const rejoining = 'Rejoining...';\n\n  const [isRejoiningThread, setIsRejoiningThread] = useState(false);\n\n  const rejoinThread = async () => {\n    if (!isRejoiningThread) {\n      setIsRejoiningThread(true);\n      props.rejoinHandler();\n    }\n  };\n\n  return (\n    <Stack verticalAlign=\"center\" tokens={mainStackTokens} className={endCallContainerStyle}>\n      <Stack tokens={upperStackTokens}>\n        <div tabIndex={0} className={endCallTitleStyle}>\n          {leftCall}\n        </div>\n        <Stack horizontal tokens={buttonsStackTokens}>\n          <PrimaryButton\n            disabled={isRejoiningThread}\n            className={buttonStyle}\n            onClick={async () => {\n              await rejoinThread();\n            }}\n          >\n            <ChatIcon className={videoCameraIconStyle} size=\"medium\" />\n            <div className={buttonTextStyle}>{isRejoiningThread ? rejoining : rejoinChat}</div>\n          </PrimaryButton>\n          <DefaultButton className={buttonStyle} onClick={props.homeHandler}>\n            <div className={buttonTextStyle}> {goHomePage}</div>\n          </DefaultButton>\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n};\n","import { DefaultButton, Stack } from '@fluentui/react';\nimport React from 'react';\n\nimport {\n  buttonsStackTokens,\n  buttonStyle,\n  endCallContainerStyle,\n  endCallTitleStyle,\n  mainStackTokens,\n  upperStackTokens\n} from './styles/EndChat.styles';\n\nexport interface RemovedFromThreadProps {\n  homeHandler(): void;\n}\n\nexport default (props: RemovedFromThreadProps): JSX.Element => {\n  const leftCall = 'You are no longer a participant for the chat thread.';\n  const goHomePage = 'Go to homepage';\n\n  return (\n    <Stack verticalAlign=\"center\" tokens={mainStackTokens} className={endCallContainerStyle}>\n      <Stack tokens={upperStackTokens}>\n        <div tabIndex={0} className={endCallTitleStyle}>\n          {leftCall}\n        </div>\n        <Stack horizontal tokens={buttonsStackTokens}>\n          <DefaultButton className={buttonStyle} onClick={props.homeHandler}>\n            {goHomePage}\n          </DefaultButton>\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n};\n","import { getTheme, IStackTokens, mergeStyles } from '@fluentui/react';\n\nconst palette = getTheme().palette;\n\nconst imgStyle = mergeStyles({\n  width: '26.813rem',\n  height: '20.125rem',\n  selectors: {\n    '@media (max-width: 53.438rem)': {\n      display: 'none'\n    }\n  }\n});\n\nconst containerTokens: IStackTokens = {\n  childrenGap: 55\n};\n\nconst upperStackTokens: IStackTokens = {\n  childrenGap: 42\n};\n\nconst nestedStackTokens: IStackTokens = {\n  childrenGap: 12\n};\n\nconst listStyle = mergeStyles({\n  listStyleType: 'none',\n  paddingLeft: '0px',\n  fontSize: '0.875rem' // 14px\n});\n\nconst iconStyle = mergeStyles({\n  marginRight: 7,\n  color: palette.themePrimary\n});\n\nconst headerStyle = mergeStyles({\n  fontWeight: 600,\n  fontSize: '2.25rem', // 36px\n  maxWidth: '23.188rem'\n});\n\nconst videoCameraIconStyle = mergeStyles({\n  marginRight: '0.375rem',\n  fontSize: '1.375rem' // 22px\n});\n\nconst buttonStyle = mergeStyles({\n  fontWeight: 600,\n  fontSize: '0.875rem', // 14px\n  width: 'fit-content',\n  height: '2.5rem',\n  borderRadius: 3,\n  selectors: {\n    '@media (max-width: 53.438rem)': {\n      padding: '0.625rem'\n    }\n  }\n});\n\nconst upperStackStyle = mergeStyles({\n  selectors: {\n    '@media (max-width: 53.438rem)': {\n      padding: '0.625'\n    }\n  }\n});\n\nconst moreInfoStyle = mergeStyles({\n  color: '#303030',\n  opacity: 0.8,\n  marginTop: '0.625rem',\n  fontSize: '0.75rem', // 12px\n  fontWeight: 400\n});\n\nconst startChatTextStyle = mergeStyles({\n  fontSize: '0.875rem' // 14px\n});\n\nexport {\n  imgStyle,\n  containerTokens,\n  upperStackTokens,\n  nestedStackTokens,\n  listStyle,\n  iconStyle,\n  headerStyle,\n  videoCameraIconStyle,\n  buttonStyle,\n  upperStackStyle,\n  moreInfoStyle,\n  startChatTextStyle\n};\n","import { Image, PrimaryButton, Stack, IImageStyles, Spinner } from '@fluentui/react';\nimport { ChatIcon } from '@fluentui/react-icons-northstar';\nimport React, { useState } from 'react';\n\nimport heroSVG from '../assets/hero.svg';\nimport {\n  buttonStyle,\n  containerTokens,\n  headerStyle,\n  imgStyle,\n  upperStackStyle,\n  upperStackTokens,\n  videoCameraIconStyle,\n  startChatTextStyle\n} from './styles/HomeScreen.styles';\n\nexport interface HomeScreenProps {\n  createThreadHandler(): void;\n}\n\nconst imageStyleProps: IImageStyles = {\n  image: {\n    height: '100%'\n  },\n  root: {}\n};\n\nexport default (props: HomeScreenProps): JSX.Element => {\n  const spinnerLabel = 'Creating a new chat thread...';\n  const imageProps = { src: heroSVG.toString() };\n  const headerTitle = 'Welcome to ConnectBox!';\n  const startChatButtonText = 'Start connecting';\n\n  const [isCreatingThread, setIsCreatingThread] = useState(false);\n\n  const onCreateThread = () => {\n    props.createThreadHandler();\n    setIsCreatingThread(true);\n  };\n\n  const creatThreadLoading = () => {\n    return <Spinner label={spinnerLabel} ariaLive=\"assertive\" labelPosition=\"top\" />;\n  };\n\n  const homeScreen = () => {\n    return (\n      <div>\n        <Stack horizontal horizontalAlign=\"center\" verticalAlign=\"center\" tokens={containerTokens}>\n          <Stack className={upperStackStyle} tokens={upperStackTokens}>\n            <div tabIndex={0} className={headerStyle}>\n              {headerTitle}\n            </div>\n            <PrimaryButton\n              id=\"startChat\"\n              role=\"main\"\n              aria-label=\"Start chat\"\n              className={buttonStyle}\n              onClick={() => {\n                onCreateThread();\n              }}\n            >\n              <ChatIcon className={videoCameraIconStyle} size=\"medium\" />\n              <div className={startChatTextStyle}>{startChatButtonText}</div>\n            </PrimaryButton>\n          </Stack>\n          <Image\n            styles={imageStyleProps}\n            alt=\"Welcome to the Azure Communication Services Chat sample app\"\n            className={imgStyle}\n            {...imageProps}\n          />\n        </Stack>\n      </div>\n    );\n  };\n\n  return isCreatingThread ? creatThreadLoading() : homeScreen();\n};\n","import { connect } from 'react-redux';\n\nimport HomeScreen from '../components/HomeScreen';\nimport { createThread } from '../core/sideEffects';\n\nconst mapStateToProps = () => ({\n  createThreadHandler: () => {\n    createThread();\n  }\n});\n\nexport default connect(mapStateToProps)(HomeScreen);\n","import { ChatClient } from '@azure/communication-chat';\n\nimport {\n  ContosoActionTypes,\n  SET_CHAT_CLIENT,\n  SET_CURRENT_USER,\n  SET_USERS,\n  Users\n} from '../actions/ContosoClientAction';\n\nexport interface User {\n  identity: string;\n  token?: string;\n  displayName: string;\n  memberRole?: String;\n}\n\nexport interface ContosoState {\n  chatClient: ChatClient | undefined;\n  user: User;\n  users: Users;\n}\n\nconst initContosoState: ContosoState = {\n  chatClient: undefined,\n  user: { identity: '', token: '', displayName: '', memberRole: '' },\n  users: {}\n};\n\nexport const ContosoReducer = (state = initContosoState, action: ContosoActionTypes) => {\n  switch (action.type) {\n    case SET_CHAT_CLIENT:\n      return {\n        ...state,\n        chatClient: action.chatClient\n      };\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        user: {\n          identity: action.identity,\n          token: action.token,\n          displayName: action.displayName,\n          memberRole: action.memberRole\n        }\n      };\n    case SET_USERS:\n      return {\n        ...state,\n        users: Object.assign({}, action.users)\n      };\n    default:\n      return state;\n  }\n};\n","import { ChatMessageReadReceipt } from '@azure/communication-chat';\n\nimport { SET_RECEIPTS, ConversationsActionTypes } from '../actions/ConversationsAction';\n\nexport interface ConversationsState {\n  receipts: ChatMessageReadReceipt[];\n}\n\nconst initConversationsState: ConversationsState = {\n  receipts: []\n};\n\nexport const ConversationsReducer = (state = initConversationsState, action: ConversationsActionTypes) => {\n  switch (action.type) {\n    case SET_RECEIPTS:\n      return {\n        ...state,\n        receipts: [...action.receipts]\n      };\n    default:\n      return state;\n  }\n};\n","import { ChatParticipant } from '@azure/communication-chat';\r\nimport { CommunicationIdentifierKind } from '@azure/communication-common';\r\n\r\nimport {\r\n  MessagesActionTypes,\r\n  SET_MESSAGES,\r\n  SET_TYPING_NOTIFICATIONS,\r\n  SET_TYPING_USERS,\r\n  SET_FAILED_MESSAGES\r\n} from '../actions/MessagesAction';\r\n\r\nexport interface MessagesState {\r\n  messages: ClientChatMessage[];\r\n  typingNotifications: any;\r\n  typingUsers: ChatParticipant[];\r\n  failedMessages: string[];\r\n}\r\n\r\n// model that allows us to track a message before its replicated on the server\r\n// it also allows us to maintain state if the message was properly sent or not\r\nexport interface ClientChatMessage {\r\n  clientMessageId?: string;\r\n  sender?: CommunicationIdentifierKind;\r\n  senderDisplayName?: string;\r\n  content?: { message?: string };\r\n  createdOn: Date;\r\n  id?: string;\r\n  failed?: boolean;\r\n}\r\n\r\nconst initMessagesState: MessagesState = {\r\n  messages: [],\r\n  typingNotifications: {},\r\n  typingUsers: [],\r\n  failedMessages: []\r\n};\r\n\r\nexport const MessagesReducer = (state = initMessagesState, action: MessagesActionTypes) => {\r\n  switch (action.type) {\r\n    case SET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: [...action.messages]\r\n      };\r\n    case SET_TYPING_NOTIFICATIONS:\r\n      return {\r\n        ...state,\r\n        typingNotifications: {\r\n          ...state.typingNotifications,\r\n          [action.id]: action.typingNotification\r\n        }\r\n      };\r\n    case SET_TYPING_USERS:\r\n      return {\r\n        ...state,\r\n        typingUsers: [...action.typingUsers]\r\n      };\r\n    case SET_FAILED_MESSAGES:\r\n      return {\r\n        ...state,\r\n        failedMessages: [...action.failedMessages]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { GUID_FOR_INITIAL_TOPIC_NAME } from '../../constants';\nimport { SET_THREAD_TOPIC_NAME, SET_THREAD_ID, ThreadActionTypes } from '../actions/ThreadAction';\n\nexport interface ThreadState {\n  topic: string;\n  threadId: string | undefined;\n}\n\nconst initThreadState: ThreadState = {\n  topic: GUID_FOR_INITIAL_TOPIC_NAME,\n  threadId: undefined\n};\n\nexport const ThreadReducer = (state = initThreadState, action: ThreadActionTypes) => {\n  switch (action.type) {\n    case SET_THREAD_TOPIC_NAME:\n      return {\n        ...state,\n        topic: action.topicName\n      };\n    case SET_THREAD_ID:\n      return {\n        ...state,\n        threadId: action.threadId\n      };\n    default:\n      return state;\n  }\n};\n","import { ChatParticipant } from '@azure/communication-chat';\n\nimport {\n  SET_THREAD_MEMBERS,\n  SET_THREAD_MEMBERS_ERROR,\n  ThreadMembersActionTypes,\n  SET_REMOVED_FROM_THREAD\n} from '../actions/ThreadMembersAction';\n\nexport interface ThreadMembersState {\n  threadMembers: ChatParticipant[];\n  error?: boolean;\n  isRemoved: boolean;\n}\n\nconst initState: ThreadMembersState = {\n  threadMembers: [],\n  error: false,\n  isRemoved: false\n};\n\nexport const ThreadMembersReducer = (state = initState, action: ThreadMembersActionTypes) => {\n  switch (action.type) {\n    case SET_THREAD_MEMBERS:\n      return {\n        ...state,\n        threadMembers: [...action.threadMembers]\n      };\n    case SET_THREAD_MEMBERS_ERROR:\n      return {\n        ...state,\n        error: true\n      };\n    case SET_REMOVED_FROM_THREAD:\n      return {\n        ...state,\n        isRemoved: action.isRemoved\n      };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from 'redux';\nimport { AudioDeviceInfo, VideoDeviceInfo, DeviceManager } from '@azure/communication-calling';\nimport {\n  SET_DEVICE_MANAGER,\n  SET_AUDIO_DEVICE_INFO,\n  SET_AUDIO_DEVICE_LIST,\n  SET_CAMERA_PERMISSION,\n  SET_MICROPHONE_PERMISSION,\n  SET_VIDEO_DEVICE_INFO,\n  SET_VIDEO_DEVICE_LIST,\n  DeviceTypes\n} from '../actions/devices';\n\nexport interface DevicesState {\n  deviceManager?: DeviceManager;\n  audioDeviceInfo?: AudioDeviceInfo;\n  videoDeviceInfo?: VideoDeviceInfo;\n  audioDeviceList: AudioDeviceInfo[];\n  videoDeviceList: VideoDeviceInfo[];\n  cameraPermission?: string;\n  microphonePermission?: string;\n}\n\nconst initialState: DevicesState = {\n  deviceManager: undefined,\n  audioDeviceInfo: undefined,\n  videoDeviceInfo: undefined,\n  audioDeviceList: [],\n  videoDeviceList: [],\n  cameraPermission: undefined,\n  microphonePermission: undefined\n};\n\nexport const devicesReducer: Reducer<DevicesState, DeviceTypes> = (\n  state = initialState,\n  action: DeviceTypes\n): DevicesState => {\n  switch (action.type) {\n    case SET_DEVICE_MANAGER:\n      return { ...state, deviceManager: action.deviceManager };\n    case SET_VIDEO_DEVICE_INFO:\n      return { ...state, videoDeviceInfo: action.videoDeviceInfo };\n    case SET_AUDIO_DEVICE_INFO:\n      return { ...state, audioDeviceInfo: action.audioDeviceInfo };\n    case SET_VIDEO_DEVICE_LIST:\n      return { ...state, videoDeviceList: action.videoDeviceList };\n    case SET_AUDIO_DEVICE_LIST:\n      return { ...state, audioDeviceList: action.audioDeviceList };\n    case SET_CAMERA_PERMISSION:\n      return { ...state, cameraPermission: action.cameraPermission };\n    case SET_MICROPHONE_PERMISSION:\n      return { ...state, microphonePermission: action.microphonePermission };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from 'redux';\nimport { ParticipantStream } from './index';\nimport { ADD_SCREENSHARE_STREAM, StreamTypes, REMOVE_SCREENSHARE_STREAM } from '../actions/streams';\nimport { DeviceTypes } from '../actions/devices';\n\nexport interface StreamsState {\n  screenShareStreams: ParticipantStream[];\n  localVideoRendererIsBusy: boolean;\n}\n\nconst initialState: StreamsState = {\n  localVideoRendererIsBusy: false,\n  screenShareStreams: []\n};\n\nexport const streamsReducer: Reducer<StreamsState, StreamTypes | DeviceTypes> = (\n  state = initialState,\n  action: StreamTypes | DeviceTypes\n): StreamsState => {\n  switch (action.type) {\n    case ADD_SCREENSHARE_STREAM:\n      const newScreenShareStream: ParticipantStream = { stream: action.stream, user: action.user };\n      return { ...state, screenShareStreams: [...state.screenShareStreams, newScreenShareStream] };\n    case REMOVE_SCREENSHARE_STREAM:\n      const screenShareStreams = state.screenShareStreams.filter(\n        (stream) => stream.stream !== action.stream && stream.user !== action.user\n      );\n      return { ...state, screenShareStreams };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from 'redux';\nimport { SET_MIC, SET_SHARE_SCREEN, ControlTypes } from '../actions/controls';\n\nexport interface ControlsState {\n  mic: boolean;\n  localVideo: boolean;\n  shareScreen: boolean;\n}\n\nconst initialState: ControlsState = {\n  mic: false,\n  localVideo: false,\n  shareScreen: false\n};\n\nexport const controlsReducer: Reducer<ControlsState, ControlTypes> = (\n  state = initialState,\n  action: ControlTypes\n): ControlsState => {\n  switch (action.type) {\n    case SET_MIC:\n      return { ...state, mic: action.mic };\n    case SET_SHARE_SCREEN:\n      return { ...state, shareScreen: action.shareScreen };\n    default:\n      return state;\n  }\n};\n","import { CallClient } from '@azure/communication-calling';\nimport { Reducer } from 'redux';\nimport { SET_USERID, SdkTypes, SET_CALL_CLIENT, SET_DISPLAY_NAME } from '../actions/sdk';\n\nexport interface SdkState {\n  userId?: string;\n  callClient?: CallClient;\n  displayName: string;\n}\n\nconst initialState: SdkState = {\n  displayName: ''\n};\n\nexport const sdkReducer: Reducer<SdkState, SdkTypes> = (state = initialState, action: SdkTypes): SdkState => {\n  switch (action.type) {\n    case SET_USERID:\n      return { ...state, userId: action.userId };\n    case SET_CALL_CLIENT:\n      return { ...state, callClient: action.callClient };\n    case SET_DISPLAY_NAME:\n      return { ...state, displayName: action.displayName };\n    default:\n      return state;\n  }\n};\n","import { Call, CallEndReason, RemoteParticipant, CallAgent } from '@azure/communication-calling';\nimport { SelectionState } from '../RemoteStreamSelector';\nimport { Reducer } from 'redux';\nimport {\n  CALL_ADDED,\n  CALL_REMOVED,\n  SET_CALL_STATE,\n  SET_GROUP,\n  SET_DOMINANT_PARTICIPANTS,\n  SET_PARTICIPANTS,\n  CallTypes,\n  SET_CALL_AGENT\n} from '../actions/calls';\n\nexport interface CallsState {\n  callAgent?: CallAgent;\n  group: string;\n  call?: Call;\n  callState: string;\n  incomingCallEndReason: CallEndReason | undefined;\n  groupCallEndReason: CallEndReason | undefined;\n  remoteParticipants: RemoteParticipant[];\n  attempts: number;\n  dominantParticipants: SelectionState[];\n}\n\nconst initialState: CallsState = {\n  callAgent: undefined,\n  call: undefined,\n  callState: 'None',\n  incomingCallEndReason: undefined,\n  groupCallEndReason: undefined,\n  remoteParticipants: [],\n  dominantParticipants: [],\n  group: '',\n  attempts: 0\n};\n\nexport const callsReducer: Reducer<CallsState, CallTypes> = (state = initialState, action: CallTypes): CallsState => {\n  switch (action.type) {\n    case SET_CALL_AGENT:\n      return { ...state, callAgent: action.callAgent };\n    case CALL_ADDED:\n      return { ...state, call: action.call };\n    case CALL_REMOVED:\n      return {\n        ...state,\n        call: undefined,\n        remoteParticipants: [],\n        incomingCallEndReason: action.incomingCallEndReason,\n        groupCallEndReason: action.groupCallEndReason\n      };\n    case SET_CALL_STATE:\n      return { ...state, callState: action.callState };\n    case SET_DOMINANT_PARTICIPANTS:\n      return { ...state, dominantParticipants: action.dominantParticipants };\n    case SET_PARTICIPANTS:\n      return { ...state, remoteParticipants: action.remoteParticipants };\n    case SET_GROUP:\n      return { ...state, group: action.group };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, Reducer } from 'redux';\n\nimport { ContosoActionTypes } from '../actions/ContosoClientAction';\nimport { ConversationsActionTypes } from '../actions/ConversationsAction';\nimport { MessagesActionTypes } from '../actions/MessagesAction';\nimport { ThreadActionTypes } from '../actions/ThreadAction';\nimport { ThreadMembersActionTypes } from '../actions/ThreadMembersAction';\nimport { ContosoReducer, ContosoState } from './ContosoClientReducers';\nimport { ConversationsReducer, ConversationsState } from './ConversationsReducers';\nimport { MessagesReducer, MessagesState } from './MessagesReducer';\nimport { ThreadReducer, ThreadState } from './ThreadReducers';\nimport { ThreadMembersReducer, ThreadMembersState } from './ThreadMembersReducers';\nimport { RemoteParticipant, RemoteVideoStream } from '@azure/communication-calling';\nimport { devicesReducer, DevicesState } from '../reducers/devices';\nimport { streamsReducer, StreamsState } from './streams';\nimport { controlsReducer, ControlsState } from './controls';\nimport { SdkState, sdkReducer } from './sdk';\nimport { CallsState, callsReducer } from './calls';\nimport { CallTypes } from '../actions/calls';\nimport { ControlTypes } from '../actions/controls';\nimport { DeviceTypes } from '../actions/devices';\nimport { SdkTypes } from '../actions/sdk';\nimport { StreamTypes } from '../actions/streams';\n\nexport interface State {\n  chat: MessagesState;\n  contosoClient: ContosoState;\n  conversations: ConversationsState;\n  thread: ThreadState;\n  threadMembers: ThreadMembersState;\n  calls: CallsState;\n  devices: DevicesState;\n  streams: StreamsState;\n  controls: ControlsState;\n  sdk: SdkState;\n}\n\nexport interface ParticipantStream {\n  user: RemoteParticipant;\n  stream: RemoteVideoStream | undefined;\n}\n\ntype TotalActions =\n  | MessagesActionTypes\n  | ContosoActionTypes\n  | ConversationsActionTypes\n  | ThreadActionTypes\n  | ThreadMembersActionTypes\n  | CallTypes \n  | ControlTypes \n  | DeviceTypes \n  | SdkTypes \n  | StreamTypes;\n\nexport const reducer : Reducer<State, TotalActions> = combineReducers({\n  chat: MessagesReducer,\n  contosoClient: ContosoReducer,\n  conversations: ConversationsReducer,\n  thread: ThreadReducer,\n  threadMembers: ThreadMembersReducer,\n  calls: callsReducer,\n  devices: devicesReducer,\n  streams: streamsReducer,\n  controls: controlsReducer,\n  sdk: sdkReducer\n});\n","import { mergeStyles, getTheme } from '@fluentui/react';\n\nconst MODERATE_RED = '#d74654';\nconst palette = getTheme().palette;\nexport const mediaControlStyles = mergeStyles({\n  height: '3.75rem',\n  padding: '0 0.8125rem',\n  display: 'inline-block',\n  borderRadius: 7,\n  overflow: 'hidden'\n});\nexport const controlButtonStyle = mergeStyles({\n  backgroundColor: palette.white,\n  width: '2rem',\n  height: '3.75rem',\n  border: '0.125rem',\n  borderRadius: 2,\n  marginRight: '0.4375rem',\n  color: palette.neutralSecondary\n});\nexport const controlButtonDisabledStyle = mergeStyles(controlButtonStyle, {\n  color: palette.neutralLight\n});\nexport const endCallButtonStyle = mergeStyles({\n  backgroundColor: MODERATE_RED,\n  width: '6.5625rem',\n  height: '2.1875rem',\n  border: '0.125rem',\n  marginRight: '0.75rem',\n  marginLeft: '0.75rem',\n  borderRadius: 2,\n  color: palette.white,\n  selectors: {\n    ':focus': { color: palette.white },\n    ':hover': { color: palette.white },\n    ':active': { color: palette.white }\n  }\n});\nexport const endCallButtonTextStyle = mergeStyles({\n  color: palette.white,\n  padding: '0.3125rem',\n  fontSize: '0.875rem',\n  lineHeight: '3.75rem'\n});\nexport const fullWidth = mergeStyles({\n  width: '100%'\n});\n","import * as React from 'react';\nimport { Stack, CommandButton } from '@fluentui/react';\nimport {\n  MicIcon,\n  MicOffIcon,\n  CallVideoIcon,\n  CallVideoOffIcon,\n  CallEndIcon,\n  CallControlPresentNewIcon,\n  CallControlCloseTrayIcon\n} from '@fluentui/react-icons-northstar';\nimport {\n  controlButtonStyle,\n  endCallButtonStyle,\n  endCallButtonTextStyle,\n  mediaControlStyles,\n  fullWidth,\n  controlButtonDisabledStyle\n} from './styles/MediaControls.styles';\nimport { ParticipantStream } from '../core/reducers';\n\nexport interface MediaControlsProps {\n  micActive: boolean;\n  screenShareActive: boolean;\n  activeScreenShareStream: ParticipantStream | undefined;\n  cameraActive: boolean;\n  cameraPermission: string;\n  microphonePermission: string;\n  localVideoRendererIsBusy: boolean;\n  compressedMode: boolean;\n  onMicChange(): void;\n  onCameraChange(): void;\n  onScreenShareChange(): void;\n  onEndCallClick(): void;\n  isLocalScreenShareSupportedInBrowser(): boolean;\n}\n\nexport default (props: MediaControlsProps): JSX.Element => {\n  const cameraActive = props.cameraPermission === 'Denied' ? false : props.cameraActive;\n  const cameraDisabled = props.cameraPermission === 'Denied';\n  const cameraOnClick = props.cameraPermission !== 'Denied' ? props.onCameraChange : undefined;\n  const micActive = props.microphonePermission === 'Denied' ? false : props.micActive;\n  const micDisabled = props.microphonePermission === 'Denied';\n  const micOnClick = props.microphonePermission !== 'Denied' ? props.onMicChange : undefined;\n  const screenShareDisabled = !!props.activeScreenShareStream;\n\n  return (\n    <Stack className={mediaControlStyles}>\n      <CommandButton\n        onKeyDownCapture={(e): void => {\n          if (e.keyCode === 13 && props.localVideoRendererIsBusy) {\n            e.preventDefault();\n          }\n        }}\n        disabled={cameraDisabled}\n        onClick={cameraOnClick}\n        className={controlButtonStyle}\n      >\n        <div className={fullWidth}>\n          {cameraActive ? <CallVideoIcon size=\"medium\" /> : <CallVideoOffIcon size=\"medium\" />}\n        </div>\n      </CommandButton>\n      <CommandButton onClick={micOnClick} disabled={micDisabled} className={controlButtonStyle}>\n        <div className={fullWidth}>{micActive ? <MicIcon size=\"medium\" /> : <MicOffIcon size=\"medium\" />}</div>\n      </CommandButton>\n      {props.isLocalScreenShareSupportedInBrowser() && (\n        <CommandButton\n          disabled={screenShareDisabled}\n          onClick={props.onScreenShareChange}\n          className={screenShareDisabled ? controlButtonDisabledStyle : controlButtonStyle}\n        >\n          <div className={fullWidth}>\n            {props.screenShareActive ? (\n              <CallControlCloseTrayIcon size=\"medium\" />\n            ) : (\n              <CallControlPresentNewIcon size=\"medium\" />\n            )}\n          </div>\n        </CommandButton>\n      )}\n      <CommandButton\n        onClick={props.onEndCallClick}\n        className={props.compressedMode ? controlButtonStyle : endCallButtonStyle}\n      >\n        <div className={fullWidth}>\n          <CallEndIcon size=\"medium\" />\n          {!props.compressedMode && <span className={endCallButtonTextStyle}>Leave</span>}\n        </div>\n      </CommandButton>\n    </Stack>\n  );\n};\n","import { mergeStyles, IStackTokens, IPersonaStyles, IButtonStyles } from '@fluentui/react';\n\nconst BLACK = '#000000';\nexport const itemStyles: Partial<IPersonaStyles> = {\n  root: {\n    minWidth: 0,\n    padding: '0 0.25rem',\n    alignSelf: 'stretch',\n    height: 'auto',\n    width: '12.5rem'\n  },\n  primaryText: {\n    color: BLACK\n  }\n};\nexport const overFlowButtonStyles: IButtonStyles = {\n  root: {\n    minWidth: 0,\n    padding: '0 0.25rem',\n    alignSelf: 'stretch',\n    height: 'auto'\n  }\n};\nexport const participantStackStyle = mergeStyles({\n  maxHeight: '100%',\n  overflow: 'auto',\n  paddingLeft: '1.125rem',\n  paddingRight: '1.125rem'\n});\nexport const iconStyle = mergeStyles({\n  margin: '0.4375rem',\n  fontSize: '1rem'\n});\nexport const participantStackTokens: IStackTokens = {\n  childrenGap: '0.625rem',\n  padding: '0.625rem'\n};\n","import * as React from 'react';\nimport { Persona, PersonaSize, Stack, IconButton, PersonaPresence, FontIcon, OverflowSet } from '@fluentui/react';\nimport {\n  itemStyles,\n  participantStackStyle,\n  participantStackTokens,\n  overFlowButtonStyles,\n  iconStyle\n} from './styles/ParticipantStack.styles';\nimport { RemoteParticipant, Call } from '@azure/communication-calling';\nimport { ParticipantStream } from '../core/reducers';\nimport { utils } from '../utils/utils';\nimport { MicIcon, MicOffIcon } from '@fluentui/react-icons-northstar';\n\nexport interface ParticipantStackProps {\n  userId: string;\n  displayName: string;\n  call: Call;\n  callState: string;\n  screenShareStreams: ParticipantStream[];\n  remoteParticipants: RemoteParticipant[];\n}\nexport interface CallParticipant {\n  key: string;\n  name: string;\n  participant: RemoteParticipant | undefined;\n  state: string;\n  isScreenSharing: boolean;\n  isSpeaking: boolean;\n}\n\nconst onRenderItem = (item: any): JSX.Element => (\n  <>\n    <Persona\n      text={item.name}\n      styles={itemStyles}\n      size={PersonaSize.size32}\n      presence={item.state === 'Connected' ? PersonaPresence.online : PersonaPresence.offline}\n    />\n    {item.isSpeaking ? <MicIcon size=\"medium\" /> : <MicOffIcon size=\"medium\" />}\n    {item.isScreenSharing && <FontIcon className={iconStyle} iconName=\"ScreenCast\" />}\n  </>\n);\nconst onRenderOverflowButton = (overflowItems: any): JSX.Element => (\n  <IconButton\n    role=\"menuitem\"\n    title=\"More options\"\n    styles={overFlowButtonStyles}\n    menuIconProps={{ iconName: 'More' }}\n    menuProps={{ items: overflowItems }}\n  />\n);\nconst getParticipants = (participants: CallParticipant[]): JSX.Element[] =>\n  participants.map((item, i) => (\n    <OverflowSet\n      key={i}\n      items={[item]}\n      role=\"menubar\"\n      vertical={false}\n      onRenderOverflowButton={onRenderOverflowButton}\n      onRenderItem={onRenderItem}\n    />\n  ));\nexport default (props: ParticipantStackProps): JSX.Element => {\n  const activeScreenShareStream = props.screenShareStreams && props.screenShareStreams.length === 1;\n  const screenShareStream = props.screenShareStreams[0];\n  const participants: CallParticipant[] = props.remoteParticipants.map((participant) => {\n    const isScreenSharing = activeScreenShareStream ? screenShareStream.user === participant : false;\n    return {\n      key: utils.getId(participant.identifier),\n      name: participant.displayName ?? utils.getId(participant.identifier),\n      participant: participant,\n      state: participant.state,\n      isScreenSharing: isScreenSharing,\n      isSpeaking: participant.isSpeaking\n    };\n  });\n  participants.push({\n    key: `${props.userId} (You)`,\n    name: `${props.displayName} (You)`,\n    participant: undefined,\n    state: 'Connected',\n    isScreenSharing: activeScreenShareStream ? utils.getId(screenShareStream.user.identifier) === props.userId : false,\n    isSpeaking: !props.call.isMuted\n  });\n  return (\n    <Stack className={participantStackStyle} tokens={participantStackTokens}>\n      {getParticipants(participants)}\n    </Stack>\n  );\n};\n","import { connect } from 'react-redux';\nimport { State } from '../core/reducers';\nimport ParticipantStack from '../components/ParticipantStack';\n\nconst mapStateToProps = (state: State) => ({\n  userId: state.sdk.userId,\n  displayName: state.calls.callAgent?.displayName,\n  call: state.calls.call,\n  callState: state.calls.callState,\n  remoteParticipants: state.calls.remoteParticipants,\n  screenShareStreams: state.streams.screenShareStreams\n});\n\nconst connector: any = connect(mapStateToProps);\nexport default connector(ParticipantStack);\n","import { IStackStyles, mergeStyles, ITextFieldStyles, IStackTokens, getTheme } from '@fluentui/react';\n\nconst palette = getTheme().palette;\nexport const fullHeightStyles: IStackStyles = {\n  root: {\n    height: '100%',\n    overflowY: 'auto'\n  }\n};\nexport const paneFooterStyles: IStackStyles = {\n  root: {\n    marginBottom: '1.25rem'\n  }\n};\nexport const paneFooterTokens: IStackTokens = {\n  childrenGap: '0.3125rem'\n};\nexport const textFieldStyles: Partial<ITextFieldStyles> = {\n  field: {\n    color: palette.neutralSecondary,\n    padding: 0\n  },\n  root: {\n    marginLeft: '1rem',\n    marginRight: '1rem'\n  },\n  fieldGroup: {\n    border: 'none'\n  }\n};\n\nexport const paneHeaderStyle = mergeStyles({\n  height: '4.3125rem'\n});\n\nexport const paneHeaderTextStyle = mergeStyles({\n  fontSize: '1.375rem',\n  fontWeight: 600,\n  width: '69px',\n  float: 'left',\n  margin: '20px'\n});\nexport const footerMainTextStyle = mergeStyles({\n  fontWeight: 600,\n  fontSize: '1rem',\n  marginLeft: '1rem',\n  marginRight: '1rem'\n});\nexport const copyLinkButtonStyle = mergeStyles({\n  fontWeight: 600,\n  fontSize: '0.875rem', // 14px\n  height: '2.5rem',\n  marginLeft: '1rem',\n  marginRight: '1rem',\n  width: '90%'\n});\nexport const copyIconStyle = mergeStyles({\n  marginRight: '0.5em'\n});\nexport const settingsContainerStyle = mergeStyles({\n  marginLeft: '1.25rem',\n  width: '15.375rem'\n});\n","import React from 'react';\nimport { Stack, Icon, PrimaryButton, TextField, Separator } from '@fluentui/react';\nimport {\n  paneFooterStyles,\n  paneFooterTokens,\n  footerMainTextStyle,\n  textFieldStyles,\n  copyLinkButtonStyle,\n  copyIconStyle\n} from './styles/CommandPanel.styles';\n\nconst invitePeopleString = 'Invite people to join';\nconst copyJoinInfoString = 'Copy join info';\n\nconst copyJoinLink = (): void => {\n  const inputElement = document.getElementById('inputText') as HTMLInputElement;\n  inputElement.select();\n  document.execCommand('copy');\n};\n\nexport default (): JSX.Element => {\n  return (\n    <Stack styles={paneFooterStyles} tokens={paneFooterTokens}>\n      <Separator />\n      <div className={footerMainTextStyle}>{invitePeopleString}</div>\n      <TextField styles={textFieldStyles} id=\"inputText\" type=\"text\" value={`${document.baseURI}`}></TextField>\n      <PrimaryButton className={copyLinkButtonStyle} onClick={copyJoinLink}>\n        <Icon iconName=\"Copy\" className={copyIconStyle} />\n        {copyJoinInfoString}\n      </PrimaryButton>\n    </Stack>\n  );\n};\n","import { mergeStyles, IPivotStyles, getTheme } from '@fluentui/react';\n\nconst headerShadow = 'rgba(0, 0, 0, 0.133) 0px 1.6px 3.6px 0px, rgba(0, 0, 0, 0.11) 0px 0.3px 0.9px 0px';\nconst palette = getTheme().palette;\nexport const pivotItemStyles: Partial<IPivotStyles> = {\n  linkIsSelected: {\n    padding: 0,\n    marginRight: 0,\n    height: '100%',\n    color: palette.themePrimary,\n    selectors: {\n      ':hover': { color: palette.themePrimary }\n    }\n  },\n  link: { padding: 0, marginRight: 0, height: '3.75rem' },\n  root: { width: '5.25rem', height: '3.75rem', display: 'inline-block', verticalAlign: 'top' }\n};\nexport const pivotContainerStyle = mergeStyles({\n  display: 'inline-block'\n});\nexport const headerContainer = mergeStyles({\n  width: '100%',\n  height: '3.875rem',\n  padding: '0.0625rem 0',\n  boxShadow: headerShadow,\n  overflow: 'hidden',\n  flexDirection: 'row',\n  justifyContent: 'flex-end',\n  alignItems: 'center',\n  marginBottom: 2\n});\nexport const headerCenteredContainer = mergeStyles(headerContainer, {\n  justifyContent: 'center'\n});\n\nexport const separatorContainerStyle = mergeStyles({\n  display: 'inline-block',\n  padding: '0 1rem',\n  height: '1.875rem'\n});\nexport const pivotItemStyle = mergeStyles({\n  padding: '0 0.8125rem'\n});\nexport const separatorStyles = {\n  root: {\n    color: palette.neutralLight,\n    width: '0.0625rem' // 1px\n  }\n};\n","import { connect } from 'react-redux';\nimport Header, { HeaderProps } from '../components/Header';\nimport { setMicrophone, setShareUnshareScreen, endCall } from '../core/sideEffects';\nimport { utils } from '../utils/utils';\nimport { Constants } from '../core/constants';\nimport { State } from '../core/reducers';\n\nconst mapStateToProps = (state: State, props: HeaderProps) => ({\n  actionable:\n    state.calls.callState === Constants.INCOMING ||\n    state.calls.callState === Constants.RINGING ||\n    state.calls.callState === Constants.CONNECTING ||\n    state.calls.callState === Constants.CONNECTED,\n  mic: state.controls.mic,\n  call: state.calls.call,\n  shareScreen: state.controls.shareScreen,\n  endCall: (): void => {\n    state.calls.call && endCall(state.calls.call, { forEveryone: false });\n    props.endCallHandler();\n  },\n  videoDeviceInfo: state.devices.videoDeviceInfo,\n  screenWidth: props.screenWidth,\n  screenShareStreams: state.streams.screenShareStreams,\n  localVideoRendererIsBusy: state.streams.localVideoRendererIsBusy,\n  cameraPermission: state.devices.cameraPermission,\n  microphonePermission: state.devices.microphonePermission\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  setMic: (mic: boolean): void => dispatch(setMicrophone(mic)),\n  setScreenShare: (screenShare: boolean): void => dispatch(setShareUnshareScreen(screenShare)),\n  // Only support Desktop -- Chrome | Edge (Chromium) | Safari\n  isLocalScreenShareSupportedInBrowser: (): boolean => {\n    return (true);\n  }\n});\n\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(Header);\n","import React, { useEffect } from 'react';\nimport { Separator, Pivot, PivotItem, Stack } from '@fluentui/react';\nimport { Call, LocalVideoStream, VideoDeviceInfo } from '@azure/communication-calling';\nimport MediaControls from './MediaControls';\nimport { CommandPanelTypes } from './CommandPanel';\nimport { UserFriendsIcon, SettingsIcon } from '@fluentui/react-icons-northstar';\nimport { Constants } from '../core/constants';\nimport {\n  headerContainer,\n  pivotItemStyles,\n  separatorContainerStyle,\n  separatorStyles,\n  pivotItemStyle,\n  headerCenteredContainer\n} from './styles/Header.styles';\nimport { ParticipantStream } from '../core/reducers';\n\nexport interface HeaderProps {\n  selectedPane: CommandPanelTypes;\n  setSelectedPane: any;\n  endCallHandler(): void;\n  actionable: boolean;\n  localVideo: boolean;\n  mic: boolean;\n  shareScreen: boolean;\n  call: Call;\n  endCall(): void;\n  screenShareStreams: ParticipantStream[];\n  activeScreenShareStream: ParticipantStream | undefined;\n  localVideoRendererIsBusy: boolean;\n  cameraPermission: string;\n  microphonePermission: string;\n  screenWidth: number;\n  setMic(mic: boolean): void;\n  setLocalVideoStream(localVideoStream: LocalVideoStream | undefined): void;\n  setScreenShare(screenShare: boolean): void;\n  isLocalScreenShareSupportedInBrowser(): boolean;\n  localVideoStream: LocalVideoStream | undefined;\n  videoDeviceInfo: VideoDeviceInfo | undefined;\n}\n\nexport default (props: HeaderProps): JSX.Element => {\n  const togglePeople = (selectedPane: string, setSelectedPane: (pane: string) => void): void => {\n    return selectedPane !== CommandPanelTypes.People\n      ? setSelectedPane(CommandPanelTypes.People)\n      : setSelectedPane(CommandPanelTypes.None);\n  };\n\n  const toggleOptions = (selectedPane: string, setSelectedPane: (pane: string) => void): void => {\n    return selectedPane !== CommandPanelTypes.Settings\n      ? setSelectedPane(CommandPanelTypes.Settings)\n      : setSelectedPane(CommandPanelTypes.None);\n  };\n\n  const handleLocalVideoOnOff = async (): Promise<void> => {\n    if (props.localVideoStream) {\n      await props.call.stopVideo(props.localVideoStream);\n      props.setLocalVideoStream(undefined);\n    } else {\n      if (props.videoDeviceInfo) {\n        const localVideoStream = new LocalVideoStream(props.videoDeviceInfo);\n        props.setLocalVideoStream(localVideoStream);\n        await props.call.startVideo(localVideoStream);\n      }\n    }\n  };\n\n  const handleMuteOnOff = (): void => {\n    props.setMic(!props.mic);\n  };\n\n  const handleScreenSharingOnOff = (): void => {\n    props.setScreenShare(!props.shareScreen);\n  };\n\n  useEffect(() => {\n    if (props.call && props.call.localVideoStreams.length === 0 && props.localVideoStream) {\n      props.call.startVideo(props.localVideoStream);\n    }\n  }, [props.call, props.localVideoStream]);\n\n  return (\n    <Stack\n      id=\"header\"\n      className={props.screenWidth > Constants.MINI_HEADER_WINDOW_WIDTH ? headerContainer : headerCenteredContainer}\n    >\n      <Pivot\n        onKeyDownCapture={(e): void => {\n          if ((e.target as HTMLElement).id === CommandPanelTypes.People && e.keyCode === 39) e.preventDefault();\n        }}\n        getTabId={(itemKey: string): string => itemKey}\n        onLinkClick={(item): void => {\n          if (!item) return;\n          if (item.props.itemKey === CommandPanelTypes.Settings)\n            toggleOptions(props.selectedPane, props.setSelectedPane);\n          if (item.props.itemKey === CommandPanelTypes.People) togglePeople(props.selectedPane, props.setSelectedPane);\n        }}\n        styles={pivotItemStyles}\n        initialSelectedKey={CommandPanelTypes.None}\n        selectedKey={props.selectedPane}\n      >\n        <PivotItem\n          itemKey={CommandPanelTypes.Settings}\n          onRenderItemLink={(): JSX.Element => (\n            <SettingsIcon\n              outline={props.selectedPane === CommandPanelTypes.Settings ? false : true}\n              size=\"medium\"\n              className={pivotItemStyle}\n            />\n          )}\n        />\n        <PivotItem\n          itemKey={CommandPanelTypes.People}\n          onRenderItemLink={(): JSX.Element => (\n            <UserFriendsIcon\n              outline={props.selectedPane === CommandPanelTypes.People ? false : true}\n              size=\"medium\"\n              className={pivotItemStyle}\n            />\n          )}\n        />\n        <PivotItem itemKey={CommandPanelTypes.None} />\n      </Pivot>\n      {props.screenWidth > Constants.MINI_HEADER_WINDOW_WIDTH && (\n        <div className={separatorContainerStyle}>\n          <Separator styles={separatorStyles} vertical={true} />\n        </div>\n      )}\n      <MediaControls\n        micActive={props.mic}\n        onMicChange={handleMuteOnOff}\n        cameraActive={props.localVideoStream !== undefined}\n        onCameraChange={handleLocalVideoOnOff}\n        screenShareActive={props.shareScreen}\n        activeScreenShareStream={props.screenShareStreams[0] ?? undefined}\n        onScreenShareChange={handleScreenSharingOnOff}\n        onEndCallClick={(): void => {\n          if (props.localVideo) handleLocalVideoOnOff();\n          props.endCall();\n        }}\n        cameraPermission={props.cameraPermission}\n        microphonePermission={props.microphonePermission}\n        localVideoRendererIsBusy={props.localVideoRendererIsBusy}\n        compressedMode={props.screenWidth <= Constants.MINI_HEADER_WINDOW_WIDTH}\n        isLocalScreenShareSupportedInBrowser={props.isLocalScreenShareSupportedInBrowser}\n      />\n    </Stack>\n  );\n};\n","import { mergeStyles, getTheme } from '@fluentui/react';\n\nconst palette = getTheme().palette;\nexport const mediaGalleryStyle = mergeStyles({\n  padding: '0.4375rem',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  border: 0,\n  borderRight: '1px solid rgba(0,0,0,0.05)',\n  borderBottom: '1px solid rgba(0,0,0,0.05)'\n});\n\nexport const substageMediaGalleryStyle = mergeStyles({\n  padding: '0.4375rem',\n  width: '100px',\n  minWidth: '100px',\n  height: '100px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  border: 0,\n  borderRight: '1px solid rgba(0,0,0,0.05)',\n  borderBottom: '1px solid rgba(0,0,0,0.05)'\n});\n\nexport const mediaGalleryGridStyle = mergeStyles({\n  height: '100%',\n  background: palette.neutralLighterAlt,\n  display: 'grid',\n  overflow: 'hidden'\n});\n\nexport const mediaGallerySubstageStyle = mergeStyles({\n  height: '8.438rem',\n  overflowX: 'auto',\n  overflowY: 'hidden'\n});\n","import { mergeStyles, getTheme } from '@fluentui/react';\n\nconst palette = getTheme().palette;\nexport const videoHint = mergeStyles({\n  backgroundColor: palette.neutralSecondary,\n  bottom: '5%',\n  height: '1.75rem',\n  boxShadow: '0 0 1px 0 rgba(0,0,0,.16)',\n  color: palette.neutralLighter,\n  fontSize: '1.25rem',\n  lineHeight: '1.0625rem',\n  textAlign: 'left',\n  left: '2%',\n  overflow: 'hidden',\n  position: 'absolute',\n  padding: '0.25rem',\n  whiteSpace: 'nowrap',\n  maxWidth: '95%',\n  borderRadius: 4,\n  textOverflow: 'ellipsis'\n});\nexport const mediaContainer = mergeStyles({\n  position: 'relative',\n  height: '100%',\n  width: '100%',\n  background: 'transparent'\n});\nexport const localVideoContainerStyle = mergeStyles(mediaContainer, {\n  width: '100%',\n  height: '100%'\n});\n","\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Image, ImageFit, Label } from '@fluentui/react';\nimport { LocalVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\nimport { videoHint, mediaContainer, localVideoContainerStyle } from './styles/StreamMedia.styles';\nimport { Constants } from '../core/constants';\nimport staticMediaSVG from '../assets/staticmedia.svg';\n\nexport interface LocalStreamMediaProps {\n  label: string;\n  stream: LocalVideoStream;\n}\n\nexport default (props: LocalStreamMediaProps): JSX.Element => {\n  const rendererViewRef = useRef<VideoStreamRendererView>();\n\n  const [activeStreamBeingRendered, setActiveStreamBeingRendered] = useState(false);\n\n  const imageProps = {\n    src: staticMediaSVG.toString(),\n    imageFit: ImageFit.contain,\n    styles: {\n      root: {\n        width: '100%',\n        height: '100%',\n        display: activeStreamBeingRendered ? 'none' : 'block'\n      }\n    }\n  };\n\n  const { stream, label } = props;\n\n  useEffect(() => {\n    (async (): Promise<void> => {\n      if (stream) {\n        const renderer: VideoStreamRenderer = new VideoStreamRenderer(stream);\n        rendererViewRef.current = await renderer.createView({ scalingMode: 'Crop', isMirrored: true });\n\n        const container = document.getElementById(Constants.LOCAL_VIDEO_PREVIEW_ID);\n\n        if (container && container.childElementCount === 0) {\n          container.appendChild(rendererViewRef.current.target);\n          setActiveStreamBeingRendered(true);\n        }\n      } else {\n        if (rendererViewRef) {\n          rendererViewRef.current?.dispose();\n          setActiveStreamBeingRendered(false);\n        }\n      }\n    })();\n\n    return (): void => {\n      if (rendererViewRef) {\n        rendererViewRef.current?.dispose();\n        rendererViewRef.current = undefined;\n        setActiveStreamBeingRendered(false);\n      }\n    };\n  }, [stream]);\n\n  return (\n    <div className={mediaContainer}>\n      <div\n        style={{ display: activeStreamBeingRendered ? 'block' : 'none' }}\n        className={localVideoContainerStyle}\n        id={Constants.LOCAL_VIDEO_PREVIEW_ID}\n      />\n      <Image {...imageProps} />\n      <Label className={videoHint}>{label}</Label>\n    </div>\n  );\n};\n","\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Label, Spinner, SpinnerSize } from '@fluentui/react';\nimport { RemoteVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\nimport { videoHint, mediaContainer } from './styles/StreamMedia.styles';\nimport { utils } from '../utils/utils';\nimport staticMediaSVG from '../assets/staticmedia.svg';\nimport { Image, ImageFit } from '@fluentui/react';\n\nexport interface RemoteStreamMediaProps {\n  label: string;\n  stream: RemoteVideoStream | undefined;\n  isParticipantStreamSelected: boolean;\n}\n\nexport default (props: RemoteStreamMediaProps): JSX.Element => {\n  const rendererViewRef = useRef<VideoStreamRendererView>();\n\n  const streamId = props.stream ? utils.getStreamId(props.label, props.stream) : `${props.label} - no stream`;\n\n  const [activeStreamBeingRendered, setActiveStreamBeingRendered] = useState(false);\n  const [showRenderLoading, setShowRenderLoading] = useState(false);\n\n  const imageProps = {\n    src: staticMediaSVG.toString(),\n    imageFit: ImageFit.contain,\n    styles: {\n      root: {\n        width: '100%',\n        height: '100%',\n        display: activeStreamBeingRendered ? 'none' : 'block'\n      }\n    }\n  };\n\n  const loadingStyle = {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n\n  const { label, stream, isParticipantStreamSelected } = props;\n\n  const renderRemoteStream = useCallback(async () => {\n    const container = document.getElementById(streamId);\n    if (container && stream && stream.isAvailable && isParticipantStreamSelected) {\n      // if we are already rendering a stream we don't want to start rendering the same stream\n      if (activeStreamBeingRendered) {\n        return;\n      }\n\n      // set the flag that a stream is being rendered\n      setActiveStreamBeingRendered(true);\n      setShowRenderLoading(true);\n      const renderer: VideoStreamRenderer = new VideoStreamRenderer(stream);\n      // this can block a really long time if we fail to be subscribed to the call and it has to retry\n      rendererViewRef.current = await renderer.createView({ scalingMode: 'Crop' });\n      setShowRenderLoading(false);\n      if (container && container.childElementCount === 0) {\n        container.appendChild(rendererViewRef.current.target);\n      }\n    } else {\n      setActiveStreamBeingRendered(false);\n\n      if (rendererViewRef.current) {\n        rendererViewRef.current.dispose();\n        rendererViewRef.current = undefined;\n      }\n    }\n  }, [\n    stream,\n    streamId,\n    isParticipantStreamSelected,\n    activeStreamBeingRendered,\n    setShowRenderLoading,\n    setActiveStreamBeingRendered\n  ]);\n\n  useEffect(() => {\n    if (!stream) {\n      return;\n    }\n\n    stream.on('isAvailableChanged', renderRemoteStream);\n\n    if (stream.isAvailable) {\n      renderRemoteStream();\n    }\n  }, [stream, isParticipantStreamSelected, renderRemoteStream]);\n\n  return (\n    <div className={mediaContainer}>\n      <div style={{ display: activeStreamBeingRendered ? 'block' : 'none' }} className={mediaContainer} id={streamId}>\n        {showRenderLoading && <Spinner style={loadingStyle} label={`Rendering stream...`} size={SpinnerSize.xSmall} />}\n      </div>\n      <Image {...imageProps} />\n      <Label className={videoHint}>{label}</Label>\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\nimport MediaGallery from '../components/MediaGallery';\nimport { State } from '../core/reducers';\n\nconst mapStateToProps = (state: State) => ({\n  userId: state.sdk.userId,\n  displayName: state.calls.callAgent?.displayName,\n  remoteParticipants: state.calls.remoteParticipants,\n  dominantParticipants: state.calls.dominantParticipants\n});\n\nconst connector: any = connect(mapStateToProps);\nexport default connector(MediaGallery);\n","import React, { useMemo, useState } from 'react';\nimport {\n  mediaGalleryGridStyle,\n  mediaGalleryStyle,\n  mediaGallerySubstageStyle,\n  substageMediaGalleryStyle\n} from './styles/MediaGallery.styles';\nimport { RemoteParticipant, LocalVideoStream } from '@azure/communication-calling';\nimport { utils } from '../utils/utils';\nimport LocalStreamMedia from './LocalStreamMedia';\nimport RemoteStreamMedia from './RemoteStreamMedia';\nimport { SelectionState } from '../core/RemoteStreamSelector';\nimport { Stack } from '@fluentui/react';\nimport { Constants } from '../core/constants';\n\nexport interface MediaGalleryProps {\n  userId: string;\n  displayName: string;\n  remoteParticipants: RemoteParticipant[];\n  localVideoStream: LocalVideoStream;\n  dominantParticipants: SelectionState[];\n}\n\nexport default (props: MediaGalleryProps): JSX.Element => {\n  const [gridCol, setGridCol] = useState(1);\n  const [gridRow, setGridRow] = useState(1);\n\n  // For now we are only going to support up to a 4x3 grid or 10 participants in a call\n  // Since this is a sample, we will just hard-code how we want the grid to scale\n  // the rows and columns for the number of users in the call\n  const rows = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3];\n  const cols = [1, 2, 2, 2, 3, 3, 3, 3, 3, 4];\n\n  if (Constants.DOMINANT_PARTICIPANTS_COUNT < 0 || Constants.DOMINANT_PARTICIPANTS_COUNT > rows.length - 1) {\n    console.warn(`Please use a value for dominant participants between 0 <= x <= ${rows.length - 1}`);\n  }\n\n  const numRemoteParticipantsToRender = Math.min(Constants.DOMINANT_PARTICIPANTS_COUNT, rows.length - 1);\n\n  const clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\n\n  const getMediaGalleryTilesForParticipants = (\n    participants: RemoteParticipant[],\n    displayName: string\n  ): JSX.Element[] => {\n    const remoteParticipantsMediaGalleryItems = participants.map((participant) => (\n      <div key={`${utils.getId(participant.identifier)}-tile`} className={mediaGalleryStyle}>\n        <RemoteStreamMedia\n          key={utils.getId(participant.identifier)}\n          stream={participant.videoStreams[0]}\n          isParticipantStreamSelected={\n            props.dominantParticipants.filter((p) => p.participantId === utils.getId(participant.identifier)).length > 0\n          }\n          label={participant.displayName ?? utils.getId(participant.identifier)}\n        />\n      </div>\n    ));\n\n    // for now we will always add the local user to the main stage\n    const localParticipantMediaGalleryItem = (\n      <div key=\"localParticipantTile\" className={mediaGalleryStyle}>\n        <LocalStreamMedia label={displayName} stream={props.localVideoStream} />\n      </div>\n    );\n\n    remoteParticipantsMediaGalleryItems.unshift(localParticipantMediaGalleryItem);\n\n    return remoteParticipantsMediaGalleryItems;\n  };\n\n  const getSubstageMediaGalleryTilesForParticipants = (participants: RemoteParticipant[]): JSX.Element[] => {\n    const remoteParticipantsMediaGalleryItems = participants.map((participant) => (\n      <div key={`${utils.getId(participant.identifier)}-tile`} className={substageMediaGalleryStyle}>\n        <RemoteStreamMedia\n          key={utils.getId(participant.identifier)}\n          stream={participant.videoStreams[0]}\n          isParticipantStreamSelected={false}\n          label={participant.displayName ?? utils.getId(participant.identifier)}\n        />\n      </div>\n    ));\n\n    return remoteParticipantsMediaGalleryItems;\n  };\n\n  // determine number of rows/columns to add to the grid\n  const numberStreamsToRender = useMemo(\n    () => clamp(props.remoteParticipants.length, 0, numRemoteParticipantsToRender),\n    [numRemoteParticipantsToRender, props.remoteParticipants.length]\n  );\n  if (cols[numberStreamsToRender] !== gridCol) {\n    if (numberStreamsToRender > cols.length - 1) {\n      throw new Error(\n        `attempting to set up a number of columns in the gallery for an unexpected number of participants ${numberStreamsToRender}`\n      );\n    }\n    setGridCol(cols[numberStreamsToRender]);\n  }\n\n  if (rows[numberStreamsToRender] !== gridRow) {\n    if (numberStreamsToRender > rows.length - 1) {\n      throw new Error(\n        `attempting to set up a number of rows in the gallery for an expected number of participants ${numberStreamsToRender}`\n      );\n    }\n    setGridRow(rows[numberStreamsToRender]);\n  }\n\n  // sort by dominance\n  const participantsToLayout = props.remoteParticipants.sort((a, b) => {\n    const isParticipantADominant =\n      props.dominantParticipants.filter((p) => p.participantId === utils.getId(a.identifier)).length > 0;\n    const isParticipantBDominant =\n      props.dominantParticipants.filter((p) => p.participantId === utils.getId(b.identifier)).length > 0;\n    if (isParticipantADominant && !isParticipantBDominant) {\n      return -1;\n    } else if (!isParticipantADominant && isParticipantBDominant) {\n      return 1;\n    }\n    return 0;\n  });\n\n  const mainStageParticipants = participantsToLayout.slice(0, numRemoteParticipantsToRender);\n  const substageParticipants = participantsToLayout.slice(numRemoteParticipantsToRender);\n  // don't show the substage if its not necessary\n  const isSubstageVisible = substageParticipants.length > 0;\n  return (\n    <Stack style={{ height: '100%' }}>\n      <div\n        id=\"video-gallery\"\n        className={mediaGalleryGridStyle}\n        style={{\n          gridTemplateRows: `repeat(${gridRow}, minmax(0, 1fr))`,\n          gridTemplateColumns: `repeat(${gridCol}, 1fr)`\n        }}\n      >\n        {getMediaGalleryTilesForParticipants(mainStageParticipants, props.displayName)}\n      </div>\n      {isSubstageVisible && (\n        <Stack horizontal className={mediaGallerySubstageStyle}>\n          {getSubstageMediaGalleryTilesForParticipants(substageParticipants)}\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n","import { mergeStyles, getTheme } from '@fluentui/react';\n\nconst palette = getTheme().palette;\nexport const fullScreenStyle = mergeStyles({\n  padding: '0.5em',\n  borderRight: '1px solid rgba(0,0,0,0.05)',\n  height: '100%',\n  width: '100%',\n  background: palette.neutralLighterAlt\n});\n\nexport const hiddenFullScreenStyle = mergeStyles({\n  display: 'none',\n  borderRight: '1px solid rgba(0,0,0,0.05)',\n  height: '100%',\n  width: '100%',\n  background: palette.neutralLighterAlt\n});\n\nexport const loadingStyle = mergeStyles({\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center'\n});\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { ParticipantStream } from '../core/reducers';\nimport { hiddenFullScreenStyle, fullScreenStyle, loadingStyle } from './styles/MediaFullScreen.styles';\nimport { RemoteVideoStream, VideoStreamRenderer, VideoStreamRendererView } from '@azure/communication-calling';\nimport { Spinner, SpinnerSize } from '@fluentui/react';\nimport { utils } from '../utils/utils';\n\nexport interface MediaFullScreenProps {\n  activeScreenShareStream: ParticipantStream;\n}\n\nexport default (props: MediaFullScreenProps): JSX.Element => {\n  const [loading, setLoading] = useState(true);\n  const fullScreenStreamMediaId = 'fullScreenStreamMediaId';\n  const rendererViewRef = useRef<VideoStreamRendererView>();\n\n  /**\n   * Start stream after DOM has rendered\n   */\n\n  const activeScreenShareStream = props.activeScreenShareStream;\n\n  const renderStreamCallback = useCallback(async () => {\n    if (activeScreenShareStream && activeScreenShareStream.stream) {\n      const stream: RemoteVideoStream = activeScreenShareStream.stream;\n      const renderer: VideoStreamRenderer = new VideoStreamRenderer(stream);\n      rendererViewRef.current = await renderer.createView({ scalingMode: 'Fit' });\n\n      const container = document.getElementById(fullScreenStreamMediaId);\n      if (container && container.childElementCount === 0) {\n        setLoading(false);\n        container.appendChild(rendererViewRef.current.target);\n      }\n    } else {\n      if (rendererViewRef) {\n        rendererViewRef.current?.dispose();\n      }\n    }\n  }, [activeScreenShareStream]);\n\n  useEffect(() => {\n    renderStreamCallback();\n  }, [renderStreamCallback]);\n\n  const displayName =\n    props.activeScreenShareStream.user.displayName ?? utils.getId(props.activeScreenShareStream.user.identifier);\n\n  return (\n    <>\n      {loading && (\n        <div className={loadingStyle}>\n          <Spinner label={`Loading ${displayName}'s screen`} size={SpinnerSize.xSmall} />\n        </div>\n      )}\n      <div id={fullScreenStreamMediaId} className={loading ? hiddenFullScreenStyle : fullScreenStyle}></div>\n    </>\n  );\n};\n","import { IStackItemStyles, IStackStyles, getTheme, mergeStyles } from '@fluentui/react';\n\nconst palette = getTheme().palette;\nexport const headerStyles: IStackItemStyles = {\n  root: {\n    width: '100%'\n  }\n};\nexport const containerStyles: IStackStyles = {\n  root: {\n    height: '100%',\n    minHeight: '9.375rem',\n    width: '100%'\n  }\n};\nexport const paneStyles: IStackItemStyles = {\n  root: {\n    width: '17.875rem'\n  }\n};\nexport const overlayStyles: IStackItemStyles = {\n  root: {\n    background: palette.white,\n    marginTop: '4rem'\n  }\n};\nexport const hiddenContainerClassName: IStackItemStyles = {\n  root: {\n    border: `solid 1px ${palette.neutralLighterAlt}`,\n    height: '100%',\n    display: 'none'\n  }\n};\nexport const activeContainerClassName: IStackItemStyles = {\n  root: {\n    border: `solid 1px ${palette.neutralLighterAlt}`,\n    height: 'calc(100% - 3px)',\n    display: 'initial',\n    width: '100%'\n  }\n};\n\nexport const loadingStyle: IStackItemStyles ={\n  root: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%'\n  }  \n};\n\nexport const chatPopupStyle: IStackItemStyles ={\n  root: {\n    display: 'none',\n    position: 'fixed',\n    bottom: '0',\n    left: '15px',\n    border: '3px solid #f1f1f1',\n  }\n};\n\nexport const messageBoxstyle: IStackItemStyles ={\n  root: {\n    \n  }\n}\n// body {box-sizing: border-box;}\n// /* The popup chat - hidden by default */\n// .chat-popup {\n\n// }\n// .message-box {\n// display: none;\n// position: fixed;\n// bottom: 0;\n// left: 15px;\n// border: 3px solid #FFFACD;\n// z-index: 9;\n// }\n// .form-container {\n// max-width: 300px;\n// padding: 10px;\n// background-color: white;\n// }\n// .form-container textarea {\n// width: 90%;\n// padding: 15px;\n// margin: 5px 0 22px 0;\n// border: none;\n// background: #e1e1e1;\n// resize: none;\n// min-height: 50px;\n// }\n// .form-container .btn {\n// background-color: #4CAF40;\n// color: white;\n// padding: 14px 18px;\n// margin-bottom:10px;\n// opacity: 0.6;\n// border: none;\n// cursor: pointer;\n// width: 100%;\n// }\n// .container {\n// border: 1px solid #dedede;\n// background-color: #F1F1F1;\n// border-radius: 3px;\n// padding: 8px;\n// margin: 8px 0;\n// }\n// .darker {\n// border-color: #ccc;\n// background-color: #ffdab9;\n// margin-left: 25px;\n// margin-right: 3px;\n// }\n// .lighter {\n// margin-right: 20px;\n// margin-left: 3px;\n// }\n// .container::after {\n// content: \"\";\n// clear: both;\n// display: table;\n// }\n// </style>\n","import { connect } from 'react-redux';\nimport GroupCall, { GroupCallProps } from '../components/GroupCall';\nimport { setMicrophone } from '../core/sideEffects';\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\nimport { AudioDeviceInfo, VideoDeviceInfo } from '@azure/communication-calling';\nimport { State } from '../core/reducers';\n\nconst mapStateToProps = (state: State, props: GroupCallProps) => ({\n  userId: state.sdk.userId,\n  callAgent: state.calls.callAgent,\n  deviceManager: state.devices.deviceManager,\n  group: state.calls.group,\n  screenWidth: props.screenWidth,\n  call: state.calls.call,\n  shareScreen: state.controls.shareScreen,\n  mic: state.controls.mic,\n  groupCallEndReason: state.calls.groupCallEndReason,\n  isGroup: (): boolean | undefined =>\n    state.calls.call && state.calls.call.direction !== 'Incoming' && !!state.calls.group,\n  remoteParticipants: state.calls.remoteParticipants,\n  callState: state.calls.callState,\n  localVideo: state.controls.localVideo,\n  screenShareStreams: state.streams.screenShareStreams,\n  videoDeviceInfo: state.devices.videoDeviceInfo,\n  audioDeviceInfo: state.devices.audioDeviceInfo,\n  videoDeviceList: state.devices.videoDeviceList,\n  audioDeviceList: state.devices.audioDeviceList,\n  cameraPermission: state.devices.cameraPermission,\n  microphonePermission: state.devices.microphonePermission\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  mute: (): void => dispatch(setMicrophone(false)),\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo): void => {\n    dispatch(setAudioDeviceInfo(deviceInfo));\n  },\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo): void => {\n    dispatch(setVideoDeviceInfo(deviceInfo));\n  }\n});\n\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(GroupCall);\n","import React, { useState } from 'react';\r\nimport { Label, Overlay, Stack } from '@fluentui/react';\r\nimport Header from '../containers/Header';\r\nimport MediaGallery from '../containers/MediaGallery';\r\nimport MediaFullScreen from './MediaFullScreen';\r\nimport CommandPanel, { CommandPanelTypes } from './CommandPanel';\r\nimport { Constants } from '../core/constants';\r\nimport {\r\n  headerStyles,\r\n  containerStyles,\r\n  paneStyles,\r\n  hiddenContainerClassName,\r\n  activeContainerClassName,\r\n  loadingStyle,\r\n  overlayStyles\r\n} from './styles/GroupCall.styles';\r\nimport {\r\n  Call,\r\n  AudioDeviceInfo,\r\n  VideoDeviceInfo,\r\n  RemoteParticipant,\r\n  CallAgent,\r\n  DeviceManager,\r\n  LocalVideoStream\r\n} from '@azure/communication-calling';\r\nimport { ParticipantStream } from '../core/reducers/index.js';\r\n\r\nexport interface GroupCallProps {\r\n  userId: string;\r\n  groupId: string;\r\n  call: Call;\r\n  callAgent: CallAgent;\r\n  deviceManager: DeviceManager;\r\n  mic: boolean;\r\n  remoteParticipants: RemoteParticipant[];\r\n  callState: string;\r\n  localVideo: boolean;\r\n  screenShareStreams: ParticipantStream[];\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  screenWidth: number;\r\n  shareScreen: boolean;\r\n  setAudioDeviceInfo(deviceInfo: AudioDeviceInfo): void;\r\n  setVideoDeviceInfo(deviceInfo: VideoDeviceInfo): void;\r\n  mute(): void;\r\n  isGroup(): void;\r\n  joinGroup(): void;\r\n  endCallHandler(): void;\r\n  localVideoStream: LocalVideoStream;\r\n  setLocalVideoStream: void;\r\n}\r\n\r\nexport default (props: GroupCallProps): JSX.Element => {\r\n  const [selectedPane, setSelectedPane] = useState(CommandPanelTypes.None);\r\n  const activeScreenShare = props.screenShareStreams && props.screenShareStreams.length === 1;\r\n\r\n  return (\r\n    <Stack horizontalAlign=\"center\" verticalAlign=\"center\" styles={containerStyles}>\r\n      <Stack.Item styles={headerStyles}>\r\n        <Header\r\n          selectedPane={selectedPane}\r\n          setSelectedPane={setSelectedPane}\r\n          endCallHandler={(): void => {\r\n            props.endCallHandler();\r\n          }}\r\n          screenWidth={props.screenWidth}\r\n          localVideoStream={props.localVideoStream}\r\n          setLocalVideoStream={props.setLocalVideoStream}\r\n        />\r\n      </Stack.Item>\r\n      <Stack.Item styles={containerStyles}>\r\n        {!props.shareScreen ? (\r\n          props.callState === Constants.CONNECTED && (\r\n            <Stack horizontal styles={containerStyles}>\r\n              <Stack.Item grow styles={activeScreenShare ? activeContainerClassName : hiddenContainerClassName}>\r\n                {activeScreenShare && <MediaFullScreen activeScreenShareStream={props.screenShareStreams[0]} />}\r\n              </Stack.Item>\r\n              <Stack.Item grow styles={!activeScreenShare ? activeContainerClassName : hiddenContainerClassName}>\r\n                <MediaGallery localVideoStream={props.localVideoStream} />\r\n              </Stack.Item>\r\n              {selectedPane !== CommandPanelTypes.None &&\r\n                (window.innerWidth > Constants.MINI_HEADER_WINDOW_WIDTH ? (\r\n                  <Stack.Item disableShrink styles={paneStyles}>\r\n                    <CommandPanel {...props} selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\r\n                  </Stack.Item>\r\n                ) : (\r\n                  <Overlay styles={overlayStyles}>\r\n                    <CommandPanel {...props} selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\r\n                  </Overlay>\r\n                ))}\r\n            </Stack>\r\n          )\r\n        ) : (\r\n          <Stack horizontal styles={containerStyles}>\r\n            <Stack.Item styles={loadingStyle}>\r\n              <Label>Your screen is being shared</Label>\r\n            </Stack.Item>\r\n            {selectedPane !== CommandPanelTypes.None &&\r\n            (window.innerWidth > Constants.MINI_HEADER_WINDOW_WIDTH ? (\r\n              <Stack.Item disableShrink styles={paneStyles}>\r\n                <CommandPanel {...props} selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\r\n              </Stack.Item>\r\n            ) : (\r\n              <Overlay styles={overlayStyles}>\r\n                <CommandPanel {...props} selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\r\n              </Overlay>\r\n            ))}\r\n          </Stack>           \r\n        )}\r\n      </Stack.Item>\r\n    </Stack>\r\n  );\r\n};\r\n","import { IStackTokens, mergeStyles } from '@fluentui/react';\n\nexport const mainStackTokens: IStackTokens = {\n  childrenGap: '0.25rem'\n};\nexport const buttonsStackTokens: IStackTokens = {\n  childrenGap: '0.75rem'\n};\nexport const upperStackTokens: IStackTokens = {\n  childrenGap: '1.5rem'\n};\nexport const bottomStackTokens: IStackTokens = {\n  childrenGap: '1.4375rem'\n};\nexport const endCallContainerStyle = mergeStyles({\n  width: '20.625rem'\n});\nexport const endCallTitleStyle = mergeStyles({\n  fontSize: '1.375rem',\n  fontWeight: 600\n});\nexport const buttonStyle = mergeStyles({\n  fontWeight: 600,\n  height: '2.5rem',\n  width: '9.875rem',\n  fontSize: '0.875rem', // 14px\n  padding: 0\n});\nexport const videoCameraIconStyle = mergeStyles({\n  marginRight: '0.375rem',\n  fontSize: '1.375rem'\n});\nexport const bottomStackFooterStyle = mergeStyles({\n  color: 'rgb(0,0,0)',\n  fontSize: '0.875 rem'\n});\n","import React from 'react';\r\nimport { DefaultButton, PrimaryButton, Stack } from '@fluentui/react';\r\nimport { VideoCameraEmphasisIcon } from '@fluentui/react-icons-northstar';\r\nimport {\r\n  endCallContainerStyle,\r\n  endCallTitleStyle,\r\n  buttonStyle,\r\n  mainStackTokens,\r\n  buttonsStackTokens,\r\n  upperStackTokens,\r\n  videoCameraIconStyle,\r\n} from './styles/EndCall.styles';\r\n\r\nexport interface EndCallProps {\r\n  message: string;\r\n  rejoinHandler(): void;\r\n  homeHandler(): void;\r\n}\r\n\r\nexport default (props: EndCallProps): JSX.Element => {\r\n  const goHomePage = 'Go to chatpage';\r\n  const rejoinCall = 'Rejoin call';\r\n  \r\n  return (\r\n    <Stack verticalAlign=\"center\" tokens={mainStackTokens} className={endCallContainerStyle}>\r\n      <Stack tokens={upperStackTokens}>\r\n        <div className={endCallTitleStyle}>{props.message}</div>\r\n        <Stack horizontal tokens={buttonsStackTokens}>\r\n          <PrimaryButton className={buttonStyle} onClick={props.rejoinHandler}>\r\n            <VideoCameraEmphasisIcon className={videoCameraIconStyle} size=\"medium\" />\r\n            {rejoinCall}\r\n          </PrimaryButton>\r\n          <DefaultButton className={buttonStyle} onClick={props.homeHandler}>\r\n            {goHomePage}\r\n          </DefaultButton>\r\n        </Stack>\r\n      </Stack>\r\n    </Stack>\r\n  );\r\n};\r\n","import { loadTheme, initializeIcons } from '@fluentui/react';\nimport React, { useState, useCallback, useEffect} from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { CallEndReason } from '@azure/communication-calling';\n\nimport ChatScreen from './containers/ChatScreen';\nimport ConfigurationScreen from './containers/ConfigurationScreen';\nimport CallConfigurationScreen from './containers/CallConfigurationScreen';\nimport EndScreen from './components/EndScreen';\nimport RemovedFromThreadScreen from './components/RemovedFromThreadScreen';\nimport HomeScreen from './containers/HomeScreen';\nimport { reducer } from './core/reducers/index';\nimport { getBuildTime, getChatSDKVersion, getThreadId } from './utils/utils';\n\nimport GroupCall from './containers/GroupCall';\nimport EndCall from './components/EndCall';\n\nconsole.info(`Azure Communication Services chat sample using @azure/communication-chat : ${getChatSDKVersion()}`);\nconsole.info(`Build Date : ${getBuildTime()}`);\n\nloadTheme({});\ninitializeIcons();\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nconst groupId = \"c07ff9d0-e09a-11eb-a078-25f7f03a6567\";\n\n\nexport default (): JSX.Element => {\n  const [page, setPage] = useState('home');\n  const [callEndReason, setCallEndReason] = useState<CallEndReason | undefined>();\n  const [screenWidth, setScreenWidth] = useState(0);\n  const [localVideoStream, setLocalVideoStream] = useState(undefined);\n\n  const unsupportedStateHandler = useCallback((): void => setPage('unsupported'), []);  \n\n  useEffect(() => {\n    const setWindowWidth = (): void => {\n      const width = typeof window !== 'undefined' ? window.innerWidth : 0;\n      setScreenWidth(width);\n    };\n\n    setWindowWidth();\n    window.addEventListener('resize', setWindowWidth);\n    return (): void => {\n      window.removeEventListener('resize', setWindowWidth);\n    } \n  }, []);\n\n  const getGroupIdFromUrl = (): string | null => {\n    const urlParams = new URLSearchParams(window.location.search);\n    console.log(\"I am here\" + urlParams.get('groupId'));\n    return urlParams.get('groupId');\n  };\n\n  const getGroupId = (): string => {\n    return groupId;\n  };\n\n  const getComponent = () => {\n    if (page === 'home') {\n      return <HomeScreen />;\n    } else if (page === 'configuration') {\n      return <ConfigurationScreen joinChatHandler={() => setPage('chat') } />;\n    } else if (page === 'chat') {     \n      return (\n        <ChatScreen\n          removedFromThreadHandler={() => setPage('removedFromThread')}\n          leaveChatHandler={() => setPage('end')}\n          startCallHandler={(): void => {\n            if(!getGroupIdFromUrl()) {\n              window.history.pushState({}, document.title, window.location.href + '&groupId=' + getGroupId());\n            }\n            setPage('callConfiguration');\n          }}\n        />\n      );\n    } else if (page === 'callConfiguration') {\n      return (\n        <CallConfigurationScreen\n          startCallHandler={(): void => setPage('call')}\n          unsupportedStateHandler={unsupportedStateHandler}\n          callEndedHandler={(errorMsg: CallEndReason): void => {\n            setCallEndReason(errorMsg);\n            setPage('error');\n          }}\n          groupId={getGroupId()}\n          screenWidth={screenWidth}\n          localVideoStream={localVideoStream}\n          setLocalVideoStream={setLocalVideoStream}\n        />\n      );\n    } else if (page === 'call') {\n      return (\n        <GroupCall\n          endCallHandler={(): void => setPage('endCall')}\n          groupId={getGroupId()}\n          screenWidth={screenWidth}\n          localVideoStream={localVideoStream}\n          setLocalVideoStream={setLocalVideoStream}\n        />\n      );\n    } else if (page === 'endCall') {\n      return (\n        <EndCall\n          message={'You left the call'}\n          rejoinHandler={(): void => {\n            setPage('callConfiguration');\n          }}\n          homeHandler={(): void => {\n            setPage('chat');\n          }}\n        />\n      );\n    } \n    else if (page === 'end') {\n      return (\n        <EndScreen\n          rejoinHandler={() => {\n            setPage('chat');\n          }}\n          homeHandler={() => (window.location.href = window.location.origin)}\n        />\n      );\n    } else if (page === 'removedFromThread') {\n      return <RemovedFromThreadScreen homeHandler={() => (window.location.href = window.location.origin)} />;\n    }\n  };\n\n  if (getThreadId() && page === 'home') {\n    setPage('configuration');\n  }\n\n  // if (getGroupIdFromUrl() && page === 'chat') {\n  //   setPage('callConfiguration');\n  // }\n\n  return <Provider store={store}>{getComponent()}</Provider>;\n};\n","import { Provider, teamsTheme, mergeThemes } from '@fluentui/react-northstar';\nimport { svgIconStyles } from '@fluentui/react-northstar/dist/es/themes/teams/components/SvgIcon/svgIconStyles';\nimport { svgIconVariables } from '@fluentui/react-northstar/dist/es/themes/teams/components/SvgIcon/svgIconVariables';\nimport * as siteVariables from '@fluentui/react-northstar/dist/es/themes/teams/siteVariables';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nconst iconTheme = {\n  componentStyles: {\n    SvgIcon: svgIconStyles\n  },\n  componentVariables: {\n    SvgIcon: svgIconVariables\n  },\n  siteVariables\n};\n\nReactDOM.render(\n  <Provider theme={mergeThemes(iconTheme, teamsTheme)} className=\"wrapper\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\" />\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/staticmedia.3545b0ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.8df54419.svg\";"],"sourceRoot":""}